
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008de8  08008de8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008de8  08008de8  00018de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008df0  08008df0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008df0  08008df0  00018df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008df4  08008df4  00018df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e3c  200000fc  08008ef4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f38  08008ef4  00021f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001af16  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b24  00000000  00000000  0003b085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  0003ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001316  00000000  00000000  00040418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b136  00000000  00000000  0004172e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ec32  00000000  00000000  0005c864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a172f  00000000  00000000  0007b496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068bc  00000000  00000000  0011cbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00123484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008d70 	.word	0x08008d70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008d70 	.word	0x08008d70

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fdbe 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f814 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 fa84 	bl	80009ec <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e4:	f000 f87a 	bl	80005dc <MX_ADC1_Init>
  MX_TIM1_Init();
 80004e8:	f000 f92e 	bl	8000748 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004ec:	f000 f9c8 	bl	8000880 <MX_TIM2_Init>
  MX_TIM9_Init();
 80004f0:	f000 fa10 	bl	8000914 <MX_TIM9_Init>
  MX_I2C2_Init();
 80004f4:	f000 f8c4 	bl	8000680 <MX_I2C2_Init>
  MX_SPI1_Init();
 80004f8:	f000 f8f0 	bl	80006dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004fc:	f000 fa4c 	bl	8000998 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000500:	f007 ff20 	bl	8008344 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x30>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f008 fbfe 	bl	8008d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000578:	2319      	movs	r3, #25
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800057c:	23c0      	movs	r3, #192	; 0xc0
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000584:	2304      	movs	r3, #4
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f002 fedd 	bl	800334c <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 fa98 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80005ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2103      	movs	r1, #3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f93e 	bl	800383c <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 fa81 	bl	8000acc <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_ADC1_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_ADC1_Init+0x98>)
 800061c:	4a17      	ldr	r2, [pc, #92]	; (800067c <MX_ADC1_Init+0xa0>)
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_ADC1_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_ADC1_Init+0x98>)
 8000628:	2201      	movs	r2, #1
 800062a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_ADC1_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <MX_ADC1_Init+0x98>)
 800063c:	f000 fda2 	bl	8001184 <HAL_ADC_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000646:	f000 fa41 	bl	8000acc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800064a:	2304      	movs	r3, #4
 800064c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_ADC1_Init+0x98>)
 800065c:	f000 fdd6 	bl	800120c <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000666:	f000 fa31 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000118 	.word	0x20000118
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2C2_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <MX_I2C2_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_I2C2_Init+0x50>)
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_I2C2_Init+0x58>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_I2C2_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_I2C2_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_I2C2_Init+0x50>)
 800069e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_I2C2_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2C2_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_I2C2_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2C2_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_I2C2_Init+0x50>)
 80006be:	f001 fa83 	bl	8001bc8 <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 fa00 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000160 	.word	0x20000160
 80006d4:	40005800 	.word	0x40005800
 80006d8:	000186a0 	.word	0x000186a0

080006dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_SPI1_Init+0x64>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <MX_SPI1_Init+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_SPI1_Init+0x64>)
 8000728:	220a      	movs	r2, #10
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_SPI1_Init+0x64>)
 800072e:	f003 fa65 	bl	8003bfc <HAL_SPI_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000738:	f000 f9c8 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200001b4 	.word	0x200001b4
 8000744:	40013000 	.word	0x40013000

08000748 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b092      	sub	sp, #72	; 0x48
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
 8000768:	615a      	str	r2, [r3, #20]
 800076a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2220      	movs	r2, #32
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f008 fad0 	bl	8008d18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <MX_TIM1_Init+0x130>)
 800077a:	4a40      	ldr	r2, [pc, #256]	; (800087c <MX_TIM1_Init+0x134>)
 800077c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800077e:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <MX_TIM1_Init+0x130>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <MX_TIM1_Init+0x130>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800078a:	4b3b      	ldr	r3, [pc, #236]	; (8000878 <MX_TIM1_Init+0x130>)
 800078c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000790:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b39      	ldr	r3, [pc, #228]	; (8000878 <MX_TIM1_Init+0x130>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <MX_TIM1_Init+0x130>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b36      	ldr	r3, [pc, #216]	; (8000878 <MX_TIM1_Init+0x130>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80007a4:	4834      	ldr	r0, [pc, #208]	; (8000878 <MX_TIM1_Init+0x130>)
 80007a6:	f003 fab2 	bl	8003d0e <HAL_TIM_OC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80007b0:	f000 f98c 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007c0:	4619      	mov	r1, r3
 80007c2:	482d      	ldr	r0, [pc, #180]	; (8000878 <MX_TIM1_Init+0x130>)
 80007c4:	f003 fe6c 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80007ce:	f000 f97d 	bl	8000acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007da:	2300      	movs	r3, #0
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007de:	2300      	movs	r3, #0
 80007e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4820      	ldr	r0, [pc, #128]	; (8000878 <MX_TIM1_Init+0x130>)
 80007f8:	f003 fad8 	bl	8003dac <HAL_TIM_OC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000802:	f000 f963 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	2204      	movs	r2, #4
 800080c:	4619      	mov	r1, r3
 800080e:	481a      	ldr	r0, [pc, #104]	; (8000878 <MX_TIM1_Init+0x130>)
 8000810:	f003 facc 	bl	8003dac <HAL_TIM_OC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800081a:	f000 f957 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	2208      	movs	r2, #8
 8000824:	4619      	mov	r1, r3
 8000826:	4814      	ldr	r0, [pc, #80]	; (8000878 <MX_TIM1_Init+0x130>)
 8000828:	f003 fac0 	bl	8003dac <HAL_TIM_OC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000832:	f000 f94b 	bl	8000acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <MX_TIM1_Init+0x130>)
 800085a:	f003 fe8f 	bl	800457c <HAL_TIMEx_ConfigBreakDeadTime>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000864:	f000 f932 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <MX_TIM1_Init+0x130>)
 800086a:	f000 fac1 	bl	8000df0 <HAL_TIM_MspPostInit>

}
 800086e:	bf00      	nop
 8000870:	3748      	adds	r7, #72	; 0x48
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000020c 	.word	0x2000020c
 800087c:	40010000 	.word	0x40010000

08000880 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_TIM2_Init+0x90>)
 800089e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_TIM2_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_TIM2_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_TIM2_Init+0x90>)
 80008b2:	f04f 32ff 	mov.w	r2, #4294967295
 80008b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_TIM2_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_TIM2_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	4619      	mov	r1, r3
 80008da:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_TIM2_Init+0x90>)
 80008dc:	f003 fd36 	bl	800434c <HAL_TIMEx_HallSensor_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008e6:	f000 f8f1 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80008ea:	2350      	movs	r3, #80	; 0x50
 80008ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	; (8000910 <MX_TIM2_Init+0x90>)
 80008f8:	f003 fdd2 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000902:	f000 f8e3 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000254 	.word	0x20000254

08000914 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]
 800092a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_TIM9_Init+0x7c>)
 800092e:	4a19      	ldr	r2, [pc, #100]	; (8000994 <MX_TIM9_Init+0x80>)
 8000930:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_TIM9_Init+0x7c>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_TIM9_Init+0x7c>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_TIM9_Init+0x7c>)
 8000940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000944:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_TIM9_Init+0x7c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_TIM9_Init+0x7c>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8000952:	480f      	ldr	r0, [pc, #60]	; (8000990 <MX_TIM9_Init+0x7c>)
 8000954:	f003 f9db 	bl	8003d0e <HAL_TIM_OC_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800095e:	f000 f8b5 	bl	8000acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_TIM9_Init+0x7c>)
 800097a:	f003 fa17 	bl	8003dac <HAL_TIM_OC_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000984:	f000 f8a2 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000029c 	.word	0x2000029c
 8000994:	40014000 	.word	0x40014000

08000998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_USART1_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009d0:	f003 fe26 	bl	8004620 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f877 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200002e4 	.word	0x200002e4
 80009e8:	40011000 	.word	0x40011000

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a26      	ldr	r2, [pc, #152]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <MX_GPIO_Init+0xd8>)
 8000a7a:	f001 f88b 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a7e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <MX_GPIO_Init+0xd8>)
 8000a98:	f000 fef8 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000a9c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_GPIO_Init+0xdc>)
 8000ab4:	f000 feea 	bl	800188c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	; 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020400 	.word	0x40020400

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <HAL_ADC_MspInit+0x7c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d127      	bne.n	8000b9a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b82:	2310      	movs	r3, #16
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b86:	2303      	movs	r3, #3
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <HAL_ADC_MspInit+0x84>)
 8000b96:	f000 fe79 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40012000 	.word	0x40012000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <HAL_I2C_MspInit+0xa8>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d13d      	bne.n	8000c4e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a20      	ldr	r2, [pc, #128]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf4:	2312      	movs	r3, #18
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c00:	2304      	movs	r3, #4
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4815      	ldr	r0, [pc, #84]	; (8000c60 <HAL_I2C_MspInit+0xb0>)
 8000c0c:	f000 fe3e 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000c22:	2309      	movs	r3, #9
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <HAL_I2C_MspInit+0xb0>)
 8000c2e:	f000 fe2d 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_I2C_MspInit+0xac>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40005800 	.word	0x40005800
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020400 	.word	0x40020400

08000c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <HAL_SPI_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12b      	bne.n	8000cde <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_SPI_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <HAL_SPI_MspInit+0x88>)
 8000c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_SPI_MspInit+0x88>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_SPI_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <HAL_SPI_MspInit+0x88>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_SPI_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cbe:	23e0      	movs	r3, #224	; 0xe0
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cce:	2305      	movs	r3, #5
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_SPI_MspInit+0x8c>)
 8000cda:	f000 fdd7 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40013000 	.word	0x40013000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <HAL_TIM_OC_MspInit+0x64>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10e      	bne.n	8000d24 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_TIM_OC_MspInit+0x68>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <HAL_TIM_OC_MspInit+0x68>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_TIM_OC_MspInit+0x68>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000d22:	e012      	b.n	8000d4a <HAL_TIM_OC_MspInit+0x56>
  else if(htim_oc->Instance==TIM9)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_TIM_OC_MspInit+0x6c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10d      	bne.n	8000d4a <HAL_TIM_OC_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_TIM_OC_MspInit+0x68>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_TIM_OC_MspInit+0x68>)
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <HAL_TIM_OC_MspInit+0x68>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40014000 	.word	0x40014000

08000d64 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d84:	d12b      	bne.n	8000dde <HAL_TIMEx_HallSensor_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a16      	ldr	r2, [pc, #88]	; (8000de8 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <HAL_TIMEx_HallSensor_MspInit+0x88>)
 8000dda:	f000 fd57 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <HAL_TIM_MspPostInit+0xa8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d13d      	bne.n	8000e8e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8000e4a:	f242 0303 	movw	r3, #8195	; 0x2003
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <HAL_TIM_MspPostInit+0xb0>)
 8000e68:	f000 fd10 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e6c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <HAL_TIM_MspPostInit+0xb4>)
 8000e8a:	f000 fcff 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a28      	ldr	r2, [pc, #160]	; (8000f68 <HAL_UART_MspInit+0xc0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d14a      	bne.n	8000f60 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <HAL_UART_MspInit+0xc4>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a26      	ldr	r2, [pc, #152]	; (8000f6c <HAL_UART_MspInit+0xc4>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <HAL_UART_MspInit+0xc4>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_UART_MspInit+0xc4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <HAL_UART_MspInit+0xc4>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <HAL_UART_MspInit+0xc4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_UART_MspInit+0xc4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <HAL_UART_MspInit+0xc4>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_UART_MspInit+0xc4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f30:	2307      	movs	r3, #7
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <HAL_UART_MspInit+0xc8>)
 8000f3c:	f000 fca6 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f40:	2308      	movs	r3, #8
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f50:	2307      	movs	r3, #7
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <HAL_UART_MspInit+0xcc>)
 8000f5c:	f000 fc96 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40011000 	.word	0x40011000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f89a 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <OTG_FS_IRQHandler+0x10>)
 8000fd2:	f001 f88d 	bl	80020f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000180c 	.word	0x2000180c

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100a:	490e      	ldr	r1, [pc, #56]	; (8001044 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001020:	4c0b      	ldr	r4, [pc, #44]	; (8001050 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800102e:	f7ff ffd7 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001032:	f007 fe79 	bl	8008d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fa4d 	bl	80004d4 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800103c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001048:	08008df8 	.word	0x08008df8
  ldr r2, =_sbss
 800104c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001050:	20001f38 	.word	0x20001f38

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_Init+0x40>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_Init+0x40>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x40>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 fbc1 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	200f      	movs	r0, #15
 8001088:	f000 f808 	bl	800109c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fd24 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x54>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fbd9 	bl	8001872 <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 fba1 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_InitTick+0x5c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	20000328 	.word	0x20000328

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000328 	.word	0x20000328

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008

08001184 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e033      	b.n	8001202 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fcc0 	bl	8000b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d118      	bne.n	80011f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ca:	f023 0302 	bic.w	r3, r3, #2
 80011ce:	f043 0202 	orr.w	r2, r3, #2
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f94a 	bl	8001470 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f023 0303 	bic.w	r3, r3, #3
 80011ea:	f043 0201 	orr.w	r2, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
 80011f2:	e001      	b.n	80011f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1c>
 8001224:	2302      	movs	r3, #2
 8001226:	e113      	b.n	8001450 <HAL_ADC_ConfigChannel+0x244>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b09      	cmp	r3, #9
 8001236:	d925      	bls.n	8001284 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68d9      	ldr	r1, [r3, #12]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	3b1e      	subs	r3, #30
 800124e:	2207      	movs	r2, #7
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43da      	mvns	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	400a      	ands	r2, r1
 800125c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d9      	ldr	r1, [r3, #12]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	4603      	mov	r3, r0
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4403      	add	r3, r0
 8001276:	3b1e      	subs	r3, #30
 8001278:	409a      	lsls	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	e022      	b.n	80012ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6919      	ldr	r1, [r3, #16]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	2207      	movs	r2, #7
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	400a      	ands	r2, r1
 80012a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6919      	ldr	r1, [r3, #16]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4403      	add	r3, r0
 80012c0:	409a      	lsls	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d824      	bhi.n	800131c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	3b05      	subs	r3, #5
 80012e4:	221f      	movs	r2, #31
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	400a      	ands	r2, r1
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3b05      	subs	r3, #5
 800130e:	fa00 f203 	lsl.w	r2, r0, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
 800131a:	e04c      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	d824      	bhi.n	800136e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	3b23      	subs	r3, #35	; 0x23
 8001336:	221f      	movs	r2, #31
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43da      	mvns	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	400a      	ands	r2, r1
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3b23      	subs	r3, #35	; 0x23
 8001360:	fa00 f203 	lsl.w	r2, r0, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
 800136c:	e023      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3b41      	subs	r3, #65	; 0x41
 8001380:	221f      	movs	r2, #31
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	400a      	ands	r2, r1
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b41      	subs	r3, #65	; 0x41
 80013aa:	fa00 f203 	lsl.w	r2, r0, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <HAL_ADC_ConfigChannel+0x250>)
 80013b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a28      	ldr	r2, [pc, #160]	; (8001460 <HAL_ADC_ConfigChannel+0x254>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d10f      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1d8>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b12      	cmp	r3, #18
 80013ca:	d10b      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <HAL_ADC_ConfigChannel+0x254>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12b      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x23a>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_ADC_ConfigChannel+0x258>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d003      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x1f4>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d122      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_ADC_ConfigChannel+0x258>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d111      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_ADC_ConfigChannel+0x25c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_ADC_ConfigChannel+0x260>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	0c9a      	lsrs	r2, r3, #18
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001438:	e002      	b.n	8001440 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3b01      	subs	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40012300 	.word	0x40012300
 8001460:	40012000 	.word	0x40012000
 8001464:	10000012 	.word	0x10000012
 8001468:	20000000 	.word	0x20000000
 800146c:	431bde83 	.word	0x431bde83

08001470 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001478:	4b79      	ldr	r3, [pc, #484]	; (8001660 <ADC_Init+0x1f0>)
 800147a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	431a      	orrs	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	021a      	lsls	r2, r3, #8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6899      	ldr	r1, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	4a58      	ldr	r2, [pc, #352]	; (8001664 <ADC_Init+0x1f4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d022      	beq.n	800154e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001516:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6899      	ldr	r1, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6899      	ldr	r1, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	e00f      	b.n	800156e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800155c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800156c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0202 	bic.w	r2, r2, #2
 800157c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7e1b      	ldrb	r3, [r3, #24]
 8001588:	005a      	lsls	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d01b      	beq.n	80015d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6859      	ldr	r1, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	3b01      	subs	r3, #1
 80015c8:	035a      	lsls	r2, r3, #13
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	e007      	b.n	80015e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	3b01      	subs	r3, #1
 8001600:	051a      	lsls	r2, r3, #20
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6899      	ldr	r1, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001626:	025a      	lsls	r2, r3, #9
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800163e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6899      	ldr	r1, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	029a      	lsls	r2, r3, #10
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	609a      	str	r2, [r3, #8]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40012300 	.word	0x40012300
 8001664:	0f000001 	.word	0x0f000001

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff29 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff3e 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff31 	bl	80016cc <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffa2 	bl	80017c4 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e159      	b.n	8001b5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8148 	bne.w	8001b56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d005      	beq.n	80018de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d130      	bne.n	8001940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 0201 	and.w	r2, r3, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b03      	cmp	r3, #3
 800194a:	d017      	beq.n	800197c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80a2 	beq.w	8001b56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a49      	ldr	r2, [pc, #292]	; (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d019      	beq.n	8001a8e <HAL_GPIO_Init+0x202>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a48      	ldr	r2, [pc, #288]	; (8001b80 <HAL_GPIO_Init+0x2f4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0x1fe>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a47      	ldr	r2, [pc, #284]	; (8001b84 <HAL_GPIO_Init+0x2f8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00d      	beq.n	8001a86 <HAL_GPIO_Init+0x1fa>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a46      	ldr	r2, [pc, #280]	; (8001b88 <HAL_GPIO_Init+0x2fc>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0x1f6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a45      	ldr	r2, [pc, #276]	; (8001b8c <HAL_GPIO_Init+0x300>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_GPIO_Init+0x1f2>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a7e:	2307      	movs	r3, #7
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad2:	4a2f      	ldr	r2, [pc, #188]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001afc:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b26:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b50:	4a0f      	ldr	r2, [pc, #60]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	f67f aea2 	bls.w	80018a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e12b      	b.n	8001e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7fe ffde 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2224      	movs	r2, #36	; 0x24
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c2c:	f001 ffbe 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8001c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4a81      	ldr	r2, [pc, #516]	; (8001e3c <HAL_I2C_Init+0x274>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d807      	bhi.n	8001c4c <HAL_I2C_Init+0x84>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a80      	ldr	r2, [pc, #512]	; (8001e40 <HAL_I2C_Init+0x278>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	bf94      	ite	ls
 8001c44:	2301      	movls	r3, #1
 8001c46:	2300      	movhi	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e006      	b.n	8001c5a <HAL_I2C_Init+0x92>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4a7d      	ldr	r2, [pc, #500]	; (8001e44 <HAL_I2C_Init+0x27c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	bf94      	ite	ls
 8001c54:	2301      	movls	r3, #1
 8001c56:	2300      	movhi	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0e7      	b.n	8001e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4a78      	ldr	r2, [pc, #480]	; (8001e48 <HAL_I2C_Init+0x280>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9b      	lsrs	r3, r3, #18
 8001c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a6a      	ldr	r2, [pc, #424]	; (8001e3c <HAL_I2C_Init+0x274>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d802      	bhi.n	8001c9c <HAL_I2C_Init+0xd4>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	e009      	b.n	8001cb0 <HAL_I2C_Init+0xe8>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	4a69      	ldr	r2, [pc, #420]	; (8001e4c <HAL_I2C_Init+0x284>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	3301      	adds	r3, #1
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	495c      	ldr	r1, [pc, #368]	; (8001e3c <HAL_I2C_Init+0x274>)
 8001ccc:	428b      	cmp	r3, r1
 8001cce:	d819      	bhi.n	8001d04 <HAL_I2C_Init+0x13c>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e59      	subs	r1, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00a      	beq.n	8001d00 <HAL_I2C_Init+0x138>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1e59      	subs	r1, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfe:	e051      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d00:	2304      	movs	r3, #4
 8001d02:	e04f      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d111      	bne.n	8001d30 <HAL_I2C_Init+0x168>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1e58      	subs	r0, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	440b      	add	r3, r1
 8001d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	e012      	b.n	8001d56 <HAL_I2C_Init+0x18e>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e58      	subs	r0, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Init+0x196>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e022      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10e      	bne.n	8001d84 <HAL_I2C_Init+0x1bc>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1e58      	subs	r0, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	440b      	add	r3, r1
 8001d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d82:	e00f      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e58      	subs	r0, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	0099      	lsls	r1, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	6809      	ldr	r1, [r1, #0]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6911      	ldr	r1, [r2, #16]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68d2      	ldr	r2, [r2, #12]
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	000186a0 	.word	0x000186a0
 8001e40:	001e847f 	.word	0x001e847f
 8001e44:	003d08ff 	.word	0x003d08ff
 8001e48:	431bde83 	.word	0x431bde83
 8001e4c:	10624dd3 	.word	0x10624dd3

08001e50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e52:	b08f      	sub	sp, #60	; 0x3c
 8001e54:	af0a      	add	r7, sp, #40	; 0x28
 8001e56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e10f      	b.n	8002082 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d106      	bne.n	8001e82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f006 fc41 	bl	8008704 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2203      	movs	r2, #3
 8001e86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 ff94 	bl	8004dce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	687e      	ldr	r6, [r7, #4]
 8001eae:	466d      	mov	r5, sp
 8001eb0:	f106 0410 	add.w	r4, r6, #16
 8001eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec4:	1d33      	adds	r3, r6, #4
 8001ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec8:	6838      	ldr	r0, [r7, #0]
 8001eca:	f002 fe6b 	bl	8004ba4 <USB_CoreInit>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0d0      	b.n	8002082 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 ff82 	bl	8004df0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e04a      	b.n	8001f88 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	333d      	adds	r3, #61	; 0x3d
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	333c      	adds	r3, #60	; 0x3c
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	b298      	uxth	r0, r3
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3344      	adds	r3, #68	; 0x44
 8001f2e:	4602      	mov	r2, r0
 8001f30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	3340      	adds	r3, #64	; 0x40
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	3348      	adds	r3, #72	; 0x48
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	334c      	adds	r3, #76	; 0x4c
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3354      	adds	r3, #84	; 0x54
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	3301      	adds	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3af      	bcc.n	8001ef2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	e044      	b.n	8002022 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	3301      	adds	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d3b5      	bcc.n	8001f98 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	687e      	ldr	r6, [r7, #4]
 8002034:	466d      	mov	r5, sp
 8002036:	f106 0410 	add.w	r4, r6, #16
 800203a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002042:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002046:	e885 0003 	stmia.w	r5, {r0, r1}
 800204a:	1d33      	adds	r3, r6, #4
 800204c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204e:	6838      	ldr	r0, [r7, #0]
 8002050:	f002 ff1a 	bl	8004e88 <USB_DevInit>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e00d      	b.n	8002082 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f004 f869 	bl	8006152 <USB_DevDisconnect>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800208a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_PCD_Start+0x1c>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e020      	b.n	80020e8 <HAL_PCD_Start+0x5e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d109      	bne.n	80020ca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d005      	beq.n	80020ca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fe6c 	bl	8004dac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 f819 	bl	8006110 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b08d      	sub	sp, #52	; 0x34
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f004 f8d7 	bl	80062ba <USB_GetMode>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 848a 	bne.w	8002a28 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f004 f83b 	bl	8006194 <USB_ReadInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8480 	beq.w	8002a26 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f004 f828 	bl	8006194 <USB_ReadInterrupts>
 8002144:	4603      	mov	r3, r0
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b02      	cmp	r3, #2
 800214c:	d107      	bne.n	800215e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f002 0202 	and.w	r2, r2, #2
 800215c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f004 f816 	bl	8006194 <USB_ReadInterrupts>
 8002168:	4603      	mov	r3, r0
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b10      	cmp	r3, #16
 8002170:	d161      	bne.n	8002236 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0210 	bic.w	r2, r2, #16
 8002180:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f003 020f 	and.w	r2, r3, #15
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	3304      	adds	r3, #4
 80021a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	0c5b      	lsrs	r3, r3, #17
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d124      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d035      	beq.n	8002226 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	6a38      	ldr	r0, [r7, #32]
 80021ce:	f003 fe4d 	bl	8005e6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021de:	441a      	add	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021f0:	441a      	add	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	621a      	str	r2, [r3, #32]
 80021f6:	e016      	b.n	8002226 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	0c5b      	lsrs	r3, r3, #17
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	2b06      	cmp	r3, #6
 8002202:	d110      	bne.n	8002226 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800220a:	2208      	movs	r2, #8
 800220c:	4619      	mov	r1, r3
 800220e:	6a38      	ldr	r0, [r7, #32]
 8002210:	f003 fe2c 	bl	8005e6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	6a1a      	ldr	r2, [r3, #32]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002220:	441a      	add	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699a      	ldr	r2, [r3, #24]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0210 	orr.w	r2, r2, #16
 8002234:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f003 ffaa 	bl	8006194 <USB_ReadInterrupts>
 8002240:	4603      	mov	r3, r0
 8002242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002246:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800224a:	f040 80a7 	bne.w	800239c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f003 ffaf 	bl	80061ba <USB_ReadDevAllOutEpInterrupt>
 800225c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800225e:	e099      	b.n	8002394 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 808e 	beq.w	8002388 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f003 ffd3 	bl	8006222 <USB_ReadDevOutEPInterrupt>
 800227c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00c      	beq.n	80022a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002294:	461a      	mov	r2, r3
 8002296:	2301      	movs	r3, #1
 8002298:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800229a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fec3 	bl	8003028 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00c      	beq.n	80022c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b8:	461a      	mov	r2, r3
 80022ba:	2308      	movs	r3, #8
 80022bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 ff99 	bl	80031f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022dc:	461a      	mov	r2, r3
 80022de:	2310      	movs	r3, #16
 80022e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d030      	beq.n	800234e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d109      	bne.n	800230c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800230a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800230c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	3304      	adds	r3, #4
 8002320:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	78db      	ldrb	r3, [r3, #3]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d108      	bne.n	800233c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2200      	movs	r2, #0
 800232e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f006 fae0 	bl	80088fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002348:	461a      	mov	r2, r3
 800234a:	2302      	movs	r3, #2
 800234c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	4413      	add	r3, r2
 8002360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002364:	461a      	mov	r2, r3
 8002366:	2320      	movs	r3, #32
 8002368:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d009      	beq.n	8002388 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4413      	add	r3, r2
 800237c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002380:	461a      	mov	r2, r3
 8002382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002386:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	3301      	adds	r3, #1
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	f47f af62 	bne.w	8002260 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f003 fef7 	bl	8006194 <USB_ReadInterrupts>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023b0:	f040 80db 	bne.w	800256a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f003 ff18 	bl	80061ee <USB_ReadDevAllInEpInterrupt>
 80023be:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023c4:	e0cd      	b.n	8002562 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80c2 	beq.w	8002556 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 ff3e 	bl	800625e <USB_ReadDevInEPInterrupt>
 80023e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d057      	beq.n	800249e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	2201      	movs	r2, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43db      	mvns	r3, r3
 8002408:	69f9      	ldr	r1, [r7, #28]
 800240a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800240e:	4013      	ands	r3, r2
 8002410:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	4413      	add	r3, r2
 800241a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800241e:	461a      	mov	r2, r3
 8002420:	2301      	movs	r3, #1
 8002422:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d132      	bne.n	8002492 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	334c      	adds	r3, #76	; 0x4c
 800243c:	6819      	ldr	r1, [r3, #0]
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4403      	add	r3, r0
 800244c:	3348      	adds	r3, #72	; 0x48
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4419      	add	r1, r3
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4403      	add	r3, r0
 8002460:	334c      	adds	r3, #76	; 0x4c
 8002462:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	2b00      	cmp	r3, #0
 8002468:	d113      	bne.n	8002492 <HAL_PCD_IRQHandler+0x3a2>
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3354      	adds	r3, #84	; 0x54
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d108      	bne.n	8002492 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800248a:	461a      	mov	r2, r3
 800248c:	2101      	movs	r1, #1
 800248e:	f003 ff45 	bl	800631c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	b2db      	uxtb	r3, r3
 8002496:	4619      	mov	r1, r3
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f006 f9b4 	bl	8008806 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b4:	461a      	mov	r2, r3
 80024b6:	2308      	movs	r3, #8
 80024b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d0:	461a      	mov	r2, r3
 80024d2:	2310      	movs	r3, #16
 80024d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ec:	461a      	mov	r2, r3
 80024ee:	2340      	movs	r3, #64	; 0x40
 80024f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d023      	beq.n	8002544 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024fe:	6a38      	ldr	r0, [r7, #32]
 8002500:	f002 fe26 	bl	8005150 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	3338      	adds	r3, #56	; 0x38
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	3304      	adds	r3, #4
 8002516:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	78db      	ldrb	r3, [r3, #3]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d108      	bne.n	8002532 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2200      	movs	r2, #0
 8002524:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4619      	mov	r1, r3
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f006 f9f7 	bl	8008920 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800253e:	461a      	mov	r2, r3
 8002540:	2302      	movs	r3, #2
 8002542:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800254e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fcdb 	bl	8002f0c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	3301      	adds	r3, #1
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	f47f af2e 	bne.w	80023c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f003 fe10 	bl	8006194 <USB_ReadInterrupts>
 8002574:	4603      	mov	r3, r0
 8002576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800257a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800257e:	d122      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800259a:	2b01      	cmp	r3, #1
 800259c:	d108      	bne.n	80025b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025a6:	2100      	movs	r1, #0
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fec3 	bl	8003334 <HAL_PCDEx_LPM_Callback>
 80025ae:	e002      	b.n	80025b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f006 f995 	bl	80088e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 fde2 	bl	8006194 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025da:	d112      	bne.n	8002602 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f006 f951 	bl	8008894 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002600:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fdc4 	bl	8006194 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002616:	f040 80b7 	bne.w	8002788 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2110      	movs	r1, #16
 8002634:	4618      	mov	r0, r3
 8002636:	f002 fd8b 	bl	8005150 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800263e:	e046      	b.n	80026ce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800264c:	461a      	mov	r2, r3
 800264e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002652:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002664:	0151      	lsls	r1, r2, #5
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	440a      	add	r2, r1
 800266a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800266e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002672:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	4413      	add	r3, r2
 800267c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002680:	461a      	mov	r2, r3
 8002682:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002686:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002698:	0151      	lsls	r1, r2, #5
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	440a      	add	r2, r1
 800269e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b8:	0151      	lsls	r1, r2, #5
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	440a      	add	r2, r1
 80026be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	3301      	adds	r3, #1
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3b3      	bcc.n	8002640 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d016      	beq.n	8002722 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002704:	f043 030b 	orr.w	r3, r3, #11
 8002708:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271a:	f043 030b 	orr.w	r3, r3, #11
 800271e:	6453      	str	r3, [r2, #68]	; 0x44
 8002720:	e015      	b.n	800274e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002730:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002734:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002738:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002748:	f043 030b 	orr.w	r3, r3, #11
 800274c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800275c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002760:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002772:	461a      	mov	r2, r3
 8002774:	f003 fdd2 	bl	800631c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fd01 	bl	8006194 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279c:	d124      	bne.n	80027e8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fd97 	bl	80062d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 fd4c 	bl	800524a <USB_GetDevSpeed>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461a      	mov	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681c      	ldr	r4, [r3, #0]
 80027be:	f001 f9e9 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 80027c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	4620      	mov	r0, r4
 80027ce:	f002 fa4b 	bl	8004c68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f006 f83f 	bl	8008856 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 fcd1 	bl	8006194 <USB_ReadInterrupts>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d10a      	bne.n	8002812 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f006 f81c 	bl	800883a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f002 0208 	and.w	r2, r2, #8
 8002810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f003 fcbc 	bl	8006194 <USB_ReadInterrupts>
 800281c:	4603      	mov	r3, r0
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d122      	bne.n	800286c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002832:	2301      	movs	r3, #1
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
 8002836:	e014      	b.n	8002862 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	b2db      	uxtb	r3, r3
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fb27 	bl	8002eaa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	3301      	adds	r3, #1
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002868:	429a      	cmp	r2, r3
 800286a:	d3e5      	bcc.n	8002838 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f003 fc8f 	bl	8006194 <USB_ReadInterrupts>
 8002876:	4603      	mov	r3, r0
 8002878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002880:	d13b      	bne.n	80028fa <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002882:	2301      	movs	r3, #1
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	e02b      	b.n	80028e0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	3340      	adds	r3, #64	; 0x40
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d115      	bne.n	80028da <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80028ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	da12      	bge.n	80028da <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	333f      	adds	r3, #63	; 0x3f
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4619      	mov	r1, r3
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fae8 	bl	8002eaa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	3301      	adds	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d3ce      	bcc.n	8002888 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f003 fc48 	bl	8006194 <USB_ReadInterrupts>
 8002904:	4603      	mov	r3, r0
 8002906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800290e:	d155      	bne.n	80029bc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002910:	2301      	movs	r3, #1
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	e045      	b.n	80029a2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d12e      	bne.n	800299c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800293e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002940:	2b00      	cmp	r3, #0
 8002942:	da2b      	bge.n	800299c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002950:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002954:	429a      	cmp	r2, r3
 8002956:	d121      	bne.n	800299c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002998:	6053      	str	r3, [r2, #4]
            break;
 800299a:	e007      	b.n	80029ac <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	3301      	adds	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d3b4      	bcc.n	8002916 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fbe7 	bl	8006194 <USB_ReadInterrupts>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d0:	d10a      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f005 ffb6 	bl	8008944 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fbd1 	bl	8006194 <USB_ReadInterrupts>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d115      	bne.n	8002a28 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f005 ffa6 	bl	8008960 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	e000      	b.n	8002a28 <HAL_PCD_IRQHandler+0x938>
      return;
 8002a26:	bf00      	nop
    }
  }
}
 8002a28:	3734      	adds	r7, #52	; 0x34
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd90      	pop	{r4, r7, pc}

08002a2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_PCD_SetAddress+0x1a>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e013      	b.n	8002a70 <HAL_PCD_SetAddress+0x42>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f003 fb2f 	bl	80060c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	70fb      	strb	r3, [r7, #3]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	803b      	strh	r3, [r7, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da0f      	bge.n	8002abe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	3338      	adds	r3, #56	; 0x38
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	705a      	strb	r2, [r3, #1]
 8002abc:	e00f      	b.n	8002ade <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 020f 	and.w	r2, r3, #15
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aea:	883a      	ldrh	r2, [r7, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	78ba      	ldrb	r2, [r7, #2]
 8002af4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	785b      	ldrb	r3, [r3, #1]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b08:	78bb      	ldrb	r3, [r7, #2]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d102      	bne.n	8002b14 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_PCD_EP_Open+0xaa>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e00e      	b.n	8002b40 <HAL_PCD_EP_Open+0xc8>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68f9      	ldr	r1, [r7, #12]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 fbaf 	bl	8005294 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	da0f      	bge.n	8002b7c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	3338      	adds	r3, #56	; 0x38
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4413      	add	r3, r2
 8002b70:	3304      	adds	r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	705a      	strb	r2, [r3, #1]
 8002b7a:	e00f      	b.n	8002b9c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	3304      	adds	r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_PCD_EP_Close+0x6e>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e00e      	b.n	8002bd4 <HAL_PCD_EP_Close+0x8c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68f9      	ldr	r1, [r7, #12]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f002 fbed 	bl	80053a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	460b      	mov	r3, r1
 8002bea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4413      	add	r3, r2
 8002c02:	3304      	adds	r3, #4
 8002c04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2200      	movs	r2, #0
 8002c16:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c1e:	7afb      	ldrb	r3, [r7, #11]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d102      	bne.n	8002c38 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c38:	7afb      	ldrb	r3, [r7, #11]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6979      	ldr	r1, [r7, #20]
 8002c50:	f002 fecc 	bl	80059ec <USB_EP0StartXfer>
 8002c54:	e008      	b.n	8002c68 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	6979      	ldr	r1, [r7, #20]
 8002c64:	f002 fc7a 	bl	800555c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	f003 020f 	and.w	r2, r3, #15
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c94:	681b      	ldr	r3, [r3, #0]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb2:	7afb      	ldrb	r3, [r7, #11]
 8002cb4:	f003 020f 	and.w	r2, r3, #15
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	3338      	adds	r3, #56	; 0x38
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce2:	7afb      	ldrb	r3, [r7, #11]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d102      	bne.n	8002cfc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cfc:	7afb      	ldrb	r3, [r7, #11]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	6979      	ldr	r1, [r7, #20]
 8002d14:	f002 fe6a 	bl	80059ec <USB_EP0StartXfer>
 8002d18:	e008      	b.n	8002d2c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	6979      	ldr	r1, [r7, #20]
 8002d28:	f002 fc18 	bl	800555c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	f003 020f 	and.w	r2, r3, #15
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d901      	bls.n	8002d54 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e050      	b.n	8002df6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da0f      	bge.n	8002d7c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 020f 	and.w	r2, r3, #15
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	3338      	adds	r3, #56	; 0x38
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	3304      	adds	r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	705a      	strb	r2, [r3, #1]
 8002d7a:	e00d      	b.n	8002d98 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3304      	adds	r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_PCD_EP_SetStall+0x82>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e01e      	b.n	8002df6 <HAL_PCD_EP_SetStall+0xc0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68f9      	ldr	r1, [r7, #12]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 f8a8 	bl	8005f1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	b2d9      	uxtb	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002de6:	461a      	mov	r2, r3
 8002de8:	f003 fa98 	bl	800631c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d901      	bls.n	8002e1c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e042      	b.n	8002ea2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	da0f      	bge.n	8002e44 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	f003 020f 	and.w	r2, r3, #15
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	3338      	adds	r3, #56	; 0x38
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	3304      	adds	r3, #4
 8002e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	705a      	strb	r2, [r3, #1]
 8002e42:	e00f      	b.n	8002e64 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	f003 020f 	and.w	r2, r3, #15
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_PCD_EP_ClrStall+0x86>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e00e      	b.n	8002ea2 <HAL_PCD_EP_ClrStall+0xa4>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68f9      	ldr	r1, [r7, #12]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 f8b0 	bl	8005ff8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	da0c      	bge.n	8002ed8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 020f 	and.w	r2, r3, #15
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	3338      	adds	r3, #56	; 0x38
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	e00c      	b.n	8002ef2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 020f 	and.w	r2, r3, #15
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	3304      	adds	r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68f9      	ldr	r1, [r7, #12]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f002 fecf 	bl	8005c9c <USB_EPStopXfer>
 8002efe:	4603      	mov	r3, r0
 8002f00:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f02:	7afb      	ldrb	r3, [r7, #11]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	3338      	adds	r3, #56	; 0x38
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d901      	bls.n	8002f44 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e06c      	b.n	800301e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	699a      	ldr	r2, [r3, #24]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d902      	bls.n	8002f60 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	3303      	adds	r3, #3
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f68:	e02b      	b.n	8002fc2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d902      	bls.n	8002f86 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3303      	adds	r3, #3
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6919      	ldr	r1, [r3, #16]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6978      	ldr	r0, [r7, #20]
 8002fa6:	f002 ff23 	bl	8005df0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	441a      	add	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	441a      	add	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d809      	bhi.n	8002fec <PCD_WriteEmptyTxFifo+0xe0>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a1a      	ldr	r2, [r3, #32]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d203      	bcs.n	8002fec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1be      	bne.n	8002f6a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d811      	bhi.n	800301c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	2201      	movs	r2, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	43db      	mvns	r3, r3
 8003012:	6939      	ldr	r1, [r7, #16]
 8003014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003018:	4013      	ands	r3, r2
 800301a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	333c      	adds	r3, #60	; 0x3c
 8003040:	3304      	adds	r3, #4
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d17b      	bne.n	8003156 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4a61      	ldr	r2, [pc, #388]	; (80031f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	f240 80b9 	bls.w	80031e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80b3 	beq.w	80031e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308a:	461a      	mov	r2, r3
 800308c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003090:	6093      	str	r3, [r2, #8]
 8003092:	e0a7      	b.n	80031e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	2320      	movs	r3, #32
 80030ae:	6093      	str	r3, [r2, #8]
 80030b0:	e098      	b.n	80031e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f040 8093 	bne.w	80031e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	4a4b      	ldr	r2, [pc, #300]	; (80031f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d90f      	bls.n	80030e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030dc:	461a      	mov	r2, r3
 80030de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030e2:	6093      	str	r3, [r2, #8]
 80030e4:	e07e      	b.n	80031e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	3304      	adds	r3, #4
 80030fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	0159      	lsls	r1, r3, #5
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	440b      	add	r3, r1
 8003108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003112:	1ad2      	subs	r2, r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d114      	bne.n	8003148 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003130:	461a      	mov	r2, r3
 8003132:	2101      	movs	r1, #1
 8003134:	f003 f8f2 	bl	800631c <USB_EP0_OutStart>
 8003138:	e006      	b.n	8003148 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	441a      	add	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	4619      	mov	r1, r3
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f005 fb3e 	bl	80087d0 <HAL_PCD_DataOutStageCallback>
 8003154:	e046      	b.n	80031e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d124      	bne.n	80031a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003174:	461a      	mov	r2, r3
 8003176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317a:	6093      	str	r3, [r2, #8]
 800317c:	e032      	b.n	80031e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	2320      	movs	r3, #32
 8003198:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f005 fb15 	bl	80087d0 <HAL_PCD_DataOutStageCallback>
 80031a6:	e01d      	b.n	80031e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d114      	bne.n	80031d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031d0:	461a      	mov	r2, r3
 80031d2:	2100      	movs	r1, #0
 80031d4:	f003 f8a2 	bl	800631c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	4619      	mov	r1, r3
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f005 faf6 	bl	80087d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3720      	adds	r7, #32
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	4f54300a 	.word	0x4f54300a
 80031f4:	4f54310a 	.word	0x4f54310a

080031f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	333c      	adds	r3, #60	; 0x3c
 8003210:	3304      	adds	r3, #4
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a15      	ldr	r2, [pc, #84]	; (8003280 <PCD_EP_OutSetupPacket_int+0x88>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d90e      	bls.n	800324c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003234:	2b00      	cmp	r3, #0
 8003236:	d009      	beq.n	800324c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003244:	461a      	mov	r2, r3
 8003246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800324a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f005 faad 	bl	80087ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <PCD_EP_OutSetupPacket_int+0x88>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d90c      	bls.n	8003274 <PCD_EP_OutSetupPacket_int+0x7c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d108      	bne.n	8003274 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800326c:	461a      	mov	r2, r3
 800326e:	2101      	movs	r1, #1
 8003270:	f003 f854 	bl	800631c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	4f54300a 	.word	0x4f54300a

08003284 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	70fb      	strb	r3, [r7, #3]
 8003290:	4613      	mov	r3, r2
 8003292:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d107      	bne.n	80032b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032a2:	883b      	ldrh	r3, [r7, #0]
 80032a4:	0419      	lsls	r1, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28
 80032b0:	e028      	b.n	8003304 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	4413      	add	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e00d      	b.n	80032e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	3340      	adds	r3, #64	; 0x40
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	4413      	add	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	3301      	adds	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d3ec      	bcc.n	80032c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032ec:	883b      	ldrh	r3, [r7, #0]
 80032ee:	0418      	lsls	r0, r3, #16
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	4302      	orrs	r2, r0
 80032fc:	3340      	adds	r3, #64	; 0x40
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e267      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d075      	beq.n	8003456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336a:	4b88      	ldr	r3, [pc, #544]	; (800358c <HAL_RCC_OscConfig+0x240>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b04      	cmp	r3, #4
 8003374:	d00c      	beq.n	8003390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003376:	4b85      	ldr	r3, [pc, #532]	; (800358c <HAL_RCC_OscConfig+0x240>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337e:	2b08      	cmp	r3, #8
 8003380:	d112      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003382:	4b82      	ldr	r3, [pc, #520]	; (800358c <HAL_RCC_OscConfig+0x240>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338e:	d10b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4b7e      	ldr	r3, [pc, #504]	; (800358c <HAL_RCC_OscConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d05b      	beq.n	8003454 <HAL_RCC_OscConfig+0x108>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d157      	bne.n	8003454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e242      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x74>
 80033b2:	4b76      	ldr	r3, [pc, #472]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a75      	ldr	r2, [pc, #468]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e01d      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x98>
 80033ca:	4b70      	ldr	r3, [pc, #448]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a6f      	ldr	r2, [pc, #444]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b6d      	ldr	r3, [pc, #436]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6c      	ldr	r2, [pc, #432]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033e4:	4b69      	ldr	r3, [pc, #420]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a68      	ldr	r2, [pc, #416]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b66      	ldr	r3, [pc, #408]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a65      	ldr	r2, [pc, #404]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd fe8e 	bl	8001124 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fd fe8a 	bl	8001124 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e207      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	4b5b      	ldr	r3, [pc, #364]	; (800358c <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0xc0>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd fe7a 	bl	8001124 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7fd fe76 	bl	8001124 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1f3      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	4b51      	ldr	r3, [pc, #324]	; (800358c <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0xe8>
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d063      	beq.n	800352a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003462:	4b4a      	ldr	r3, [pc, #296]	; (800358c <HAL_RCC_OscConfig+0x240>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_OscConfig+0x240>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003476:	2b08      	cmp	r3, #8
 8003478:	d11c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347a:	4b44      	ldr	r3, [pc, #272]	; (800358c <HAL_RCC_OscConfig+0x240>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d116      	bne.n	80034b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x152>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e1c7      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4937      	ldr	r1, [pc, #220]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	e03a      	b.n	800352a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034bc:	4b34      	ldr	r3, [pc, #208]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fd fe2f 	bl	8001124 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fd fe2b 	bl	8001124 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e1a8      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b28      	ldr	r3, [pc, #160]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4925      	ldr	r1, [pc, #148]	; (800358c <HAL_RCC_OscConfig+0x240>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd fe0e 	bl	8001124 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350c:	f7fd fe0a 	bl	8001124 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e187      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d036      	beq.n	80035a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353e:	4b15      	ldr	r3, [pc, #84]	; (8003594 <HAL_RCC_OscConfig+0x248>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fd fdee 	bl	8001124 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354c:	f7fd fdea 	bl	8001124 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e167      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_OscConfig+0x240>)
 8003560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x200>
 800356a:	e01b      	b.n	80035a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_OscConfig+0x248>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003572:	f7fd fdd7 	bl	8001124 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	e00e      	b.n	8003598 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357a:	f7fd fdd3 	bl	8001124 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d907      	bls.n	8003598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e150      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
 800358c:	40023800 	.word	0x40023800
 8003590:	42470000 	.word	0x42470000
 8003594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	4b88      	ldr	r3, [pc, #544]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 800359a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ea      	bne.n	800357a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8097 	beq.w	80036e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b6:	4b81      	ldr	r3, [pc, #516]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10f      	bne.n	80035e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	4b7d      	ldr	r3, [pc, #500]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a7c      	ldr	r2, [pc, #496]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	4b7a      	ldr	r3, [pc, #488]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035de:	2301      	movs	r3, #1
 80035e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e2:	4b77      	ldr	r3, [pc, #476]	; (80037c0 <HAL_RCC_OscConfig+0x474>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d118      	bne.n	8003620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ee:	4b74      	ldr	r3, [pc, #464]	; (80037c0 <HAL_RCC_OscConfig+0x474>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a73      	ldr	r2, [pc, #460]	; (80037c0 <HAL_RCC_OscConfig+0x474>)
 80035f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fa:	f7fd fd93 	bl	8001124 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003602:	f7fd fd8f 	bl	8001124 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e10c      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <HAL_RCC_OscConfig+0x474>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d106      	bne.n	8003636 <HAL_RCC_OscConfig+0x2ea>
 8003628:	4b64      	ldr	r3, [pc, #400]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	4a63      	ldr	r2, [pc, #396]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6713      	str	r3, [r2, #112]	; 0x70
 8003634:	e01c      	b.n	8003670 <HAL_RCC_OscConfig+0x324>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b05      	cmp	r3, #5
 800363c:	d10c      	bne.n	8003658 <HAL_RCC_OscConfig+0x30c>
 800363e:	4b5f      	ldr	r3, [pc, #380]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a5e      	ldr	r2, [pc, #376]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	6713      	str	r3, [r2, #112]	; 0x70
 800364a:	4b5c      	ldr	r3, [pc, #368]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	4a5b      	ldr	r2, [pc, #364]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6713      	str	r3, [r2, #112]	; 0x70
 8003656:	e00b      	b.n	8003670 <HAL_RCC_OscConfig+0x324>
 8003658:	4b58      	ldr	r3, [pc, #352]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a57      	ldr	r2, [pc, #348]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
 8003664:	4b55      	ldr	r3, [pc, #340]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a54      	ldr	r2, [pc, #336]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 800366a:	f023 0304 	bic.w	r3, r3, #4
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fd fd54 	bl	8001124 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367e:	e00a      	b.n	8003696 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7fd fd50 	bl	8001124 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e0cb      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	4b49      	ldr	r3, [pc, #292]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0ee      	beq.n	8003680 <HAL_RCC_OscConfig+0x334>
 80036a2:	e014      	b.n	80036ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a4:	f7fd fd3e 	bl	8001124 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fd fd3a 	bl	8001124 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0b5      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c2:	4b3e      	ldr	r3, [pc, #248]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ee      	bne.n	80036ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d4:	4b39      	ldr	r3, [pc, #228]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	4a38      	ldr	r2, [pc, #224]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 80036da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a1 	beq.w	800382c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ea:	4b34      	ldr	r3, [pc, #208]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d05c      	beq.n	80037b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d141      	bne.n	8003782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fe:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <HAL_RCC_OscConfig+0x478>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fd fd0e 	bl	8001124 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370c:	f7fd fd0a 	bl	8001124 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e087      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	019b      	lsls	r3, r3, #6
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	3b01      	subs	r3, #1
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	491b      	ldr	r1, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003754:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_RCC_OscConfig+0x478>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fd fce3 	bl	8001124 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd fcdf 	bl	8001124 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e05c      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x416>
 8003780:	e054      	b.n	800382c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <HAL_RCC_OscConfig+0x478>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fd fccc 	bl	8001124 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003790:	f7fd fcc8 	bl	8001124 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e045      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_RCC_OscConfig+0x470>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x444>
 80037ae:	e03d      	b.n	800382c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e038      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40007000 	.word	0x40007000
 80037c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c8:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_RCC_OscConfig+0x4ec>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d028      	beq.n	8003828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d121      	bne.n	8003828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d11a      	bne.n	8003828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003800:	4293      	cmp	r3, r2
 8003802:	d111      	bne.n	8003828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	3b01      	subs	r3, #1
 8003812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d107      	bne.n	8003828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800

0800383c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0cc      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003850:	4b68      	ldr	r3, [pc, #416]	; (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d90c      	bls.n	8003878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b65      	ldr	r3, [pc, #404]	; (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b63      	ldr	r3, [pc, #396]	; (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0b8      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800389a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a8:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b50      	ldr	r3, [pc, #320]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	494d      	ldr	r1, [pc, #308]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d044      	beq.n	800395c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d119      	bne.n	800391a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e07f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fa:	4b3f      	ldr	r3, [pc, #252]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e06f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390a:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e067      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391a:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f023 0203 	bic.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4934      	ldr	r1, [pc, #208]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	4313      	orrs	r3, r2
 800392a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800392c:	f7fd fbfa 	bl	8001124 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	e00a      	b.n	800394a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003934:	f7fd fbf6 	bl	8001124 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e04f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 020c 	and.w	r2, r3, #12
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	429a      	cmp	r2, r3
 800395a:	d1eb      	bne.n	8003934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d20c      	bcs.n	8003984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e032      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4916      	ldr	r1, [pc, #88]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	490e      	ldr	r1, [pc, #56]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039c2:	f000 f821 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	490a      	ldr	r1, [pc, #40]	; (80039fc <HAL_RCC_ClockConfig+0x1c0>)
 80039d4:	5ccb      	ldrb	r3, [r1, r3]
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1c8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd fb5a 	bl	800109c <HAL_InitTick>

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40023c00 	.word	0x40023c00
 80039f8:	40023800 	.word	0x40023800
 80039fc:	08008dd0 	.word	0x08008dd0
 8003a00:	20000000 	.word	0x20000000
 8003a04:	20000004 	.word	0x20000004

08003a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a0c:	b090      	sub	sp, #64	; 0x40
 8003a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
 8003a14:	2300      	movs	r3, #0
 8003a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a18:	2300      	movs	r3, #0
 8003a1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d00d      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x40>
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	f200 80a1 	bhi.w	8003b74 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x34>
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a3a:	e09b      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b53      	ldr	r3, [pc, #332]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003a3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a40:	e09b      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a42:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a46:	e098      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a48:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a52:	4b4d      	ldr	r3, [pc, #308]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d028      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5e:	4b4a      	ldr	r3, [pc, #296]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	099b      	lsrs	r3, r3, #6
 8003a64:	2200      	movs	r2, #0
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	627a      	str	r2, [r7, #36]	; 0x24
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a70:	2100      	movs	r1, #0
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a74:	fb03 f201 	mul.w	r2, r3, r1
 8003a78:	2300      	movs	r3, #0
 8003a7a:	fb00 f303 	mul.w	r3, r0, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	4a43      	ldr	r2, [pc, #268]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a82:	fba0 1202 	umull	r1, r2, r0, r2
 8003a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a88:	460a      	mov	r2, r1
 8003a8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8e:	4413      	add	r3, r2
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a94:	2200      	movs	r2, #0
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	61fa      	str	r2, [r7, #28]
 8003a9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003aa2:	f7fc fb99 	bl	80001d8 <__aeabi_uldivmod>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4613      	mov	r3, r2
 8003aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aae:	e053      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab0:	4b35      	ldr	r3, [pc, #212]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	617a      	str	r2, [r7, #20]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ac2:	f04f 0b00 	mov.w	fp, #0
 8003ac6:	4652      	mov	r2, sl
 8003ac8:	465b      	mov	r3, fp
 8003aca:	f04f 0000 	mov.w	r0, #0
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	0159      	lsls	r1, r3, #5
 8003ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad8:	0150      	lsls	r0, r2, #5
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	ebb2 080a 	subs.w	r8, r2, sl
 8003ae2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003af2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003af6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003afa:	ebb2 0408 	subs.w	r4, r2, r8
 8003afe:	eb63 0509 	sbc.w	r5, r3, r9
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	00eb      	lsls	r3, r5, #3
 8003b0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b10:	00e2      	lsls	r2, r4, #3
 8003b12:	4614      	mov	r4, r2
 8003b14:	461d      	mov	r5, r3
 8003b16:	eb14 030a 	adds.w	r3, r4, sl
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	eb45 030b 	adc.w	r3, r5, fp
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b2e:	4629      	mov	r1, r5
 8003b30:	028b      	lsls	r3, r1, #10
 8003b32:	4621      	mov	r1, r4
 8003b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b38:	4621      	mov	r1, r4
 8003b3a:	028a      	lsls	r2, r1, #10
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	2200      	movs	r2, #0
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	60fa      	str	r2, [r7, #12]
 8003b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b4c:	f7fc fb44 	bl	80001d8 <__aeabi_uldivmod>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4613      	mov	r3, r2
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	3301      	adds	r3, #1
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b72:	e002      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3740      	adds	r7, #64	; 0x40
 8003b80:	46bd      	mov	sp, r7
 8003b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	00f42400 	.word	0x00f42400
 8003b90:	017d7840 	.word	0x017d7840

08003b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000000 	.word	0x20000000

08003bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bb0:	f7ff fff0 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0a9b      	lsrs	r3, r3, #10
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4903      	ldr	r1, [pc, #12]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	08008de0 	.word	0x08008de0

08003bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bd8:	f7ff ffdc 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	0b5b      	lsrs	r3, r3, #13
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4903      	ldr	r1, [pc, #12]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	08008de0 	.word	0x08008de0

08003bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e07b      	b.n	8003d06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d108      	bne.n	8003c28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1e:	d009      	beq.n	8003c34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	61da      	str	r2, [r3, #28]
 8003c26:	e005      	b.n	8003c34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fd f808 	bl	8000c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb8:	ea42 0103 	orr.w	r1, r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	f003 0104 	and.w	r1, r3, #4
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	f003 0210 	and.w	r2, r3, #16
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e041      	b.n	8003da4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fc ffdd 	bl	8000cf4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	f000 f889 	bl	8003e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_OC_ConfigChannel+0x1e>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e048      	b.n	8003e5c <HAL_TIM_OC_ConfigChannel+0xb0>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b0c      	cmp	r3, #12
 8003dd6:	d839      	bhi.n	8003e4c <HAL_TIM_OC_ConfigChannel+0xa0>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e15 	.word	0x08003e15
 8003de4:	08003e4d 	.word	0x08003e4d
 8003de8:	08003e4d 	.word	0x08003e4d
 8003dec:	08003e4d 	.word	0x08003e4d
 8003df0:	08003e23 	.word	0x08003e23
 8003df4:	08003e4d 	.word	0x08003e4d
 8003df8:	08003e4d 	.word	0x08003e4d
 8003dfc:	08003e4d 	.word	0x08003e4d
 8003e00:	08003e31 	.word	0x08003e31
 8003e04:	08003e4d 	.word	0x08003e4d
 8003e08:	08003e4d 	.word	0x08003e4d
 8003e0c:	08003e4d 	.word	0x08003e4d
 8003e10:	08003e3f 	.word	0x08003e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f8a2 	bl	8003f64 <TIM_OC1_SetConfig>
      break;
 8003e20:	e017      	b.n	8003e52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f901 	bl	8004030 <TIM_OC2_SetConfig>
      break;
 8003e2e:	e010      	b.n	8003e52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f966 	bl	8004108 <TIM_OC3_SetConfig>
      break;
 8003e3c:	e009      	b.n	8003e52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 f9c9 	bl	80041dc <TIM_OC4_SetConfig>
      break;
 8003e4a:	e002      	b.n	8003e52 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a34      	ldr	r2, [pc, #208]	; (8003f48 <TIM_Base_SetConfig+0xe4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00f      	beq.n	8003e9c <TIM_Base_SetConfig+0x38>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e82:	d00b      	beq.n	8003e9c <TIM_Base_SetConfig+0x38>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a31      	ldr	r2, [pc, #196]	; (8003f4c <TIM_Base_SetConfig+0xe8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <TIM_Base_SetConfig+0x38>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a30      	ldr	r2, [pc, #192]	; (8003f50 <TIM_Base_SetConfig+0xec>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_Base_SetConfig+0x38>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a2f      	ldr	r2, [pc, #188]	; (8003f54 <TIM_Base_SetConfig+0xf0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a25      	ldr	r2, [pc, #148]	; (8003f48 <TIM_Base_SetConfig+0xe4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01b      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebc:	d017      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a22      	ldr	r2, [pc, #136]	; (8003f4c <TIM_Base_SetConfig+0xe8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a21      	ldr	r2, [pc, #132]	; (8003f50 <TIM_Base_SetConfig+0xec>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00f      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a20      	ldr	r2, [pc, #128]	; (8003f54 <TIM_Base_SetConfig+0xf0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00b      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1f      	ldr	r2, [pc, #124]	; (8003f58 <TIM_Base_SetConfig+0xf4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d007      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1e      	ldr	r2, [pc, #120]	; (8003f5c <TIM_Base_SetConfig+0xf8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <TIM_Base_SetConfig+0xfc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d108      	bne.n	8003f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <TIM_Base_SetConfig+0xe4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d103      	bne.n	8003f34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	615a      	str	r2, [r3, #20]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800

08003f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f023 0302 	bic.w	r3, r3, #2
 8003fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a1c      	ldr	r2, [pc, #112]	; (800402c <TIM_OC1_SetConfig+0xc8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d10c      	bne.n	8003fda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0308 	bic.w	r3, r3, #8
 8003fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f023 0304 	bic.w	r3, r3, #4
 8003fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a13      	ldr	r2, [pc, #76]	; (800402c <TIM_OC1_SetConfig+0xc8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d111      	bne.n	8004006 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40010000 	.word	0x40010000

08004030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0210 	bic.w	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0320 	bic.w	r3, r3, #32
 800407a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <TIM_OC2_SetConfig+0xd4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d10d      	bne.n	80040ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <TIM_OC2_SetConfig+0xd4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d113      	bne.n	80040dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40010000 	.word	0x40010000

08004108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <TIM_OC3_SetConfig+0xd0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10d      	bne.n	8004182 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800416c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <TIM_OC3_SetConfig+0xd0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d113      	bne.n	80041b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	621a      	str	r2, [r3, #32]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40010000 	.word	0x40010000

080041dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	031b      	lsls	r3, r3, #12
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <TIM_OC4_SetConfig+0x9c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d109      	bne.n	8004250 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	019b      	lsls	r3, r3, #6
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000

0800427c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a24      	ldr	r2, [pc, #144]	; (8004338 <TIM_TI1_SetConfig+0xbc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <TIM_TI1_SetConfig+0x56>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d00f      	beq.n	80042d2 <TIM_TI1_SetConfig+0x56>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a21      	ldr	r2, [pc, #132]	; (800433c <TIM_TI1_SetConfig+0xc0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00b      	beq.n	80042d2 <TIM_TI1_SetConfig+0x56>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a20      	ldr	r2, [pc, #128]	; (8004340 <TIM_TI1_SetConfig+0xc4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <TIM_TI1_SetConfig+0x56>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a1f      	ldr	r2, [pc, #124]	; (8004344 <TIM_TI1_SetConfig+0xc8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <TIM_TI1_SetConfig+0x56>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <TIM_TI1_SetConfig+0xcc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <TIM_TI1_SetConfig+0x5a>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <TIM_TI1_SetConfig+0x5c>
 80042d6:	2300      	movs	r3, #0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e003      	b.n	80042f6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	b2db      	uxtb	r3, r3
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f023 030a 	bic.w	r3, r3, #10
 8004310:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f003 030a 	and.w	r3, r3, #10
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40010000 	.word	0x40010000
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800
 8004344:	40000c00 	.word	0x40000c00
 8004348:	40014000 	.word	0x40014000

0800434c <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08a      	sub	sp, #40	; 0x28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e09a      	b.n	8004496 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7fc fcf5 	bl	8000d64 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2202      	movs	r2, #2
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3304      	adds	r3, #4
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f7ff fd69 	bl	8003e64 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2203      	movs	r2, #3
 80043a0:	f7ff ff6c 	bl	800427c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 020c 	bic.w	r2, r2, #12
 80043b2:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6999      	ldr	r1, [r3, #24]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043d4:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043e4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043f4:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0207 	bic.w	r2, r2, #7
 8004404:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0204 	orr.w	r2, r2, #4
 8004414:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800441e:	2370      	movs	r3, #112	; 0x70
 8004420:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f107 020c 	add.w	r2, r7, #12
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fdf6 	bl	8004030 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004452:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004462:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3728      	adds	r7, #40	; 0x28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e050      	b.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d018      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004504:	d013      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a18      	ldr	r2, [pc, #96]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a16      	ldr	r2, [pc, #88]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a15      	ldr	r2, [pc, #84]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10c      	bne.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	4313      	orrs	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010000 	.word	0x40010000
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40014000 	.word	0x40014000

0800457c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004594:	2302      	movs	r3, #2
 8004596:	e03d      	b.n	8004614 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e03f      	b.n	80046b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc fc2e 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2224      	movs	r2, #36	; 0x24
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f829 	bl	80046bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c0:	b0c0      	sub	sp, #256	; 0x100
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	68d9      	ldr	r1, [r3, #12]
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	ea40 0301 	orr.w	r3, r0, r1
 80046e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004714:	f021 010c 	bic.w	r1, r1, #12
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004722:	430b      	orrs	r3, r1
 8004724:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004736:	6999      	ldr	r1, [r3, #24]
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	ea40 0301 	orr.w	r3, r0, r1
 8004742:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b8f      	ldr	r3, [pc, #572]	; (8004988 <UART_SetConfig+0x2cc>)
 800474c:	429a      	cmp	r2, r3
 800474e:	d005      	beq.n	800475c <UART_SetConfig+0xa0>
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4b8d      	ldr	r3, [pc, #564]	; (800498c <UART_SetConfig+0x2d0>)
 8004758:	429a      	cmp	r2, r3
 800475a:	d104      	bne.n	8004766 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800475c:	f7ff fa3a 	bl	8003bd4 <HAL_RCC_GetPCLK2Freq>
 8004760:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004764:	e003      	b.n	800476e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004766:	f7ff fa21 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 800476a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004778:	f040 810c 	bne.w	8004994 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800477c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004780:	2200      	movs	r2, #0
 8004782:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004786:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800478a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800478e:	4622      	mov	r2, r4
 8004790:	462b      	mov	r3, r5
 8004792:	1891      	adds	r1, r2, r2
 8004794:	65b9      	str	r1, [r7, #88]	; 0x58
 8004796:	415b      	adcs	r3, r3
 8004798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800479a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800479e:	4621      	mov	r1, r4
 80047a0:	eb12 0801 	adds.w	r8, r2, r1
 80047a4:	4629      	mov	r1, r5
 80047a6:	eb43 0901 	adc.w	r9, r3, r1
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047be:	4690      	mov	r8, r2
 80047c0:	4699      	mov	r9, r3
 80047c2:	4623      	mov	r3, r4
 80047c4:	eb18 0303 	adds.w	r3, r8, r3
 80047c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047cc:	462b      	mov	r3, r5
 80047ce:	eb49 0303 	adc.w	r3, r9, r3
 80047d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047ea:	460b      	mov	r3, r1
 80047ec:	18db      	adds	r3, r3, r3
 80047ee:	653b      	str	r3, [r7, #80]	; 0x50
 80047f0:	4613      	mov	r3, r2
 80047f2:	eb42 0303 	adc.w	r3, r2, r3
 80047f6:	657b      	str	r3, [r7, #84]	; 0x54
 80047f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004800:	f7fb fcea 	bl	80001d8 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <UART_SetConfig+0x2d4>)
 800480a:	fba3 2302 	umull	r2, r3, r3, r2
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	011c      	lsls	r4, r3, #4
 8004812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004816:	2200      	movs	r2, #0
 8004818:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800481c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004820:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004824:	4642      	mov	r2, r8
 8004826:	464b      	mov	r3, r9
 8004828:	1891      	adds	r1, r2, r2
 800482a:	64b9      	str	r1, [r7, #72]	; 0x48
 800482c:	415b      	adcs	r3, r3
 800482e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004830:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004834:	4641      	mov	r1, r8
 8004836:	eb12 0a01 	adds.w	sl, r2, r1
 800483a:	4649      	mov	r1, r9
 800483c:	eb43 0b01 	adc.w	fp, r3, r1
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800484c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004854:	4692      	mov	sl, r2
 8004856:	469b      	mov	fp, r3
 8004858:	4643      	mov	r3, r8
 800485a:	eb1a 0303 	adds.w	r3, sl, r3
 800485e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004862:	464b      	mov	r3, r9
 8004864:	eb4b 0303 	adc.w	r3, fp, r3
 8004868:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004878:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800487c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004880:	460b      	mov	r3, r1
 8004882:	18db      	adds	r3, r3, r3
 8004884:	643b      	str	r3, [r7, #64]	; 0x40
 8004886:	4613      	mov	r3, r2
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	647b      	str	r3, [r7, #68]	; 0x44
 800488e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004892:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004896:	f7fb fc9f 	bl	80001d8 <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4611      	mov	r1, r2
 80048a0:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <UART_SetConfig+0x2d4>)
 80048a2:	fba3 2301 	umull	r2, r3, r3, r1
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2264      	movs	r2, #100	; 0x64
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	1acb      	subs	r3, r1, r3
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048b6:	4b36      	ldr	r3, [pc, #216]	; (8004990 <UART_SetConfig+0x2d4>)
 80048b8:	fba3 2302 	umull	r2, r3, r3, r2
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048c4:	441c      	add	r4, r3
 80048c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048d8:	4642      	mov	r2, r8
 80048da:	464b      	mov	r3, r9
 80048dc:	1891      	adds	r1, r2, r2
 80048de:	63b9      	str	r1, [r7, #56]	; 0x38
 80048e0:	415b      	adcs	r3, r3
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048e8:	4641      	mov	r1, r8
 80048ea:	1851      	adds	r1, r2, r1
 80048ec:	6339      	str	r1, [r7, #48]	; 0x30
 80048ee:	4649      	mov	r1, r9
 80048f0:	414b      	adcs	r3, r1
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004900:	4659      	mov	r1, fp
 8004902:	00cb      	lsls	r3, r1, #3
 8004904:	4651      	mov	r1, sl
 8004906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490a:	4651      	mov	r1, sl
 800490c:	00ca      	lsls	r2, r1, #3
 800490e:	4610      	mov	r0, r2
 8004910:	4619      	mov	r1, r3
 8004912:	4603      	mov	r3, r0
 8004914:	4642      	mov	r2, r8
 8004916:	189b      	adds	r3, r3, r2
 8004918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800491c:	464b      	mov	r3, r9
 800491e:	460a      	mov	r2, r1
 8004920:	eb42 0303 	adc.w	r3, r2, r3
 8004924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004934:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004938:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800493c:	460b      	mov	r3, r1
 800493e:	18db      	adds	r3, r3, r3
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
 8004942:	4613      	mov	r3, r2
 8004944:	eb42 0303 	adc.w	r3, r2, r3
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800494e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004952:	f7fb fc41 	bl	80001d8 <__aeabi_uldivmod>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <UART_SetConfig+0x2d4>)
 800495c:	fba3 1302 	umull	r1, r3, r3, r2
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	2164      	movs	r1, #100	; 0x64
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	3332      	adds	r3, #50	; 0x32
 800496e:	4a08      	ldr	r2, [pc, #32]	; (8004990 <UART_SetConfig+0x2d4>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	f003 0207 	and.w	r2, r3, #7
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4422      	add	r2, r4
 8004982:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004984:	e106      	b.n	8004b94 <UART_SetConfig+0x4d8>
 8004986:	bf00      	nop
 8004988:	40011000 	.word	0x40011000
 800498c:	40011400 	.word	0x40011400
 8004990:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004998:	2200      	movs	r2, #0
 800499a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800499e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049a6:	4642      	mov	r2, r8
 80049a8:	464b      	mov	r3, r9
 80049aa:	1891      	adds	r1, r2, r2
 80049ac:	6239      	str	r1, [r7, #32]
 80049ae:	415b      	adcs	r3, r3
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
 80049b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049b6:	4641      	mov	r1, r8
 80049b8:	1854      	adds	r4, r2, r1
 80049ba:	4649      	mov	r1, r9
 80049bc:	eb43 0501 	adc.w	r5, r3, r1
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	00eb      	lsls	r3, r5, #3
 80049ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ce:	00e2      	lsls	r2, r4, #3
 80049d0:	4614      	mov	r4, r2
 80049d2:	461d      	mov	r5, r3
 80049d4:	4643      	mov	r3, r8
 80049d6:	18e3      	adds	r3, r4, r3
 80049d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049dc:	464b      	mov	r3, r9
 80049de:	eb45 0303 	adc.w	r3, r5, r3
 80049e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a02:	4629      	mov	r1, r5
 8004a04:	008b      	lsls	r3, r1, #2
 8004a06:	4621      	mov	r1, r4
 8004a08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	008a      	lsls	r2, r1, #2
 8004a10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a14:	f7fb fbe0 	bl	80001d8 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4b60      	ldr	r3, [pc, #384]	; (8004ba0 <UART_SetConfig+0x4e4>)
 8004a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	011c      	lsls	r4, r3, #4
 8004a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	61b9      	str	r1, [r7, #24]
 8004a40:	415b      	adcs	r3, r3
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a48:	4641      	mov	r1, r8
 8004a4a:	1851      	adds	r1, r2, r1
 8004a4c:	6139      	str	r1, [r7, #16]
 8004a4e:	4649      	mov	r1, r9
 8004a50:	414b      	adcs	r3, r1
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a60:	4659      	mov	r1, fp
 8004a62:	00cb      	lsls	r3, r1, #3
 8004a64:	4651      	mov	r1, sl
 8004a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6a:	4651      	mov	r1, sl
 8004a6c:	00ca      	lsls	r2, r1, #3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	4642      	mov	r2, r8
 8004a76:	189b      	adds	r3, r3, r2
 8004a78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	460a      	mov	r2, r1
 8004a80:	eb42 0303 	adc.w	r3, r2, r3
 8004a84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	008b      	lsls	r3, r1, #2
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aaa:	4641      	mov	r1, r8
 8004aac:	008a      	lsls	r2, r1, #2
 8004aae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ab2:	f7fb fb91 	bl	80001d8 <__aeabi_uldivmod>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	4b38      	ldr	r3, [pc, #224]	; (8004ba0 <UART_SetConfig+0x4e4>)
 8004abe:	fba3 2301 	umull	r2, r3, r3, r1
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	2264      	movs	r2, #100	; 0x64
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	1acb      	subs	r3, r1, r3
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	3332      	adds	r3, #50	; 0x32
 8004ad0:	4a33      	ldr	r2, [pc, #204]	; (8004ba0 <UART_SetConfig+0x4e4>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004adc:	441c      	add	r4, r3
 8004ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ae6:	677a      	str	r2, [r7, #116]	; 0x74
 8004ae8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	1891      	adds	r1, r2, r2
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	415b      	adcs	r3, r3
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004afc:	4641      	mov	r1, r8
 8004afe:	1851      	adds	r1, r2, r1
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	4649      	mov	r1, r9
 8004b04:	414b      	adcs	r3, r1
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b14:	4659      	mov	r1, fp
 8004b16:	00cb      	lsls	r3, r1, #3
 8004b18:	4651      	mov	r1, sl
 8004b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1e:	4651      	mov	r1, sl
 8004b20:	00ca      	lsls	r2, r1, #3
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	4642      	mov	r2, r8
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b2e:	464b      	mov	r3, r9
 8004b30:	460a      	mov	r2, r1
 8004b32:	eb42 0303 	adc.w	r3, r2, r3
 8004b36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	663b      	str	r3, [r7, #96]	; 0x60
 8004b42:	667a      	str	r2, [r7, #100]	; 0x64
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b50:	4649      	mov	r1, r9
 8004b52:	008b      	lsls	r3, r1, #2
 8004b54:	4641      	mov	r1, r8
 8004b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	008a      	lsls	r2, r1, #2
 8004b5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b62:	f7fb fb39 	bl	80001d8 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <UART_SetConfig+0x4e4>)
 8004b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	2164      	movs	r1, #100	; 0x64
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	3332      	adds	r3, #50	; 0x32
 8004b7e:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <UART_SetConfig+0x4e4>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	f003 020f 	and.w	r2, r3, #15
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4422      	add	r2, r4
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	bf00      	nop
 8004b96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba0:	51eb851f 	.word	0x51eb851f

08004ba4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	f107 001c 	add.w	r0, r7, #28
 8004bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d122      	bne.n	8004c02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d105      	bne.n	8004bf6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f001 fbee 	bl	80063d8 <USB_CoreReset>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	73fb      	strb	r3, [r7, #15]
 8004c00:	e01a      	b.n	8004c38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f001 fbe2 	bl	80063d8 <USB_CoreReset>
 8004c14:	4603      	mov	r3, r0
 8004c16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38
 8004c2a:	e005      	b.n	8004c38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d10b      	bne.n	8004c56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f043 0206 	orr.w	r2, r3, #6
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f043 0220 	orr.w	r2, r3, #32
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c62:	b004      	add	sp, #16
 8004c64:	4770      	bx	lr
	...

08004c68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d165      	bne.n	8004d48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4a41      	ldr	r2, [pc, #260]	; (8004d84 <USB_SetTurnaroundTime+0x11c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d906      	bls.n	8004c92 <USB_SetTurnaroundTime+0x2a>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4a40      	ldr	r2, [pc, #256]	; (8004d88 <USB_SetTurnaroundTime+0x120>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d202      	bcs.n	8004c92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c8c:	230f      	movs	r3, #15
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	e062      	b.n	8004d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4a3c      	ldr	r2, [pc, #240]	; (8004d88 <USB_SetTurnaroundTime+0x120>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d306      	bcc.n	8004ca8 <USB_SetTurnaroundTime+0x40>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4a3b      	ldr	r2, [pc, #236]	; (8004d8c <USB_SetTurnaroundTime+0x124>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d202      	bcs.n	8004ca8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ca2:	230e      	movs	r3, #14
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	e057      	b.n	8004d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4a38      	ldr	r2, [pc, #224]	; (8004d8c <USB_SetTurnaroundTime+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d306      	bcc.n	8004cbe <USB_SetTurnaroundTime+0x56>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4a37      	ldr	r2, [pc, #220]	; (8004d90 <USB_SetTurnaroundTime+0x128>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d202      	bcs.n	8004cbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004cb8:	230d      	movs	r3, #13
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e04c      	b.n	8004d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4a33      	ldr	r2, [pc, #204]	; (8004d90 <USB_SetTurnaroundTime+0x128>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d306      	bcc.n	8004cd4 <USB_SetTurnaroundTime+0x6c>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4a32      	ldr	r2, [pc, #200]	; (8004d94 <USB_SetTurnaroundTime+0x12c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d802      	bhi.n	8004cd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004cce:	230c      	movs	r3, #12
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	e041      	b.n	8004d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4a2f      	ldr	r2, [pc, #188]	; (8004d94 <USB_SetTurnaroundTime+0x12c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d906      	bls.n	8004cea <USB_SetTurnaroundTime+0x82>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4a2e      	ldr	r2, [pc, #184]	; (8004d98 <USB_SetTurnaroundTime+0x130>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d802      	bhi.n	8004cea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ce4:	230b      	movs	r3, #11
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e036      	b.n	8004d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	4a2a      	ldr	r2, [pc, #168]	; (8004d98 <USB_SetTurnaroundTime+0x130>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d906      	bls.n	8004d00 <USB_SetTurnaroundTime+0x98>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <USB_SetTurnaroundTime+0x134>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d802      	bhi.n	8004d00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004cfa:	230a      	movs	r3, #10
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	e02b      	b.n	8004d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <USB_SetTurnaroundTime+0x134>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d906      	bls.n	8004d16 <USB_SetTurnaroundTime+0xae>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4a25      	ldr	r2, [pc, #148]	; (8004da0 <USB_SetTurnaroundTime+0x138>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d202      	bcs.n	8004d16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d10:	2309      	movs	r3, #9
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e020      	b.n	8004d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4a21      	ldr	r2, [pc, #132]	; (8004da0 <USB_SetTurnaroundTime+0x138>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d306      	bcc.n	8004d2c <USB_SetTurnaroundTime+0xc4>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4a20      	ldr	r2, [pc, #128]	; (8004da4 <USB_SetTurnaroundTime+0x13c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d802      	bhi.n	8004d2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d26:	2308      	movs	r3, #8
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	e015      	b.n	8004d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <USB_SetTurnaroundTime+0x13c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d906      	bls.n	8004d42 <USB_SetTurnaroundTime+0xda>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4a1c      	ldr	r2, [pc, #112]	; (8004da8 <USB_SetTurnaroundTime+0x140>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d202      	bcs.n	8004d42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d3c:	2307      	movs	r3, #7
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e00a      	b.n	8004d58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d42:	2306      	movs	r3, #6
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	e007      	b.n	8004d58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d4e:	2309      	movs	r3, #9
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	e001      	b.n	8004d58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d54:	2309      	movs	r3, #9
 8004d56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	029b      	lsls	r3, r3, #10
 8004d6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	00d8acbf 	.word	0x00d8acbf
 8004d88:	00e4e1c0 	.word	0x00e4e1c0
 8004d8c:	00f42400 	.word	0x00f42400
 8004d90:	01067380 	.word	0x01067380
 8004d94:	011a499f 	.word	0x011a499f
 8004d98:	01312cff 	.word	0x01312cff
 8004d9c:	014ca43f 	.word	0x014ca43f
 8004da0:	016e3600 	.word	0x016e3600
 8004da4:	01a6ab1f 	.word	0x01a6ab1f
 8004da8:	01e84800 	.word	0x01e84800

08004dac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f043 0201 	orr.w	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f023 0201 	bic.w	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d115      	bne.n	8004e3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e1e:	2001      	movs	r0, #1
 8004e20:	f7fc f98c 	bl	800113c <HAL_Delay>
      ms++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3301      	adds	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f001 fa45 	bl	80062ba <USB_GetMode>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d01e      	beq.n	8004e74 <USB_SetCurrentMode+0x84>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b31      	cmp	r3, #49	; 0x31
 8004e3a:	d9f0      	bls.n	8004e1e <USB_SetCurrentMode+0x2e>
 8004e3c:	e01a      	b.n	8004e74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d115      	bne.n	8004e70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e50:	2001      	movs	r0, #1
 8004e52:	f7fc f973 	bl	800113c <HAL_Delay>
      ms++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f001 fa2c 	bl	80062ba <USB_GetMode>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <USB_SetCurrentMode+0x84>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b31      	cmp	r3, #49	; 0x31
 8004e6c:	d9f0      	bls.n	8004e50 <USB_SetCurrentMode+0x60>
 8004e6e:	e001      	b.n	8004e74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e005      	b.n	8004e80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b32      	cmp	r3, #50	; 0x32
 8004e78:	d101      	bne.n	8004e7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e88:	b084      	sub	sp, #16
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b086      	sub	sp, #24
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	e009      	b.n	8004ebc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	3340      	adds	r3, #64	; 0x40
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b0e      	cmp	r3, #14
 8004ec0:	d9f2      	bls.n	8004ea8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d11c      	bne.n	8004f02 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed6:	f043 0302 	orr.w	r3, r3, #2
 8004eda:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
 8004f00:	e00b      	b.n	8004f1a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f20:	461a      	mov	r2, r3
 8004f22:	2300      	movs	r3, #0
 8004f24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f34:	461a      	mov	r2, r3
 8004f36:	680b      	ldr	r3, [r1, #0]
 8004f38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10c      	bne.n	8004f5a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d104      	bne.n	8004f50 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f46:	2100      	movs	r1, #0
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f965 	bl	8005218 <USB_SetDevSpeed>
 8004f4e:	e008      	b.n	8004f62 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f50:	2101      	movs	r1, #1
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f960 	bl	8005218 <USB_SetDevSpeed>
 8004f58:	e003      	b.n	8004f62 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f5a:	2103      	movs	r1, #3
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f95b 	bl	8005218 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f62:	2110      	movs	r1, #16
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f8f3 	bl	8005150 <USB_FlushTxFifo>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f91f 	bl	80051b8 <USB_FlushRxFifo>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f96:	461a      	mov	r2, r3
 8004f98:	2300      	movs	r3, #0
 8004f9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	e043      	b.n	8005036 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc4:	d118      	bne.n	8004ff8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	e013      	b.n	800500a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e008      	b.n	800500a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005004:	461a      	mov	r2, r3
 8005006:	2300      	movs	r3, #0
 8005008:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005016:	461a      	mov	r2, r3
 8005018:	2300      	movs	r3, #0
 800501a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	461a      	mov	r2, r3
 800502a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800502e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	3301      	adds	r3, #1
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	429a      	cmp	r2, r3
 800503c:	d3b7      	bcc.n	8004fae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	e043      	b.n	80050cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800505a:	d118      	bne.n	800508e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506e:	461a      	mov	r2, r3
 8005070:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e013      	b.n	80050a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	461a      	mov	r2, r3
 8005086:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e008      	b.n	80050a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509a:	461a      	mov	r2, r3
 800509c:	2300      	movs	r3, #0
 800509e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	461a      	mov	r2, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	461a      	mov	r2, r3
 80050c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	3301      	adds	r3, #1
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d3b7      	bcc.n	8005044 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d105      	bne.n	8005108 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f043 0210 	orr.w	r2, r3, #16
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699a      	ldr	r2, [r3, #24]
 800510c:	4b0f      	ldr	r3, [pc, #60]	; (800514c <USB_DevInit+0x2c4>)
 800510e:	4313      	orrs	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f043 0208 	orr.w	r2, r3, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d107      	bne.n	800513c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005134:	f043 0304 	orr.w	r3, r3, #4
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005148:	b004      	add	sp, #16
 800514a:	4770      	bx	lr
 800514c:	803c3800 	.word	0x803c3800

08005150 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3301      	adds	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <USB_FlushTxFifo+0x64>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d901      	bls.n	8005170 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e01b      	b.n	80051a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	daf2      	bge.n	800515e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	019b      	lsls	r3, r3, #6
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <USB_FlushTxFifo+0x64>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e006      	b.n	80051a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d0f0      	beq.n	8005188 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	00030d40 	.word	0x00030d40

080051b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a11      	ldr	r2, [pc, #68]	; (8005214 <USB_FlushRxFifo+0x5c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e018      	b.n	8005208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	daf2      	bge.n	80051c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2210      	movs	r2, #16
 80051e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a08      	ldr	r2, [pc, #32]	; (8005214 <USB_FlushRxFifo+0x5c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e006      	b.n	8005208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b10      	cmp	r3, #16
 8005204:	d0f0      	beq.n	80051e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	00030d40 	.word	0x00030d40

08005218 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	68f9      	ldr	r1, [r7, #12]
 8005234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005238:	4313      	orrs	r3, r2
 800523a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800524a:	b480      	push	{r7}
 800524c:	b087      	sub	sp, #28
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0306 	and.w	r3, r3, #6
 8005262:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800526a:	2300      	movs	r3, #0
 800526c:	75fb      	strb	r3, [r7, #23]
 800526e:	e00a      	b.n	8005286 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d002      	beq.n	800527c <USB_GetDevSpeed+0x32>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b06      	cmp	r3, #6
 800527a:	d102      	bne.n	8005282 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800527c:	2302      	movs	r3, #2
 800527e:	75fb      	strb	r3, [r7, #23]
 8005280:	e001      	b.n	8005286 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005282:	230f      	movs	r3, #15
 8005284:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005286:	7dfb      	ldrb	r3, [r7, #23]
}
 8005288:	4618      	mov	r0, r3
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d13a      	bne.n	8005326 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	2101      	movs	r1, #1
 80052c2:	fa01 f303 	lsl.w	r3, r1, r3
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	68f9      	ldr	r1, [r7, #12]
 80052ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d155      	bne.n	8005394 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	791b      	ldrb	r3, [r3, #4]
 8005302:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005304:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	059b      	lsls	r3, r3, #22
 800530a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800530c:	4313      	orrs	r3, r2
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e036      	b.n	8005394 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	2101      	movs	r1, #1
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	68f9      	ldr	r1, [r7, #12]
 8005340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005344:	4313      	orrs	r3, r2
 8005346:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11a      	bne.n	8005394 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	791b      	ldrb	r3, [r3, #4]
 8005378:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800537a:	430b      	orrs	r3, r1
 800537c:	4313      	orrs	r3, r2
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005392:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
	...

080053a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d161      	bne.n	8005484 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d6:	d11f      	bne.n	8005418 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	440a      	add	r2, r1
 800540e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005412:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005416:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	2101      	movs	r1, #1
 800542a:	fa01 f303 	lsl.w	r3, r1, r3
 800542e:	b29b      	uxth	r3, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005438:	4013      	ands	r3, r2
 800543a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	2101      	movs	r1, #1
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	b29b      	uxth	r3, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800545c:	4013      	ands	r3, r2
 800545e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	0159      	lsls	r1, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	440b      	add	r3, r1
 8005476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547a:	4619      	mov	r1, r3
 800547c:	4b35      	ldr	r3, [pc, #212]	; (8005554 <USB_DeactivateEndpoint+0x1b0>)
 800547e:	4013      	ands	r3, r2
 8005480:	600b      	str	r3, [r1, #0]
 8005482:	e060      	b.n	8005546 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800549a:	d11f      	bne.n	80054dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	0151      	lsls	r1, r2, #5
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	440a      	add	r2, r1
 80054b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	2101      	movs	r1, #1
 80054ee:	fa01 f303 	lsl.w	r3, r1, r3
 80054f2:	041b      	lsls	r3, r3, #16
 80054f4:	43db      	mvns	r3, r3
 80054f6:	68f9      	ldr	r1, [r7, #12]
 80054f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054fc:	4013      	ands	r3, r2
 80054fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	2101      	movs	r1, #1
 8005512:	fa01 f303 	lsl.w	r3, r1, r3
 8005516:	041b      	lsls	r3, r3, #16
 8005518:	43db      	mvns	r3, r3
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005520:	4013      	ands	r3, r2
 8005522:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	0159      	lsls	r1, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	440b      	add	r3, r1
 800553a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553e:	4619      	mov	r1, r3
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <USB_DeactivateEndpoint+0x1b4>)
 8005542:	4013      	ands	r3, r2
 8005544:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	ec337800 	.word	0xec337800
 8005558:	eff37800 	.word	0xeff37800

0800555c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	; 0x28
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	4613      	mov	r3, r2
 8005568:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b01      	cmp	r3, #1
 800557a:	f040 815c 	bne.w	8005836 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d132      	bne.n	80055ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	0151      	lsls	r1, r2, #5
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	440a      	add	r2, r1
 80055c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	0151      	lsls	r1, r2, #5
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	440a      	add	r2, r1
 80055e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e4:	0cdb      	lsrs	r3, r3, #19
 80055e6:	04db      	lsls	r3, r3, #19
 80055e8:	6113      	str	r3, [r2, #16]
 80055ea:	e074      	b.n	80056d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	440a      	add	r2, r1
 8005602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005606:	0cdb      	lsrs	r3, r3, #19
 8005608:	04db      	lsls	r3, r3, #19
 800560a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005626:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800562a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800562e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6999      	ldr	r1, [r3, #24]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	440b      	add	r3, r1
 8005648:	1e59      	subs	r1, r3, #1
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005652:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005654:	4b9d      	ldr	r3, [pc, #628]	; (80058cc <USB_EPStartXfer+0x370>)
 8005656:	400b      	ands	r3, r1
 8005658:	69b9      	ldr	r1, [r7, #24]
 800565a:	0148      	lsls	r0, r1, #5
 800565c:	69f9      	ldr	r1, [r7, #28]
 800565e:	4401      	add	r1, r0
 8005660:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005664:	4313      	orrs	r3, r2
 8005666:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800567e:	69b9      	ldr	r1, [r7, #24]
 8005680:	0148      	lsls	r0, r1, #5
 8005682:	69f9      	ldr	r1, [r7, #28]
 8005684:	4401      	add	r1, r0
 8005686:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800568a:	4313      	orrs	r3, r2
 800568c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	791b      	ldrb	r3, [r3, #4]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d11f      	bne.n	80056d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80056b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d14b      	bne.n	8005774 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	461a      	mov	r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	791b      	ldrb	r3, [r3, #4]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d128      	bne.n	8005752 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d110      	bne.n	8005732 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	e00f      	b.n	8005752 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	0151      	lsls	r1, r2, #5
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	440a      	add	r2, r1
 8005748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005750:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	440a      	add	r2, r1
 8005768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800576c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	e133      	b.n	80059dc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005792:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	791b      	ldrb	r3, [r3, #4]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d015      	beq.n	80057c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 811b 	beq.w	80059dc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	2101      	movs	r1, #1
 80057b8:	fa01 f303 	lsl.w	r3, r1, r3
 80057bc:	69f9      	ldr	r1, [r7, #28]
 80057be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057c2:	4313      	orrs	r3, r2
 80057c4:	634b      	str	r3, [r1, #52]	; 0x34
 80057c6:	e109      	b.n	80059dc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d110      	bne.n	80057fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	e00f      	b.n	800581a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005818:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6919      	ldr	r1, [r3, #16]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781a      	ldrb	r2, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	b298      	uxth	r0, r3
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	4603      	mov	r3, r0
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fade 	bl	8005df0 <USB_WritePacket>
 8005834:	e0d2      	b.n	80059dc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005850:	0cdb      	lsrs	r3, r3, #19
 8005852:	04db      	lsls	r3, r3, #19
 8005854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005870:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005874:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005878:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d126      	bne.n	80058d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005898:	69b9      	ldr	r1, [r7, #24]
 800589a:	0148      	lsls	r0, r1, #5
 800589c:	69f9      	ldr	r1, [r7, #28]
 800589e:	4401      	add	r1, r0
 80058a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058a4:	4313      	orrs	r3, r2
 80058a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058c6:	6113      	str	r3, [r2, #16]
 80058c8:	e03a      	b.n	8005940 <USB_EPStartXfer+0x3e4>
 80058ca:	bf00      	nop
 80058cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	1e5a      	subs	r2, r3, #1
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	8afa      	ldrh	r2, [r7, #22]
 80058ec:	fb03 f202 	mul.w	r2, r3, r2
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	8afb      	ldrh	r3, [r7, #22]
 8005904:	04d9      	lsls	r1, r3, #19
 8005906:	4b38      	ldr	r3, [pc, #224]	; (80059e8 <USB_EPStartXfer+0x48c>)
 8005908:	400b      	ands	r3, r1
 800590a:	69b9      	ldr	r1, [r7, #24]
 800590c:	0148      	lsls	r0, r1, #5
 800590e:	69f9      	ldr	r1, [r7, #28]
 8005910:	4401      	add	r1, r0
 8005912:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005916:	4313      	orrs	r3, r2
 8005918:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005930:	69b9      	ldr	r1, [r7, #24]
 8005932:	0148      	lsls	r0, r1, #5
 8005934:	69f9      	ldr	r1, [r7, #28]
 8005936:	4401      	add	r1, r0
 8005938:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800593c:	4313      	orrs	r3, r2
 800593e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10d      	bne.n	8005962 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6919      	ldr	r1, [r3, #16]
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	460a      	mov	r2, r1
 8005960:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	791b      	ldrb	r3, [r3, #4]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d128      	bne.n	80059bc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005976:	2b00      	cmp	r3, #0
 8005978:	d110      	bne.n	800599c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	0151      	lsls	r1, r2, #5
 800598c:	69fa      	ldr	r2, [r7, #28]
 800598e:	440a      	add	r2, r1
 8005990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005994:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	e00f      	b.n	80059bc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	1ff80000 	.word	0x1ff80000

080059ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	f040 80ce 	bne.w	8005baa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d132      	bne.n	8005a7c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a74:	0cdb      	lsrs	r3, r3, #19
 8005a76:	04db      	lsls	r3, r3, #19
 8005a78:	6113      	str	r3, [r2, #16]
 8005a7a:	e04e      	b.n	8005b1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a96:	0cdb      	lsrs	r3, r3, #19
 8005a98:	04db      	lsls	r3, r3, #19
 8005a9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005aba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005abe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d903      	bls.n	8005ad4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005af2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b0a:	6939      	ldr	r1, [r7, #16]
 8005b0c:	0148      	lsls	r0, r1, #5
 8005b0e:	6979      	ldr	r1, [r7, #20]
 8005b10:	4401      	add	r1, r0
 8005b12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b16:	4313      	orrs	r3, r2
 8005b18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d11e      	bne.n	8005b5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	461a      	mov	r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	e097      	b.n	8005c8e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8083 	beq.w	8005c8e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	2101      	movs	r1, #1
 8005b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	634b      	str	r3, [r1, #52]	; 0x34
 8005ba8:	e071      	b.n	8005c8e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc4:	0cdb      	lsrs	r3, r3, #19
 8005bc6:	04db      	lsls	r3, r3, #19
 8005bc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005be8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c3c:	6939      	ldr	r1, [r7, #16]
 8005c3e:	0148      	lsls	r0, r1, #5
 8005c40:	6979      	ldr	r1, [r7, #20]
 8005c42:	4401      	add	r1, r0
 8005c44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d10d      	bne.n	8005c6e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	6919      	ldr	r1, [r3, #16]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	460a      	mov	r2, r1
 8005c6c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d14a      	bne.n	8005d50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd2:	f040 8086 	bne.w	8005de2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	7812      	ldrb	r2, [r2, #0]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cf8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	7812      	ldrb	r2, [r2, #0]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d902      	bls.n	8005d34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	75fb      	strb	r3, [r7, #23]
          break;
 8005d32:	e056      	b.n	8005de2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d4c:	d0e7      	beq.n	8005d1e <USB_EPStopXfer+0x82>
 8005d4e:	e048      	b.n	8005de2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d68:	d13b      	bne.n	8005de2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	7812      	ldrb	r2, [r2, #0]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005db0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3301      	adds	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f242 7210 	movw	r2, #10000	; 0x2710
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d902      	bls.n	8005dc8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005dc6:	e00c      	b.n	8005de2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de0:	d0e7      	beq.n	8005db2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b089      	sub	sp, #36	; 0x24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	460b      	mov	r3, r1
 8005e00:	71fb      	strb	r3, [r7, #7]
 8005e02:	4613      	mov	r3, r2
 8005e04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d123      	bne.n	8005e5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e16:	88bb      	ldrh	r3, [r7, #4]
 8005e18:	3303      	adds	r3, #3
 8005e1a:	089b      	lsrs	r3, r3, #2
 8005e1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	e018      	b.n	8005e56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	031a      	lsls	r2, r3, #12
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e30:	461a      	mov	r2, r3
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	3301      	adds	r3, #1
 8005e42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	3301      	adds	r3, #1
 8005e48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	3301      	adds	r3, #1
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d3e2      	bcc.n	8005e24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3724      	adds	r7, #36	; 0x24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b08b      	sub	sp, #44	; 0x2c
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	089b      	lsrs	r3, r3, #2
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e92:	2300      	movs	r3, #0
 8005e94:	623b      	str	r3, [r7, #32]
 8005e96:	e014      	b.n	8005ec2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	3301      	adds	r3, #1
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	3301      	adds	r3, #1
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	6a3a      	ldr	r2, [r7, #32]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d3e6      	bcc.n	8005e98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005eca:	8bfb      	ldrh	r3, [r7, #30]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01e      	beq.n	8005f0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	461a      	mov	r2, r3
 8005edc:	f107 0310 	add.w	r3, r7, #16
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	701a      	strb	r2, [r3, #0]
      i++;
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	623b      	str	r3, [r7, #32]
      pDest++;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	3301      	adds	r3, #1
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f02:	8bfb      	ldrh	r3, [r7, #30]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f08:	8bfb      	ldrh	r3, [r7, #30]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1ea      	bne.n	8005ee4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	372c      	adds	r7, #44	; 0x2c
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d12c      	bne.n	8005f92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	db12      	blt.n	8005f70 <USB_EPSetStall+0x54>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00f      	beq.n	8005f70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	e02b      	b.n	8005fea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	db12      	blt.n	8005fca <USB_EPSetStall+0xae>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00f      	beq.n	8005fca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	0151      	lsls	r1, r2, #5
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	440a      	add	r2, r1
 8005fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fe8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d128      	bne.n	8006066 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	440a      	add	r2, r1
 800602a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006032:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	791b      	ldrb	r3, [r3, #4]
 8006038:	2b03      	cmp	r3, #3
 800603a:	d003      	beq.n	8006044 <USB_EPClearStall+0x4c>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	791b      	ldrb	r3, [r3, #4]
 8006040:	2b02      	cmp	r3, #2
 8006042:	d138      	bne.n	80060b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	0151      	lsls	r1, r2, #5
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	440a      	add	r2, r1
 800605a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006062:	6013      	str	r3, [r2, #0]
 8006064:	e027      	b.n	80060b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	0151      	lsls	r1, r2, #5
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	440a      	add	r2, r1
 800607c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006080:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006084:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	791b      	ldrb	r3, [r3, #4]
 800608a:	2b03      	cmp	r3, #3
 800608c:	d003      	beq.n	8006096 <USB_EPClearStall+0x9e>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	791b      	ldrb	r3, [r3, #4]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d10f      	bne.n	80060b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80060f8:	68f9      	ldr	r1, [r7, #12]
 80060fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060fe:	4313      	orrs	r3, r2
 8006100:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800613e:	f023 0302 	bic.w	r3, r3, #2
 8006142:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800616c:	f023 0303 	bic.w	r3, r3, #3
 8006170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006180:	f043 0302 	orr.w	r3, r3, #2
 8006184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4013      	ands	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061ac:	68fb      	ldr	r3, [r7, #12]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	4013      	ands	r3, r2
 80061dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	0c1b      	lsrs	r3, r3, #16
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b085      	sub	sp, #20
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	4013      	ands	r3, r2
 8006210:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	b29b      	uxth	r3, r3
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	460b      	mov	r3, r1
 800622c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006232:	78fb      	ldrb	r3, [r7, #3]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	4013      	ands	r3, r2
 800624e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006250:	68bb      	ldr	r3, [r7, #8]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800625e:	b480      	push	{r7}
 8006260:	b087      	sub	sp, #28
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	fa22 f303 	lsr.w	r3, r2, r3
 800628e:	01db      	lsls	r3, r3, #7
 8006290:	b2db      	uxtb	r3, r3
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4013      	ands	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062ac:	68bb      	ldr	r3, [r7, #8]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f003 0301 	and.w	r3, r3, #1
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062f4:	f023 0307 	bic.w	r3, r3, #7
 80062f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800630c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	460b      	mov	r3, r1
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	333c      	adds	r3, #60	; 0x3c
 8006332:	3304      	adds	r3, #4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4a26      	ldr	r2, [pc, #152]	; (80063d4 <USB_EP0_OutStart+0xb8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d90a      	bls.n	8006356 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800634c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006350:	d101      	bne.n	8006356 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	e037      	b.n	80063c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635c:	461a      	mov	r2, r3
 800635e:	2300      	movs	r3, #0
 8006360:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006374:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006384:	f043 0318 	orr.w	r3, r3, #24
 8006388:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006398:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800639c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800639e:	7afb      	ldrb	r3, [r7, #11]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d10f      	bne.n	80063c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063aa:	461a      	mov	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80063c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	4f54300a 	.word	0x4f54300a

080063d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3301      	adds	r3, #1
 80063e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4a13      	ldr	r2, [pc, #76]	; (800643c <USB_CoreReset+0x64>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d901      	bls.n	80063f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e01b      	b.n	800642e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	daf2      	bge.n	80063e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f043 0201 	orr.w	r2, r3, #1
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a09      	ldr	r2, [pc, #36]	; (800643c <USB_CoreReset+0x64>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d901      	bls.n	8006420 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e006      	b.n	800642e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b01      	cmp	r3, #1
 800642a:	d0f0      	beq.n	800640e <USB_CoreReset+0x36>

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	00030d40 	.word	0x00030d40

08006440 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800644c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006450:	f002 fc1e 	bl	8008c90 <USBD_static_malloc>
 8006454:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d109      	bne.n	8006470 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	32b0      	adds	r2, #176	; 0xb0
 8006466:	2100      	movs	r1, #0
 8006468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800646c:	2302      	movs	r3, #2
 800646e:	e0d4      	b.n	800661a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006470:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006474:	2100      	movs	r1, #0
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f002 fc4e 	bl	8008d18 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	32b0      	adds	r2, #176	; 0xb0
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	32b0      	adds	r2, #176	; 0xb0
 8006496:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	7c1b      	ldrb	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d138      	bne.n	800651a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064a8:	4b5e      	ldr	r3, [pc, #376]	; (8006624 <USBD_CDC_Init+0x1e4>)
 80064aa:	7819      	ldrb	r1, [r3, #0]
 80064ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064b0:	2202      	movs	r2, #2
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f002 fac9 	bl	8008a4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064b8:	4b5a      	ldr	r3, [pc, #360]	; (8006624 <USBD_CDC_Init+0x1e4>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	f003 020f 	and.w	r2, r3, #15
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	440b      	add	r3, r1
 80064cc:	3324      	adds	r3, #36	; 0x24
 80064ce:	2201      	movs	r2, #1
 80064d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80064d2:	4b55      	ldr	r3, [pc, #340]	; (8006628 <USBD_CDC_Init+0x1e8>)
 80064d4:	7819      	ldrb	r1, [r3, #0]
 80064d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064da:	2202      	movs	r2, #2
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f002 fab4 	bl	8008a4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064e2:	4b51      	ldr	r3, [pc, #324]	; (8006628 <USBD_CDC_Init+0x1e8>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f003 020f 	and.w	r2, r3, #15
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	440b      	add	r3, r1
 80064f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064fa:	2201      	movs	r2, #1
 80064fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80064fe:	4b4b      	ldr	r3, [pc, #300]	; (800662c <USBD_CDC_Init+0x1ec>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	f003 020f 	and.w	r2, r3, #15
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	3326      	adds	r3, #38	; 0x26
 8006514:	2210      	movs	r2, #16
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e035      	b.n	8006586 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800651a:	4b42      	ldr	r3, [pc, #264]	; (8006624 <USBD_CDC_Init+0x1e4>)
 800651c:	7819      	ldrb	r1, [r3, #0]
 800651e:	2340      	movs	r3, #64	; 0x40
 8006520:	2202      	movs	r2, #2
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f002 fa91 	bl	8008a4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006528:	4b3e      	ldr	r3, [pc, #248]	; (8006624 <USBD_CDC_Init+0x1e4>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	3324      	adds	r3, #36	; 0x24
 800653e:	2201      	movs	r2, #1
 8006540:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006542:	4b39      	ldr	r3, [pc, #228]	; (8006628 <USBD_CDC_Init+0x1e8>)
 8006544:	7819      	ldrb	r1, [r3, #0]
 8006546:	2340      	movs	r3, #64	; 0x40
 8006548:	2202      	movs	r2, #2
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f002 fa7d 	bl	8008a4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006550:	4b35      	ldr	r3, [pc, #212]	; (8006628 <USBD_CDC_Init+0x1e8>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	f003 020f 	and.w	r2, r3, #15
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006568:	2201      	movs	r2, #1
 800656a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800656c:	4b2f      	ldr	r3, [pc, #188]	; (800662c <USBD_CDC_Init+0x1ec>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	f003 020f 	and.w	r2, r3, #15
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	3326      	adds	r3, #38	; 0x26
 8006582:	2210      	movs	r2, #16
 8006584:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006586:	4b29      	ldr	r3, [pc, #164]	; (800662c <USBD_CDC_Init+0x1ec>)
 8006588:	7819      	ldrb	r1, [r3, #0]
 800658a:	2308      	movs	r3, #8
 800658c:	2203      	movs	r2, #3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f002 fa5b 	bl	8008a4a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006594:	4b25      	ldr	r3, [pc, #148]	; (800662c <USBD_CDC_Init+0x1ec>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	f003 020f 	and.w	r2, r3, #15
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	3324      	adds	r3, #36	; 0x24
 80065aa:	2201      	movs	r2, #1
 80065ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	33b0      	adds	r3, #176	; 0xb0
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80065e4:	2302      	movs	r3, #2
 80065e6:	e018      	b.n	800661a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	7c1b      	ldrb	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065f0:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <USBD_CDC_Init+0x1e8>)
 80065f2:	7819      	ldrb	r1, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f002 fb12 	bl	8008c28 <USBD_LL_PrepareReceive>
 8006604:	e008      	b.n	8006618 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <USBD_CDC_Init+0x1e8>)
 8006608:	7819      	ldrb	r1, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006610:	2340      	movs	r3, #64	; 0x40
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f002 fb08 	bl	8008c28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000093 	.word	0x20000093
 8006628:	20000094 	.word	0x20000094
 800662c:	20000095 	.word	0x20000095

08006630 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800663c:	4b3a      	ldr	r3, [pc, #232]	; (8006728 <USBD_CDC_DeInit+0xf8>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f002 fa27 	bl	8008a96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006648:	4b37      	ldr	r3, [pc, #220]	; (8006728 <USBD_CDC_DeInit+0xf8>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f003 020f 	and.w	r2, r3, #15
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	3324      	adds	r3, #36	; 0x24
 800665e:	2200      	movs	r2, #0
 8006660:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006662:	4b32      	ldr	r3, [pc, #200]	; (800672c <USBD_CDC_DeInit+0xfc>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f002 fa14 	bl	8008a96 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800666e:	4b2f      	ldr	r3, [pc, #188]	; (800672c <USBD_CDC_DeInit+0xfc>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	f003 020f 	and.w	r2, r3, #15
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006686:	2200      	movs	r2, #0
 8006688:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800668a:	4b29      	ldr	r3, [pc, #164]	; (8006730 <USBD_CDC_DeInit+0x100>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f002 fa00 	bl	8008a96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006696:	4b26      	ldr	r3, [pc, #152]	; (8006730 <USBD_CDC_DeInit+0x100>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	f003 020f 	and.w	r2, r3, #15
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	4613      	mov	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	3324      	adds	r3, #36	; 0x24
 80066ac:	2200      	movs	r2, #0
 80066ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80066b0:	4b1f      	ldr	r3, [pc, #124]	; (8006730 <USBD_CDC_DeInit+0x100>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f003 020f 	and.w	r2, r3, #15
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	3326      	adds	r3, #38	; 0x26
 80066c6:	2200      	movs	r2, #0
 80066c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	32b0      	adds	r2, #176	; 0xb0
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01f      	beq.n	800671c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	33b0      	adds	r3, #176	; 0xb0
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	32b0      	adds	r2, #176	; 0xb0
 80066fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fe:	4618      	mov	r0, r3
 8006700:	f002 fad4 	bl	8008cac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	32b0      	adds	r2, #176	; 0xb0
 800670e:	2100      	movs	r1, #0
 8006710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000093 	.word	0x20000093
 800672c:	20000094 	.word	0x20000094
 8006730:	20000095 	.word	0x20000095

08006734 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	32b0      	adds	r2, #176	; 0xb0
 8006748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006760:	2303      	movs	r3, #3
 8006762:	e0bf      	b.n	80068e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800676c:	2b00      	cmp	r3, #0
 800676e:	d050      	beq.n	8006812 <USBD_CDC_Setup+0xde>
 8006770:	2b20      	cmp	r3, #32
 8006772:	f040 80af 	bne.w	80068d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	88db      	ldrh	r3, [r3, #6]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d03a      	beq.n	80067f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	b25b      	sxtb	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	da1b      	bge.n	80067c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	33b0      	adds	r3, #176	; 0xb0
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800679e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	88d2      	ldrh	r2, [r2, #6]
 80067a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	88db      	ldrh	r3, [r3, #6]
 80067aa:	2b07      	cmp	r3, #7
 80067ac:	bf28      	it	cs
 80067ae:	2307      	movcs	r3, #7
 80067b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	89fa      	ldrh	r2, [r7, #14]
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 fd43 	bl	8008244 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80067be:	e090      	b.n	80068e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	785a      	ldrb	r2, [r3, #1]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	88db      	ldrh	r3, [r3, #6]
 80067ce:	2b3f      	cmp	r3, #63	; 0x3f
 80067d0:	d803      	bhi.n	80067da <USBD_CDC_Setup+0xa6>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	88db      	ldrh	r3, [r3, #6]
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	e000      	b.n	80067dc <USBD_CDC_Setup+0xa8>
 80067da:	2240      	movs	r2, #64	; 0x40
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80067e2:	6939      	ldr	r1, [r7, #16]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80067ea:	461a      	mov	r2, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fd55 	bl	800829c <USBD_CtlPrepareRx>
      break;
 80067f2:	e076      	b.n	80068e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	33b0      	adds	r3, #176	; 0xb0
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	7850      	ldrb	r0, [r2, #1]
 800680a:	2200      	movs	r2, #0
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	4798      	blx	r3
      break;
 8006810:	e067      	b.n	80068e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	785b      	ldrb	r3, [r3, #1]
 8006816:	2b0b      	cmp	r3, #11
 8006818:	d851      	bhi.n	80068be <USBD_CDC_Setup+0x18a>
 800681a:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <USBD_CDC_Setup+0xec>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006851 	.word	0x08006851
 8006824:	080068cd 	.word	0x080068cd
 8006828:	080068bf 	.word	0x080068bf
 800682c:	080068bf 	.word	0x080068bf
 8006830:	080068bf 	.word	0x080068bf
 8006834:	080068bf 	.word	0x080068bf
 8006838:	080068bf 	.word	0x080068bf
 800683c:	080068bf 	.word	0x080068bf
 8006840:	080068bf 	.word	0x080068bf
 8006844:	080068bf 	.word	0x080068bf
 8006848:	0800687b 	.word	0x0800687b
 800684c:	080068a5 	.word	0x080068a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b03      	cmp	r3, #3
 800685a:	d107      	bne.n	800686c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800685c:	f107 030a 	add.w	r3, r7, #10
 8006860:	2202      	movs	r2, #2
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 fced 	bl	8008244 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800686a:	e032      	b.n	80068d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 fc77 	bl	8008162 <USBD_CtlError>
            ret = USBD_FAIL;
 8006874:	2303      	movs	r3, #3
 8006876:	75fb      	strb	r3, [r7, #23]
          break;
 8006878:	e02b      	b.n	80068d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b03      	cmp	r3, #3
 8006884:	d107      	bne.n	8006896 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006886:	f107 030d 	add.w	r3, r7, #13
 800688a:	2201      	movs	r2, #1
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fcd8 	bl	8008244 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006894:	e01d      	b.n	80068d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fc62 	bl	8008162 <USBD_CtlError>
            ret = USBD_FAIL;
 800689e:	2303      	movs	r3, #3
 80068a0:	75fb      	strb	r3, [r7, #23]
          break;
 80068a2:	e016      	b.n	80068d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d00f      	beq.n	80068d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fc55 	bl	8008162 <USBD_CtlError>
            ret = USBD_FAIL;
 80068b8:	2303      	movs	r3, #3
 80068ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80068bc:	e008      	b.n	80068d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fc4e 	bl	8008162 <USBD_CtlError>
          ret = USBD_FAIL;
 80068c6:	2303      	movs	r3, #3
 80068c8:	75fb      	strb	r3, [r7, #23]
          break;
 80068ca:	e002      	b.n	80068d2 <USBD_CDC_Setup+0x19e>
          break;
 80068cc:	bf00      	nop
 80068ce:	e008      	b.n	80068e2 <USBD_CDC_Setup+0x1ae>
          break;
 80068d0:	bf00      	nop
      }
      break;
 80068d2:	e006      	b.n	80068e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fc43 	bl	8008162 <USBD_CtlError>
      ret = USBD_FAIL;
 80068dc:	2303      	movs	r3, #3
 80068de:	75fb      	strb	r3, [r7, #23]
      break;
 80068e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80068fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	32b0      	adds	r2, #176	; 0xb0
 800690a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006912:	2303      	movs	r3, #3
 8006914:	e065      	b.n	80069e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	32b0      	adds	r2, #176	; 0xb0
 8006920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006924:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006926:	78fb      	ldrb	r3, [r7, #3]
 8006928:	f003 020f 	and.w	r2, r3, #15
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	440b      	add	r3, r1
 8006938:	3318      	adds	r3, #24
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d02f      	beq.n	80069a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	f003 020f 	and.w	r2, r3, #15
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	3318      	adds	r3, #24
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	f003 010f 	and.w	r1, r3, #15
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	460b      	mov	r3, r1
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	440b      	add	r3, r1
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4403      	add	r3, r0
 8006968:	3348      	adds	r3, #72	; 0x48
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006976:	2b00      	cmp	r3, #0
 8006978:	d112      	bne.n	80069a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	f003 020f 	and.w	r2, r3, #15
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	3318      	adds	r3, #24
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006992:	78f9      	ldrb	r1, [r7, #3]
 8006994:	2300      	movs	r3, #0
 8006996:	2200      	movs	r2, #0
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f002 f924 	bl	8008be6 <USBD_LL_Transmit>
 800699e:	e01f      	b.n	80069e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	33b0      	adds	r3, #176	; 0xb0
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d010      	beq.n	80069e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	33b0      	adds	r3, #176	; 0xb0
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	32b0      	adds	r2, #176	; 0xb0
 8006a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	32b0      	adds	r2, #176	; 0xb0
 8006a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e01a      	b.n	8006a52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f002 f922 	bl	8008c6a <USBD_LL_GetRxDataSize>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	33b0      	adds	r3, #176	; 0xb0
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	32b0      	adds	r2, #176	; 0xb0
 8006a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e025      	b.n	8006ac8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	33b0      	adds	r3, #176	; 0xb0
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01a      	beq.n	8006ac6 <USBD_CDC_EP0_RxReady+0x6c>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a96:	2bff      	cmp	r3, #255	; 0xff
 8006a98:	d015      	beq.n	8006ac6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	33b0      	adds	r3, #176	; 0xb0
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006ab2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006aba:	b292      	uxth	r2, r2
 8006abc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	22ff      	movs	r2, #255	; 0xff
 8006ac2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ad8:	2182      	movs	r1, #130	; 0x82
 8006ada:	4818      	ldr	r0, [pc, #96]	; (8006b3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006adc:	f000 fd09 	bl	80074f2 <USBD_GetEpDesc>
 8006ae0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	4815      	ldr	r0, [pc, #84]	; (8006b3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ae6:	f000 fd04 	bl	80074f2 <USBD_GetEpDesc>
 8006aea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006aec:	2181      	movs	r1, #129	; 0x81
 8006aee:	4813      	ldr	r0, [pc, #76]	; (8006b3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006af0:	f000 fcff 	bl	80074f2 <USBD_GetEpDesc>
 8006af4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2210      	movs	r2, #16
 8006b00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d006      	beq.n	8006b16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b10:	711a      	strb	r2, [r3, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d006      	beq.n	8006b2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b24:	711a      	strb	r2, [r3, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2243      	movs	r2, #67	; 0x43
 8006b2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b30:	4b02      	ldr	r3, [pc, #8]	; (8006b3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000050 	.word	0x20000050

08006b40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b48:	2182      	movs	r1, #130	; 0x82
 8006b4a:	4818      	ldr	r0, [pc, #96]	; (8006bac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b4c:	f000 fcd1 	bl	80074f2 <USBD_GetEpDesc>
 8006b50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b52:	2101      	movs	r1, #1
 8006b54:	4815      	ldr	r0, [pc, #84]	; (8006bac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b56:	f000 fccc 	bl	80074f2 <USBD_GetEpDesc>
 8006b5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b5c:	2181      	movs	r1, #129	; 0x81
 8006b5e:	4813      	ldr	r0, [pc, #76]	; (8006bac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b60:	f000 fcc7 	bl	80074f2 <USBD_GetEpDesc>
 8006b64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2210      	movs	r2, #16
 8006b70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	711a      	strb	r2, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f042 0202 	orr.w	r2, r2, #2
 8006b84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d006      	beq.n	8006b9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	711a      	strb	r2, [r3, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f042 0202 	orr.w	r2, r2, #2
 8006b98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2243      	movs	r2, #67	; 0x43
 8006b9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ba0:	4b02      	ldr	r3, [pc, #8]	; (8006bac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000050 	.word	0x20000050

08006bb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bb8:	2182      	movs	r1, #130	; 0x82
 8006bba:	4818      	ldr	r0, [pc, #96]	; (8006c1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bbc:	f000 fc99 	bl	80074f2 <USBD_GetEpDesc>
 8006bc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	4815      	ldr	r0, [pc, #84]	; (8006c1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bc6:	f000 fc94 	bl	80074f2 <USBD_GetEpDesc>
 8006bca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bcc:	2181      	movs	r1, #129	; 0x81
 8006bce:	4813      	ldr	r0, [pc, #76]	; (8006c1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bd0:	f000 fc8f 	bl	80074f2 <USBD_GetEpDesc>
 8006bd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2210      	movs	r2, #16
 8006be0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d006      	beq.n	8006bf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf0:	711a      	strb	r2, [r3, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d006      	beq.n	8006c0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c04:	711a      	strb	r2, [r3, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2243      	movs	r2, #67	; 0x43
 8006c0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c10:	4b02      	ldr	r3, [pc, #8]	; (8006c1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000050 	.word	0x20000050

08006c20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	220a      	movs	r2, #10
 8006c2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c2e:	4b03      	ldr	r3, [pc, #12]	; (8006c3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	2000000c 	.word	0x2000000c

08006c40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e009      	b.n	8006c68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	33b0      	adds	r3, #176	; 0xb0
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	32b0      	adds	r2, #176	; 0xb0
 8006c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e008      	b.n	8006cac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	371c      	adds	r7, #28
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	32b0      	adds	r2, #176	; 0xb0
 8006ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e004      	b.n	8006ce6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	32b0      	adds	r2, #176	; 0xb0
 8006d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	32b0      	adds	r2, #176	; 0xb0
 8006d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e018      	b.n	8006d54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	7c1b      	ldrb	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10a      	bne.n	8006d40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d2a:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <USBD_CDC_ReceivePacket+0x68>)
 8006d2c:	7819      	ldrb	r1, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 ff75 	bl	8008c28 <USBD_LL_PrepareReceive>
 8006d3e:	e008      	b.n	8006d52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <USBD_CDC_ReceivePacket+0x68>)
 8006d42:	7819      	ldrb	r1, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 ff6b 	bl	8008c28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000094 	.word	0x20000094

08006d60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e01f      	b.n	8006db8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	79fa      	ldrb	r2, [r7, #7]
 8006daa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f001 fde5 	bl	800897c <USBD_LL_Init>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e025      	b.n	8006e24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32ae      	adds	r2, #174	; 0xae
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00f      	beq.n	8006e14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32ae      	adds	r2, #174	; 0xae
 8006dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	f107 020e 	add.w	r2, r7, #14
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 fded 	bl	8008a14 <USBD_LL_Start>
 8006e3a:	4603      	mov	r3, r0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d009      	beq.n	8006e88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	78fa      	ldrb	r2, [r7, #3]
 8006e7e:	4611      	mov	r1, r2
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4798      	blx	r3
 8006e84:	4603      	mov	r3, r0
 8006e86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	78fa      	ldrb	r2, [r7, #3]
 8006eac:	4611      	mov	r1, r2
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 f908 	bl	80080ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006eec:	461a      	mov	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d01a      	beq.n	8006f38 <USBD_LL_SetupStage+0x72>
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d822      	bhi.n	8006f4c <USBD_LL_SetupStage+0x86>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <USBD_LL_SetupStage+0x4a>
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d00a      	beq.n	8006f24 <USBD_LL_SetupStage+0x5e>
 8006f0e:	e01d      	b.n	8006f4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fb5f 	bl	80075dc <USBD_StdDevReq>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73fb      	strb	r3, [r7, #15]
      break;
 8006f22:	e020      	b.n	8006f66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fbc7 	bl	80076c0 <USBD_StdItfReq>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
      break;
 8006f36:	e016      	b.n	8006f66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fc29 	bl	8007798 <USBD_StdEPReq>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73fb      	strb	r3, [r7, #15]
      break;
 8006f4a:	e00c      	b.n	8006f66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 fdba 	bl	8008ad4 <USBD_LL_StallEP>
 8006f60:	4603      	mov	r3, r0
 8006f62:	73fb      	strb	r3, [r7, #15]
      break;
 8006f64:	bf00      	nop
  }

  return ret;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006f82:	7afb      	ldrb	r3, [r7, #11]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d16e      	bne.n	8007066 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	f040 8098 	bne.w	80070cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d913      	bls.n	8006fd0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	1ad2      	subs	r2, r2, r3
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	bf28      	it	cs
 8006fc2:	4613      	movcs	r3, r2
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f001 f984 	bl	80082d6 <USBD_CtlContinueRx>
 8006fce:	e07d      	b.n	80070cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fd6:	f003 031f 	and.w	r3, r3, #31
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d014      	beq.n	8007008 <USBD_LL_DataOutStage+0x98>
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d81d      	bhi.n	800701e <USBD_LL_DataOutStage+0xae>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <USBD_LL_DataOutStage+0x7c>
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d003      	beq.n	8006ff2 <USBD_LL_DataOutStage+0x82>
 8006fea:	e018      	b.n	800701e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	75bb      	strb	r3, [r7, #22]
            break;
 8006ff0:	e018      	b.n	8007024 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fa5e 	bl	80074be <USBD_CoreFindIF>
 8007002:	4603      	mov	r3, r0
 8007004:	75bb      	strb	r3, [r7, #22]
            break;
 8007006:	e00d      	b.n	8007024 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800700e:	b2db      	uxtb	r3, r3
 8007010:	4619      	mov	r1, r3
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 fa60 	bl	80074d8 <USBD_CoreFindEP>
 8007018:	4603      	mov	r3, r0
 800701a:	75bb      	strb	r3, [r7, #22]
            break;
 800701c:	e002      	b.n	8007024 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	75bb      	strb	r3, [r7, #22]
            break;
 8007022:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007024:	7dbb      	ldrb	r3, [r7, #22]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d119      	bne.n	800705e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b03      	cmp	r3, #3
 8007034:	d113      	bne.n	800705e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007036:	7dba      	ldrb	r2, [r7, #22]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	32ae      	adds	r2, #174	; 0xae
 800703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007046:	7dba      	ldrb	r2, [r7, #22]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800704e:	7dba      	ldrb	r2, [r7, #22]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	32ae      	adds	r2, #174	; 0xae
 8007054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f001 f94a 	bl	80082f8 <USBD_CtlSendStatus>
 8007064:	e032      	b.n	80070cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007066:	7afb      	ldrb	r3, [r7, #11]
 8007068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706c:	b2db      	uxtb	r3, r3
 800706e:	4619      	mov	r1, r3
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 fa31 	bl	80074d8 <USBD_CoreFindEP>
 8007076:	4603      	mov	r3, r0
 8007078:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800707a:	7dbb      	ldrb	r3, [r7, #22]
 800707c:	2bff      	cmp	r3, #255	; 0xff
 800707e:	d025      	beq.n	80070cc <USBD_LL_DataOutStage+0x15c>
 8007080:	7dbb      	ldrb	r3, [r7, #22]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d122      	bne.n	80070cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b03      	cmp	r3, #3
 8007090:	d117      	bne.n	80070c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007092:	7dba      	ldrb	r2, [r7, #22]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	32ae      	adds	r2, #174	; 0xae
 8007098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00f      	beq.n	80070c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80070a2:	7dba      	ldrb	r2, [r7, #22]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80070aa:	7dba      	ldrb	r2, [r7, #22]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	32ae      	adds	r2, #174	; 0xae
 80070b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	7afa      	ldrb	r2, [r7, #11]
 80070b8:	4611      	mov	r1, r2
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	4798      	blx	r3
 80070be:	4603      	mov	r3, r0
 80070c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	e000      	b.n	80070ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b086      	sub	sp, #24
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	460b      	mov	r3, r1
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80070e4:	7afb      	ldrb	r3, [r7, #11]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d16f      	bne.n	80071ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3314      	adds	r3, #20
 80070ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d15a      	bne.n	80071b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	429a      	cmp	r2, r3
 8007104:	d914      	bls.n	8007130 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	461a      	mov	r2, r3
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f001 f8ac 	bl	800827a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007122:	2300      	movs	r3, #0
 8007124:	2200      	movs	r2, #0
 8007126:	2100      	movs	r1, #0
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f001 fd7d 	bl	8008c28 <USBD_LL_PrepareReceive>
 800712e:	e03f      	b.n	80071b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	429a      	cmp	r2, r3
 800713a:	d11c      	bne.n	8007176 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007144:	429a      	cmp	r2, r3
 8007146:	d316      	bcc.n	8007176 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007152:	429a      	cmp	r2, r3
 8007154:	d20f      	bcs.n	8007176 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007156:	2200      	movs	r2, #0
 8007158:	2100      	movs	r1, #0
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f001 f88d 	bl	800827a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007168:	2300      	movs	r3, #0
 800716a:	2200      	movs	r2, #0
 800716c:	2100      	movs	r1, #0
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f001 fd5a 	bl	8008c28 <USBD_LL_PrepareReceive>
 8007174:	e01c      	b.n	80071b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b03      	cmp	r3, #3
 8007180:	d10f      	bne.n	80071a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d009      	beq.n	80071a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071a2:	2180      	movs	r1, #128	; 0x80
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f001 fc95 	bl	8008ad4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f001 f8b7 	bl	800831e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d03a      	beq.n	8007230 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f7ff fe42 	bl	8006e44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071c8:	e032      	b.n	8007230 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80071ca:	7afb      	ldrb	r3, [r7, #11]
 80071cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	4619      	mov	r1, r3
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 f97f 	bl	80074d8 <USBD_CoreFindEP>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	2bff      	cmp	r3, #255	; 0xff
 80071e2:	d025      	beq.n	8007230 <USBD_LL_DataInStage+0x15a>
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d122      	bne.n	8007230 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d11c      	bne.n	8007230 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80071f6:	7dfa      	ldrb	r2, [r7, #23]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	32ae      	adds	r2, #174	; 0xae
 80071fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d014      	beq.n	8007230 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007206:	7dfa      	ldrb	r2, [r7, #23]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800720e:	7dfa      	ldrb	r2, [r7, #23]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	32ae      	adds	r2, #174	; 0xae
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	7afa      	ldrb	r2, [r7, #11]
 800721c:	4611      	mov	r1, r2
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	4798      	blx	r3
 8007222:	4603      	mov	r3, r0
 8007224:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007226:	7dbb      	ldrb	r3, [r7, #22]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800722c:	7dbb      	ldrb	r3, [r7, #22]
 800722e:	e000      	b.n	8007232 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d014      	beq.n	80072a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00e      	beq.n	80072a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6852      	ldr	r2, [r2, #4]
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	4611      	mov	r1, r2
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	4798      	blx	r3
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800729c:	2303      	movs	r3, #3
 800729e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072a0:	2340      	movs	r3, #64	; 0x40
 80072a2:	2200      	movs	r2, #0
 80072a4:	2100      	movs	r1, #0
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 fbcf 	bl	8008a4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2240      	movs	r2, #64	; 0x40
 80072b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072bc:	2340      	movs	r3, #64	; 0x40
 80072be:	2200      	movs	r2, #0
 80072c0:	2180      	movs	r1, #128	; 0x80
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 fbc1 	bl	8008a4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2240      	movs	r2, #64	; 0x40
 80072d2:	621a      	str	r2, [r3, #32]

  return ret;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730c:	b2da      	uxtb	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2204      	movs	r2, #4
 8007318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b04      	cmp	r3, #4
 800733c:	d106      	bne.n	800734c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007344:	b2da      	uxtb	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b03      	cmp	r3, #3
 800736c:	d110      	bne.n	8007390 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00b      	beq.n	8007390 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d005      	beq.n	8007390 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	460b      	mov	r3, r1
 80073a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	32ae      	adds	r2, #174	; 0xae
 80073b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e01c      	b.n	80073f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d115      	bne.n	80073f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	32ae      	adds	r2, #174	; 0xae
 80073d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	32ae      	adds	r2, #174	; 0xae
 80073e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	4611      	mov	r1, r2
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	32ae      	adds	r2, #174	; 0xae
 8007414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800741c:	2303      	movs	r3, #3
 800741e:	e01c      	b.n	800745a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b03      	cmp	r3, #3
 800742a:	d115      	bne.n	8007458 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	32ae      	adds	r2, #174	; 0xae
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32ae      	adds	r2, #174	; 0xae
 800744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	4611      	mov	r1, r2
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00e      	beq.n	80074b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6852      	ldr	r2, [r2, #4]
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	4611      	mov	r1, r2
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80074b0:	2303      	movs	r3, #3
 80074b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	460b      	mov	r3, r1
 80074c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b086      	sub	sp, #24
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007506:	2300      	movs	r3, #0
 8007508:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	885b      	ldrh	r3, [r3, #2]
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	b29b      	uxth	r3, r3
 8007516:	429a      	cmp	r2, r3
 8007518:	d920      	bls.n	800755c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007522:	e013      	b.n	800754c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007524:	f107 030a 	add.w	r3, r7, #10
 8007528:	4619      	mov	r1, r3
 800752a:	6978      	ldr	r0, [r7, #20]
 800752c:	f000 f81b 	bl	8007566 <USBD_GetNextDesc>
 8007530:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	2b05      	cmp	r3, #5
 8007538:	d108      	bne.n	800754c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	789b      	ldrb	r3, [r3, #2]
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	429a      	cmp	r2, r3
 8007546:	d008      	beq.n	800755a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007548:	2300      	movs	r3, #0
 800754a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	885b      	ldrh	r3, [r3, #2]
 8007550:	b29a      	uxth	r2, r3
 8007552:	897b      	ldrh	r3, [r7, #10]
 8007554:	429a      	cmp	r2, r3
 8007556:	d8e5      	bhi.n	8007524 <USBD_GetEpDesc+0x32>
 8007558:	e000      	b.n	800755c <USBD_GetEpDesc+0x6a>
          break;
 800755a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800755c:	693b      	ldr	r3, [r7, #16]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007566:	b480      	push	{r7}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	881a      	ldrh	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	4413      	add	r3, r2
 8007580:	b29a      	uxth	r2, r3
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4413      	add	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007592:	68fb      	ldr	r3, [r7, #12]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	3301      	adds	r3, #1
 80075b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075be:	8a3b      	ldrh	r3, [r7, #16]
 80075c0:	021b      	lsls	r3, r3, #8
 80075c2:	b21a      	sxth	r2, r3
 80075c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	b21b      	sxth	r3, r3
 80075cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80075ce:	89fb      	ldrh	r3, [r7, #14]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f2:	2b40      	cmp	r3, #64	; 0x40
 80075f4:	d005      	beq.n	8007602 <USBD_StdDevReq+0x26>
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d857      	bhi.n	80076aa <USBD_StdDevReq+0xce>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00f      	beq.n	800761e <USBD_StdDevReq+0x42>
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d153      	bne.n	80076aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	32ae      	adds	r2, #174	; 0xae
 800760c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	4798      	blx	r3
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]
      break;
 800761c:	e04a      	b.n	80076b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	2b09      	cmp	r3, #9
 8007624:	d83b      	bhi.n	800769e <USBD_StdDevReq+0xc2>
 8007626:	a201      	add	r2, pc, #4	; (adr r2, 800762c <USBD_StdDevReq+0x50>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	08007681 	.word	0x08007681
 8007630:	08007695 	.word	0x08007695
 8007634:	0800769f 	.word	0x0800769f
 8007638:	0800768b 	.word	0x0800768b
 800763c:	0800769f 	.word	0x0800769f
 8007640:	0800765f 	.word	0x0800765f
 8007644:	08007655 	.word	0x08007655
 8007648:	0800769f 	.word	0x0800769f
 800764c:	08007677 	.word	0x08007677
 8007650:	08007669 	.word	0x08007669
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa3c 	bl	8007ad4 <USBD_GetDescriptor>
          break;
 800765c:	e024      	b.n	80076a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fba1 	bl	8007da8 <USBD_SetAddress>
          break;
 8007666:	e01f      	b.n	80076a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fbe0 	bl	8007e30 <USBD_SetConfig>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
          break;
 8007674:	e018      	b.n	80076a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fc83 	bl	8007f84 <USBD_GetConfig>
          break;
 800767e:	e013      	b.n	80076a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fcb4 	bl	8007ff0 <USBD_GetStatus>
          break;
 8007688:	e00e      	b.n	80076a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fce3 	bl	8008058 <USBD_SetFeature>
          break;
 8007692:	e009      	b.n	80076a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fd07 	bl	80080aa <USBD_ClrFeature>
          break;
 800769c:	e004      	b.n	80076a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fd5e 	bl	8008162 <USBD_CtlError>
          break;
 80076a6:	bf00      	nop
      }
      break;
 80076a8:	e004      	b.n	80076b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fd58 	bl	8008162 <USBD_CtlError>
      break;
 80076b2:	bf00      	nop
  }

  return ret;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop

080076c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	d005      	beq.n	80076e6 <USBD_StdItfReq+0x26>
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d852      	bhi.n	8007784 <USBD_StdItfReq+0xc4>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <USBD_StdItfReq+0x26>
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d14e      	bne.n	8007784 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	3b01      	subs	r3, #1
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d840      	bhi.n	8007776 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	889b      	ldrh	r3, [r3, #4]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d836      	bhi.n	800776c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	889b      	ldrh	r3, [r3, #4]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fed9 	bl	80074be <USBD_CoreFindIF>
 800770c:	4603      	mov	r3, r0
 800770e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	2bff      	cmp	r3, #255	; 0xff
 8007714:	d01d      	beq.n	8007752 <USBD_StdItfReq+0x92>
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d11a      	bne.n	8007752 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800771c:	7bba      	ldrb	r2, [r7, #14]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	32ae      	adds	r2, #174	; 0xae
 8007722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00f      	beq.n	800774c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800772c:	7bba      	ldrb	r2, [r7, #14]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007734:	7bba      	ldrb	r2, [r7, #14]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	32ae      	adds	r2, #174	; 0xae
 800773a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
 8007746:	4603      	mov	r3, r0
 8007748:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800774a:	e004      	b.n	8007756 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800774c:	2303      	movs	r3, #3
 800774e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007750:	e001      	b.n	8007756 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007752:	2303      	movs	r3, #3
 8007754:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	88db      	ldrh	r3, [r3, #6]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d110      	bne.n	8007780 <USBD_StdItfReq+0xc0>
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10d      	bne.n	8007780 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fdc7 	bl	80082f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800776a:	e009      	b.n	8007780 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fcf7 	bl	8008162 <USBD_CtlError>
          break;
 8007774:	e004      	b.n	8007780 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fcf2 	bl	8008162 <USBD_CtlError>
          break;
 800777e:	e000      	b.n	8007782 <USBD_StdItfReq+0xc2>
          break;
 8007780:	bf00      	nop
      }
      break;
 8007782:	e004      	b.n	800778e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fceb 	bl	8008162 <USBD_CtlError>
      break;
 800778c:	bf00      	nop
  }

  return ret;
 800778e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	889b      	ldrh	r3, [r3, #4]
 80077aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b4:	2b40      	cmp	r3, #64	; 0x40
 80077b6:	d007      	beq.n	80077c8 <USBD_StdEPReq+0x30>
 80077b8:	2b40      	cmp	r3, #64	; 0x40
 80077ba:	f200 817f 	bhi.w	8007abc <USBD_StdEPReq+0x324>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d02a      	beq.n	8007818 <USBD_StdEPReq+0x80>
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	f040 817a 	bne.w	8007abc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7ff fe83 	bl	80074d8 <USBD_CoreFindEP>
 80077d2:	4603      	mov	r3, r0
 80077d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077d6:	7b7b      	ldrb	r3, [r7, #13]
 80077d8:	2bff      	cmp	r3, #255	; 0xff
 80077da:	f000 8174 	beq.w	8007ac6 <USBD_StdEPReq+0x32e>
 80077de:	7b7b      	ldrb	r3, [r7, #13]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f040 8170 	bne.w	8007ac6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80077e6:	7b7a      	ldrb	r2, [r7, #13]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80077ee:	7b7a      	ldrb	r2, [r7, #13]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	32ae      	adds	r2, #174	; 0xae
 80077f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 8163 	beq.w	8007ac6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007800:	7b7a      	ldrb	r2, [r7, #13]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	32ae      	adds	r2, #174	; 0xae
 8007806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007816:	e156      	b.n	8007ac6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	785b      	ldrb	r3, [r3, #1]
 800781c:	2b03      	cmp	r3, #3
 800781e:	d008      	beq.n	8007832 <USBD_StdEPReq+0x9a>
 8007820:	2b03      	cmp	r3, #3
 8007822:	f300 8145 	bgt.w	8007ab0 <USBD_StdEPReq+0x318>
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 809b 	beq.w	8007962 <USBD_StdEPReq+0x1ca>
 800782c:	2b01      	cmp	r3, #1
 800782e:	d03c      	beq.n	80078aa <USBD_StdEPReq+0x112>
 8007830:	e13e      	b.n	8007ab0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d002      	beq.n	8007844 <USBD_StdEPReq+0xac>
 800783e:	2b03      	cmp	r3, #3
 8007840:	d016      	beq.n	8007870 <USBD_StdEPReq+0xd8>
 8007842:	e02c      	b.n	800789e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00d      	beq.n	8007866 <USBD_StdEPReq+0xce>
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b80      	cmp	r3, #128	; 0x80
 800784e:	d00a      	beq.n	8007866 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 f93d 	bl	8008ad4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800785a:	2180      	movs	r1, #128	; 0x80
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 f939 	bl	8008ad4 <USBD_LL_StallEP>
 8007862:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007864:	e020      	b.n	80078a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fc7a 	bl	8008162 <USBD_CtlError>
              break;
 800786e:	e01b      	b.n	80078a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	885b      	ldrh	r3, [r3, #2]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10e      	bne.n	8007896 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00b      	beq.n	8007896 <USBD_StdEPReq+0xfe>
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	2b80      	cmp	r3, #128	; 0x80
 8007882:	d008      	beq.n	8007896 <USBD_StdEPReq+0xfe>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	88db      	ldrh	r3, [r3, #6]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d104      	bne.n	8007896 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 f91f 	bl	8008ad4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fd2e 	bl	80082f8 <USBD_CtlSendStatus>

              break;
 800789c:	e004      	b.n	80078a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc5e 	bl	8008162 <USBD_CtlError>
              break;
 80078a6:	bf00      	nop
          }
          break;
 80078a8:	e107      	b.n	8007aba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d002      	beq.n	80078bc <USBD_StdEPReq+0x124>
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d016      	beq.n	80078e8 <USBD_StdEPReq+0x150>
 80078ba:	e04b      	b.n	8007954 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00d      	beq.n	80078de <USBD_StdEPReq+0x146>
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	2b80      	cmp	r3, #128	; 0x80
 80078c6:	d00a      	beq.n	80078de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 f901 	bl	8008ad4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078d2:	2180      	movs	r1, #128	; 0x80
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 f8fd 	bl	8008ad4 <USBD_LL_StallEP>
 80078da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078dc:	e040      	b.n	8007960 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc3e 	bl	8008162 <USBD_CtlError>
              break;
 80078e6:	e03b      	b.n	8007960 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	885b      	ldrh	r3, [r3, #2]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d136      	bne.n	800795e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 f907 	bl	8008b12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fcf7 	bl	80082f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7ff fde2 	bl	80074d8 <USBD_CoreFindEP>
 8007914:	4603      	mov	r3, r0
 8007916:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007918:	7b7b      	ldrb	r3, [r7, #13]
 800791a:	2bff      	cmp	r3, #255	; 0xff
 800791c:	d01f      	beq.n	800795e <USBD_StdEPReq+0x1c6>
 800791e:	7b7b      	ldrb	r3, [r7, #13]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d11c      	bne.n	800795e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007924:	7b7a      	ldrb	r2, [r7, #13]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800792c:	7b7a      	ldrb	r2, [r7, #13]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	32ae      	adds	r2, #174	; 0xae
 8007932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d010      	beq.n	800795e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800793c:	7b7a      	ldrb	r2, [r7, #13]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	32ae      	adds	r2, #174	; 0xae
 8007942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
 800794e:	4603      	mov	r3, r0
 8007950:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007952:	e004      	b.n	800795e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fc03 	bl	8008162 <USBD_CtlError>
              break;
 800795c:	e000      	b.n	8007960 <USBD_StdEPReq+0x1c8>
              break;
 800795e:	bf00      	nop
          }
          break;
 8007960:	e0ab      	b.n	8007aba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d002      	beq.n	8007974 <USBD_StdEPReq+0x1dc>
 800796e:	2b03      	cmp	r3, #3
 8007970:	d032      	beq.n	80079d8 <USBD_StdEPReq+0x240>
 8007972:	e097      	b.n	8007aa4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <USBD_StdEPReq+0x1f2>
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b80      	cmp	r3, #128	; 0x80
 800797e:	d004      	beq.n	800798a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fbed 	bl	8008162 <USBD_CtlError>
                break;
 8007988:	e091      	b.n	8007aae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800798a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800798e:	2b00      	cmp	r3, #0
 8007990:	da0b      	bge.n	80079aa <USBD_StdEPReq+0x212>
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	3310      	adds	r3, #16
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	4413      	add	r3, r2
 80079a6:	3304      	adds	r3, #4
 80079a8:	e00b      	b.n	80079c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	3304      	adds	r3, #4
 80079c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2202      	movs	r2, #2
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fc37 	bl	8008244 <USBD_CtlSendData>
              break;
 80079d6:	e06a      	b.n	8007aae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	da11      	bge.n	8007a04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	f003 020f 	and.w	r2, r3, #15
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	440b      	add	r3, r1
 80079f2:	3324      	adds	r3, #36	; 0x24
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d117      	bne.n	8007a2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fbb0 	bl	8008162 <USBD_CtlError>
                  break;
 8007a02:	e054      	b.n	8007aae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	f003 020f 	and.w	r2, r3, #15
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fb9d 	bl	8008162 <USBD_CtlError>
                  break;
 8007a28:	e041      	b.n	8007aae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	da0b      	bge.n	8007a4a <USBD_StdEPReq+0x2b2>
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a38:	4613      	mov	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	3310      	adds	r3, #16
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	4413      	add	r3, r2
 8007a46:	3304      	adds	r3, #4
 8007a48:	e00b      	b.n	8007a62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	4413      	add	r3, r2
 8007a60:	3304      	adds	r3, #4
 8007a62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <USBD_StdEPReq+0x2d8>
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b80      	cmp	r3, #128	; 0x80
 8007a6e:	d103      	bne.n	8007a78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	e00e      	b.n	8007a96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 f867 	bl	8008b50 <USBD_LL_IsStallEP>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e002      	b.n	8007a96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fbd1 	bl	8008244 <USBD_CtlSendData>
              break;
 8007aa2:	e004      	b.n	8007aae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fb5b 	bl	8008162 <USBD_CtlError>
              break;
 8007aac:	bf00      	nop
          }
          break;
 8007aae:	e004      	b.n	8007aba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fb55 	bl	8008162 <USBD_CtlError>
          break;
 8007ab8:	bf00      	nop
      }
      break;
 8007aba:	e005      	b.n	8007ac8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fb4f 	bl	8008162 <USBD_CtlError>
      break;
 8007ac4:	e000      	b.n	8007ac8 <USBD_StdEPReq+0x330>
      break;
 8007ac6:	bf00      	nop
  }

  return ret;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	0a1b      	lsrs	r3, r3, #8
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	3b01      	subs	r3, #1
 8007af4:	2b06      	cmp	r3, #6
 8007af6:	f200 8128 	bhi.w	8007d4a <USBD_GetDescriptor+0x276>
 8007afa:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <USBD_GetDescriptor+0x2c>)
 8007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b00:	08007b1d 	.word	0x08007b1d
 8007b04:	08007b35 	.word	0x08007b35
 8007b08:	08007b75 	.word	0x08007b75
 8007b0c:	08007d4b 	.word	0x08007d4b
 8007b10:	08007d4b 	.word	0x08007d4b
 8007b14:	08007ceb 	.word	0x08007ceb
 8007b18:	08007d17 	.word	0x08007d17
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	7c12      	ldrb	r2, [r2, #16]
 8007b28:	f107 0108 	add.w	r1, r7, #8
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
 8007b30:	60f8      	str	r0, [r7, #12]
      break;
 8007b32:	e112      	b.n	8007d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	7c1b      	ldrb	r3, [r3, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10d      	bne.n	8007b58 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b44:	f107 0208 	add.w	r2, r7, #8
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3301      	adds	r3, #1
 8007b52:	2202      	movs	r2, #2
 8007b54:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b56:	e100      	b.n	8007d5a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	f107 0208 	add.w	r2, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	2202      	movs	r2, #2
 8007b70:	701a      	strb	r2, [r3, #0]
      break;
 8007b72:	e0f2      	b.n	8007d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	885b      	ldrh	r3, [r3, #2]
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b05      	cmp	r3, #5
 8007b7c:	f200 80ac 	bhi.w	8007cd8 <USBD_GetDescriptor+0x204>
 8007b80:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <USBD_GetDescriptor+0xb4>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007ba1 	.word	0x08007ba1
 8007b8c:	08007bd5 	.word	0x08007bd5
 8007b90:	08007c09 	.word	0x08007c09
 8007b94:	08007c3d 	.word	0x08007c3d
 8007b98:	08007c71 	.word	0x08007c71
 8007b9c:	08007ca5 	.word	0x08007ca5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00b      	beq.n	8007bc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	7c12      	ldrb	r2, [r2, #16]
 8007bb8:	f107 0108 	add.w	r1, r7, #8
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4798      	blx	r3
 8007bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bc2:	e091      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 facb 	bl	8008162 <USBD_CtlError>
            err++;
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bd2:	e089      	b.n	8007ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	7c12      	ldrb	r2, [r2, #16]
 8007bec:	f107 0108 	add.w	r1, r7, #8
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4798      	blx	r3
 8007bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bf6:	e077      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fab1 	bl	8008162 <USBD_CtlError>
            err++;
 8007c00:	7afb      	ldrb	r3, [r7, #11]
 8007c02:	3301      	adds	r3, #1
 8007c04:	72fb      	strb	r3, [r7, #11]
          break;
 8007c06:	e06f      	b.n	8007ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00b      	beq.n	8007c2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	7c12      	ldrb	r2, [r2, #16]
 8007c20:	f107 0108 	add.w	r1, r7, #8
 8007c24:	4610      	mov	r0, r2
 8007c26:	4798      	blx	r3
 8007c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c2a:	e05d      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa97 	bl	8008162 <USBD_CtlError>
            err++;
 8007c34:	7afb      	ldrb	r3, [r7, #11]
 8007c36:	3301      	adds	r3, #1
 8007c38:	72fb      	strb	r3, [r7, #11]
          break;
 8007c3a:	e055      	b.n	8007ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	7c12      	ldrb	r2, [r2, #16]
 8007c54:	f107 0108 	add.w	r1, r7, #8
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c5e:	e043      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fa7d 	bl	8008162 <USBD_CtlError>
            err++;
 8007c68:	7afb      	ldrb	r3, [r7, #11]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c6e:	e03b      	b.n	8007ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	7c12      	ldrb	r2, [r2, #16]
 8007c88:	f107 0108 	add.w	r1, r7, #8
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	4798      	blx	r3
 8007c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c92:	e029      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fa63 	bl	8008162 <USBD_CtlError>
            err++;
 8007c9c:	7afb      	ldrb	r3, [r7, #11]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ca2:	e021      	b.n	8007ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00b      	beq.n	8007cc8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	7c12      	ldrb	r2, [r2, #16]
 8007cbc:	f107 0108 	add.w	r1, r7, #8
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	4798      	blx	r3
 8007cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cc6:	e00f      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa49 	bl	8008162 <USBD_CtlError>
            err++;
 8007cd0:	7afb      	ldrb	r3, [r7, #11]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cd6:	e007      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa41 	bl	8008162 <USBD_CtlError>
          err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ce6:	bf00      	nop
      }
      break;
 8007ce8:	e037      	b.n	8007d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	7c1b      	ldrb	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d109      	bne.n	8007d06 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfa:	f107 0208 	add.w	r2, r7, #8
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4798      	blx	r3
 8007d02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d04:	e029      	b.n	8007d5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fa2a 	bl	8008162 <USBD_CtlError>
        err++;
 8007d0e:	7afb      	ldrb	r3, [r7, #11]
 8007d10:	3301      	adds	r3, #1
 8007d12:	72fb      	strb	r3, [r7, #11]
      break;
 8007d14:	e021      	b.n	8007d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	7c1b      	ldrb	r3, [r3, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10d      	bne.n	8007d3a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	f107 0208 	add.w	r2, r7, #8
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4798      	blx	r3
 8007d2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	2207      	movs	r2, #7
 8007d36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d38:	e00f      	b.n	8007d5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fa10 	bl	8008162 <USBD_CtlError>
        err++;
 8007d42:	7afb      	ldrb	r3, [r7, #11]
 8007d44:	3301      	adds	r3, #1
 8007d46:	72fb      	strb	r3, [r7, #11]
      break;
 8007d48:	e007      	b.n	8007d5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fa08 	bl	8008162 <USBD_CtlError>
      err++;
 8007d52:	7afb      	ldrb	r3, [r7, #11]
 8007d54:	3301      	adds	r3, #1
 8007d56:	72fb      	strb	r3, [r7, #11]
      break;
 8007d58:	bf00      	nop
  }

  if (err != 0U)
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d11e      	bne.n	8007d9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	88db      	ldrh	r3, [r3, #6]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d016      	beq.n	8007d96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007d68:	893b      	ldrh	r3, [r7, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00e      	beq.n	8007d8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	88da      	ldrh	r2, [r3, #6]
 8007d72:	893b      	ldrh	r3, [r7, #8]
 8007d74:	4293      	cmp	r3, r2
 8007d76:	bf28      	it	cs
 8007d78:	4613      	movcs	r3, r2
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d7e:	893b      	ldrh	r3, [r7, #8]
 8007d80:	461a      	mov	r2, r3
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fa5d 	bl	8008244 <USBD_CtlSendData>
 8007d8a:	e009      	b.n	8007da0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f9e7 	bl	8008162 <USBD_CtlError>
 8007d94:	e004      	b.n	8007da0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 faae 	bl	80082f8 <USBD_CtlSendStatus>
 8007d9c:	e000      	b.n	8007da0 <USBD_GetDescriptor+0x2cc>
    return;
 8007d9e:	bf00      	nop
  }
}
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop

08007da8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	889b      	ldrh	r3, [r3, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d131      	bne.n	8007e1e <USBD_SetAddress+0x76>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	88db      	ldrh	r3, [r3, #6]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d12d      	bne.n	8007e1e <USBD_SetAddress+0x76>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc8:	d829      	bhi.n	8007e1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	885b      	ldrh	r3, [r3, #2]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d104      	bne.n	8007dec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f9bc 	bl	8008162 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dea:	e01d      	b.n	8007e28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7bfa      	ldrb	r2, [r7, #15]
 8007df0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fed5 	bl	8008ba8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa7a 	bl	80082f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e12:	e009      	b.n	8007e28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1c:	e004      	b.n	8007e28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f99e 	bl	8008162 <USBD_CtlError>
  }
}
 8007e26:	bf00      	nop
 8007e28:	bf00      	nop
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	885b      	ldrh	r3, [r3, #2]
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	4b4e      	ldr	r3, [pc, #312]	; (8007f80 <USBD_SetConfig+0x150>)
 8007e46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e48:	4b4d      	ldr	r3, [pc, #308]	; (8007f80 <USBD_SetConfig+0x150>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d905      	bls.n	8007e5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f985 	bl	8008162 <USBD_CtlError>
    return USBD_FAIL;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e08c      	b.n	8007f76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d002      	beq.n	8007e6e <USBD_SetConfig+0x3e>
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d029      	beq.n	8007ec0 <USBD_SetConfig+0x90>
 8007e6c:	e075      	b.n	8007f5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e6e:	4b44      	ldr	r3, [pc, #272]	; (8007f80 <USBD_SetConfig+0x150>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d020      	beq.n	8007eb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007e76:	4b42      	ldr	r3, [pc, #264]	; (8007f80 <USBD_SetConfig+0x150>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e80:	4b3f      	ldr	r3, [pc, #252]	; (8007f80 <USBD_SetConfig+0x150>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fe ffe7 	bl	8006e5a <USBD_SetClassConfig>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d008      	beq.n	8007ea8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f962 	bl	8008162 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ea6:	e065      	b.n	8007f74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fa25 	bl	80082f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2203      	movs	r2, #3
 8007eb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007eb6:	e05d      	b.n	8007f74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fa1d 	bl	80082f8 <USBD_CtlSendStatus>
      break;
 8007ebe:	e059      	b.n	8007f74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ec0:	4b2f      	ldr	r3, [pc, #188]	; (8007f80 <USBD_SetConfig+0x150>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d112      	bne.n	8007eee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ed0:	4b2b      	ldr	r3, [pc, #172]	; (8007f80 <USBD_SetConfig+0x150>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007eda:	4b29      	ldr	r3, [pc, #164]	; (8007f80 <USBD_SetConfig+0x150>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7fe ffd6 	bl	8006e92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa06 	bl	80082f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007eec:	e042      	b.n	8007f74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007eee:	4b24      	ldr	r3, [pc, #144]	; (8007f80 <USBD_SetConfig+0x150>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d02a      	beq.n	8007f52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7fe ffc4 	bl	8006e92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f0a:	4b1d      	ldr	r3, [pc, #116]	; (8007f80 <USBD_SetConfig+0x150>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f14:	4b1a      	ldr	r3, [pc, #104]	; (8007f80 <USBD_SetConfig+0x150>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fe ff9d 	bl	8006e5a <USBD_SetClassConfig>
 8007f20:	4603      	mov	r3, r0
 8007f22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f918 	bl	8008162 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fe ffa9 	bl	8006e92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f48:	e014      	b.n	8007f74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f9d4 	bl	80082f8 <USBD_CtlSendStatus>
      break;
 8007f50:	e010      	b.n	8007f74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f9d0 	bl	80082f8 <USBD_CtlSendStatus>
      break;
 8007f58:	e00c      	b.n	8007f74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f900 	bl	8008162 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f62:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <USBD_SetConfig+0x150>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7fe ff92 	bl	8006e92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	73fb      	strb	r3, [r7, #15]
      break;
 8007f72:	bf00      	nop
  }

  return ret;
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	2000032c 	.word	0x2000032c

08007f84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	88db      	ldrh	r3, [r3, #6]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d004      	beq.n	8007fa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f8e2 	bl	8008162 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f9e:	e023      	b.n	8007fe8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	dc02      	bgt.n	8007fb2 <USBD_GetConfig+0x2e>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	dc03      	bgt.n	8007fb8 <USBD_GetConfig+0x34>
 8007fb0:	e015      	b.n	8007fde <USBD_GetConfig+0x5a>
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d00b      	beq.n	8007fce <USBD_GetConfig+0x4a>
 8007fb6:	e012      	b.n	8007fde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f93c 	bl	8008244 <USBD_CtlSendData>
        break;
 8007fcc:	e00c      	b.n	8007fe8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f934 	bl	8008244 <USBD_CtlSendData>
        break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f8be 	bl	8008162 <USBD_CtlError>
        break;
 8007fe6:	bf00      	nop
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008000:	b2db      	uxtb	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	2b02      	cmp	r3, #2
 8008006:	d81e      	bhi.n	8008046 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	88db      	ldrh	r3, [r3, #6]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d004      	beq.n	800801a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f8a5 	bl	8008162 <USBD_CtlError>
        break;
 8008018:	e01a      	b.n	8008050 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f043 0202 	orr.w	r2, r3, #2
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	330c      	adds	r3, #12
 800803a:	2202      	movs	r2, #2
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f900 	bl	8008244 <USBD_CtlSendData>
      break;
 8008044:	e004      	b.n	8008050 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f88a 	bl	8008162 <USBD_CtlError>
      break;
 800804e:	bf00      	nop
  }
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	885b      	ldrh	r3, [r3, #2]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d107      	bne.n	800807a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f940 	bl	80082f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008078:	e013      	b.n	80080a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	2b02      	cmp	r3, #2
 8008080:	d10b      	bne.n	800809a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	889b      	ldrh	r3, [r3, #4]
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	b29b      	uxth	r3, r3
 800808a:	b2da      	uxtb	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f930 	bl	80082f8 <USBD_CtlSendStatus>
}
 8008098:	e003      	b.n	80080a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f860 	bl	8008162 <USBD_CtlError>
}
 80080a2:	bf00      	nop
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	3b01      	subs	r3, #1
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d80b      	bhi.n	80080da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	885b      	ldrh	r3, [r3, #2]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d10c      	bne.n	80080e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f910 	bl	80082f8 <USBD_CtlSendStatus>
      }
      break;
 80080d8:	e004      	b.n	80080e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f840 	bl	8008162 <USBD_CtlError>
      break;
 80080e2:	e000      	b.n	80080e6 <USBD_ClrFeature+0x3c>
      break;
 80080e4:	bf00      	nop
  }
}
 80080e6:	bf00      	nop
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	781a      	ldrb	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3301      	adds	r3, #1
 8008108:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	781a      	ldrb	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3301      	adds	r3, #1
 8008116:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff fa41 	bl	80075a0 <SWAPBYTE>
 800811e:	4603      	mov	r3, r0
 8008120:	461a      	mov	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3301      	adds	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3301      	adds	r3, #1
 8008130:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff fa34 	bl	80075a0 <SWAPBYTE>
 8008138:	4603      	mov	r3, r0
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3301      	adds	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f7ff fa27 	bl	80075a0 <SWAPBYTE>
 8008152:	4603      	mov	r3, r0
 8008154:	461a      	mov	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	80da      	strh	r2, [r3, #6]
}
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b082      	sub	sp, #8
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800816c:	2180      	movs	r1, #128	; 0x80
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fcb0 	bl	8008ad4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008174:	2100      	movs	r1, #0
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fcac 	bl	8008ad4 <USBD_LL_StallEP>
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d036      	beq.n	8008208 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800819e:	6938      	ldr	r0, [r7, #16]
 80081a0:	f000 f836 	bl	8008210 <USBD_GetLen>
 80081a4:	4603      	mov	r3, r0
 80081a6:	3301      	adds	r3, #1
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	4413      	add	r3, r2
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7812      	ldrb	r2, [r2, #0]
 80081bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	3301      	adds	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	4413      	add	r3, r2
 80081ca:	2203      	movs	r2, #3
 80081cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	3301      	adds	r3, #1
 80081d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081d4:	e013      	b.n	80081fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	4413      	add	r3, r2
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	7812      	ldrb	r2, [r2, #0]
 80081e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3301      	adds	r3, #1
 80081e6:	613b      	str	r3, [r7, #16]
    idx++;
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
 80081ea:	3301      	adds	r3, #1
 80081ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	4413      	add	r3, r2
 80081f4:	2200      	movs	r2, #0
 80081f6:	701a      	strb	r2, [r3, #0]
    idx++;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	3301      	adds	r3, #1
 80081fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e7      	bne.n	80081d6 <USBD_GetString+0x52>
 8008206:	e000      	b.n	800820a <USBD_GetString+0x86>
    return;
 8008208:	bf00      	nop
  }
}
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008220:	e005      	b.n	800822e <USBD_GetLen+0x1e>
  {
    len++;
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	3301      	adds	r3, #1
 8008226:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	3301      	adds	r3, #1
 800822c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f5      	bne.n	8008222 <USBD_GetLen+0x12>
  }

  return len;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2202      	movs	r2, #2
 8008254:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	2100      	movs	r1, #0
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 fcbb 	bl	8008be6 <USBD_LL_Transmit>

  return USBD_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	2100      	movs	r1, #0
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 fcaa 	bl	8008be6 <USBD_LL_Transmit>

  return USBD_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2203      	movs	r2, #3
 80082ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	2100      	movs	r1, #0
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fcae 	bl	8008c28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	2100      	movs	r1, #0
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fc9d 	bl	8008c28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2204      	movs	r2, #4
 8008304:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008308:	2300      	movs	r3, #0
 800830a:	2200      	movs	r2, #0
 800830c:	2100      	movs	r1, #0
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fc69 	bl	8008be6 <USBD_LL_Transmit>

  return USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2205      	movs	r2, #5
 800832a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800832e:	2300      	movs	r3, #0
 8008330:	2200      	movs	r2, #0
 8008332:	2100      	movs	r1, #0
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fc77 	bl	8008c28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008348:	2200      	movs	r2, #0
 800834a:	4912      	ldr	r1, [pc, #72]	; (8008394 <MX_USB_DEVICE_Init+0x50>)
 800834c:	4812      	ldr	r0, [pc, #72]	; (8008398 <MX_USB_DEVICE_Init+0x54>)
 800834e:	f7fe fd07 	bl	8006d60 <USBD_Init>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008358:	f7f8 fbb8 	bl	8000acc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800835c:	490f      	ldr	r1, [pc, #60]	; (800839c <MX_USB_DEVICE_Init+0x58>)
 800835e:	480e      	ldr	r0, [pc, #56]	; (8008398 <MX_USB_DEVICE_Init+0x54>)
 8008360:	f7fe fd2e 	bl	8006dc0 <USBD_RegisterClass>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800836a:	f7f8 fbaf 	bl	8000acc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800836e:	490c      	ldr	r1, [pc, #48]	; (80083a0 <MX_USB_DEVICE_Init+0x5c>)
 8008370:	4809      	ldr	r0, [pc, #36]	; (8008398 <MX_USB_DEVICE_Init+0x54>)
 8008372:	f7fe fc65 	bl	8006c40 <USBD_CDC_RegisterInterface>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800837c:	f7f8 fba6 	bl	8000acc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008380:	4805      	ldr	r0, [pc, #20]	; (8008398 <MX_USB_DEVICE_Init+0x54>)
 8008382:	f7fe fd53 	bl	8006e2c <USBD_Start>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800838c:	f7f8 fb9e 	bl	8000acc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008390:	bf00      	nop
 8008392:	bd80      	pop	{r7, pc}
 8008394:	200000ac 	.word	0x200000ac
 8008398:	20000330 	.word	0x20000330
 800839c:	20000018 	.word	0x20000018
 80083a0:	20000098 	.word	0x20000098

080083a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083a8:	2200      	movs	r2, #0
 80083aa:	4905      	ldr	r1, [pc, #20]	; (80083c0 <CDC_Init_FS+0x1c>)
 80083ac:	4805      	ldr	r0, [pc, #20]	; (80083c4 <CDC_Init_FS+0x20>)
 80083ae:	f7fe fc61 	bl	8006c74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083b2:	4905      	ldr	r1, [pc, #20]	; (80083c8 <CDC_Init_FS+0x24>)
 80083b4:	4803      	ldr	r0, [pc, #12]	; (80083c4 <CDC_Init_FS+0x20>)
 80083b6:	f7fe fc7f 	bl	8006cb8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083bc:	4618      	mov	r0, r3
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20000e0c 	.word	0x20000e0c
 80083c4:	20000330 	.word	0x20000330
 80083c8:	2000060c 	.word	0x2000060c

080083cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	6039      	str	r1, [r7, #0]
 80083e6:	71fb      	strb	r3, [r7, #7]
 80083e8:	4613      	mov	r3, r2
 80083ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	2b23      	cmp	r3, #35	; 0x23
 80083f0:	d84a      	bhi.n	8008488 <CDC_Control_FS+0xac>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <CDC_Control_FS+0x1c>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008489 	.word	0x08008489
 80083fc:	08008489 	.word	0x08008489
 8008400:	08008489 	.word	0x08008489
 8008404:	08008489 	.word	0x08008489
 8008408:	08008489 	.word	0x08008489
 800840c:	08008489 	.word	0x08008489
 8008410:	08008489 	.word	0x08008489
 8008414:	08008489 	.word	0x08008489
 8008418:	08008489 	.word	0x08008489
 800841c:	08008489 	.word	0x08008489
 8008420:	08008489 	.word	0x08008489
 8008424:	08008489 	.word	0x08008489
 8008428:	08008489 	.word	0x08008489
 800842c:	08008489 	.word	0x08008489
 8008430:	08008489 	.word	0x08008489
 8008434:	08008489 	.word	0x08008489
 8008438:	08008489 	.word	0x08008489
 800843c:	08008489 	.word	0x08008489
 8008440:	08008489 	.word	0x08008489
 8008444:	08008489 	.word	0x08008489
 8008448:	08008489 	.word	0x08008489
 800844c:	08008489 	.word	0x08008489
 8008450:	08008489 	.word	0x08008489
 8008454:	08008489 	.word	0x08008489
 8008458:	08008489 	.word	0x08008489
 800845c:	08008489 	.word	0x08008489
 8008460:	08008489 	.word	0x08008489
 8008464:	08008489 	.word	0x08008489
 8008468:	08008489 	.word	0x08008489
 800846c:	08008489 	.word	0x08008489
 8008470:	08008489 	.word	0x08008489
 8008474:	08008489 	.word	0x08008489
 8008478:	08008489 	.word	0x08008489
 800847c:	08008489 	.word	0x08008489
 8008480:	08008489 	.word	0x08008489
 8008484:	08008489 	.word	0x08008489
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008488:	bf00      	nop
  }

  return (USBD_OK);
 800848a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	4805      	ldr	r0, [pc, #20]	; (80084bc <CDC_Receive_FS+0x24>)
 80084a6:	f7fe fc07 	bl	8006cb8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084aa:	4804      	ldr	r0, [pc, #16]	; (80084bc <CDC_Receive_FS+0x24>)
 80084ac:	f7fe fc22 	bl	8006cf4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000330 	.word	0x20000330

080084c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80084d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
	...

080084e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	6039      	str	r1, [r7, #0]
 80084ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2212      	movs	r2, #18
 80084f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084f6:	4b03      	ldr	r3, [pc, #12]	; (8008504 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	200000c8 	.word	0x200000c8

08008508 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	6039      	str	r1, [r7, #0]
 8008512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2204      	movs	r2, #4
 8008518:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800851a:	4b03      	ldr	r3, [pc, #12]	; (8008528 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	200000dc 	.word	0x200000dc

0800852c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	6039      	str	r1, [r7, #0]
 8008536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d105      	bne.n	800854a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	4907      	ldr	r1, [pc, #28]	; (8008560 <USBD_FS_ProductStrDescriptor+0x34>)
 8008542:	4808      	ldr	r0, [pc, #32]	; (8008564 <USBD_FS_ProductStrDescriptor+0x38>)
 8008544:	f7ff fe1e 	bl	8008184 <USBD_GetString>
 8008548:	e004      	b.n	8008554 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4904      	ldr	r1, [pc, #16]	; (8008560 <USBD_FS_ProductStrDescriptor+0x34>)
 800854e:	4805      	ldr	r0, [pc, #20]	; (8008564 <USBD_FS_ProductStrDescriptor+0x38>)
 8008550:	f7ff fe18 	bl	8008184 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008554:	4b02      	ldr	r3, [pc, #8]	; (8008560 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	2000160c 	.word	0x2000160c
 8008564:	08008d88 	.word	0x08008d88

08008568 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	4904      	ldr	r1, [pc, #16]	; (8008588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008578:	4804      	ldr	r0, [pc, #16]	; (800858c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800857a:	f7ff fe03 	bl	8008184 <USBD_GetString>
  return USBD_StrDesc;
 800857e:	4b02      	ldr	r3, [pc, #8]	; (8008588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	2000160c 	.word	0x2000160c
 800858c:	08008da0 	.word	0x08008da0

08008590 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	6039      	str	r1, [r7, #0]
 800859a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	221a      	movs	r2, #26
 80085a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085a2:	f000 f843 	bl	800862c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085a6:	4b02      	ldr	r3, [pc, #8]	; (80085b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	200000e0 	.word	0x200000e0

080085b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	4603      	mov	r3, r0
 80085bc:	6039      	str	r1, [r7, #0]
 80085be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085c0:	79fb      	ldrb	r3, [r7, #7]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d105      	bne.n	80085d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	4907      	ldr	r1, [pc, #28]	; (80085e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085ca:	4808      	ldr	r0, [pc, #32]	; (80085ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80085cc:	f7ff fdda 	bl	8008184 <USBD_GetString>
 80085d0:	e004      	b.n	80085dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	4904      	ldr	r1, [pc, #16]	; (80085e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085d6:	4805      	ldr	r0, [pc, #20]	; (80085ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80085d8:	f7ff fdd4 	bl	8008184 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085dc:	4b02      	ldr	r3, [pc, #8]	; (80085e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	2000160c 	.word	0x2000160c
 80085ec:	08008db4 	.word	0x08008db4

080085f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	4907      	ldr	r1, [pc, #28]	; (8008624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008606:	4808      	ldr	r0, [pc, #32]	; (8008628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008608:	f7ff fdbc 	bl	8008184 <USBD_GetString>
 800860c:	e004      	b.n	8008618 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	4904      	ldr	r1, [pc, #16]	; (8008624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008612:	4805      	ldr	r0, [pc, #20]	; (8008628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008614:	f7ff fdb6 	bl	8008184 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008618:	4b02      	ldr	r3, [pc, #8]	; (8008624 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	2000160c 	.word	0x2000160c
 8008628:	08008dc0 	.word	0x08008dc0

0800862c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008632:	4b0f      	ldr	r3, [pc, #60]	; (8008670 <Get_SerialNum+0x44>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008638:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <Get_SerialNum+0x48>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800863e:	4b0e      	ldr	r3, [pc, #56]	; (8008678 <Get_SerialNum+0x4c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4413      	add	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d009      	beq.n	8008666 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008652:	2208      	movs	r2, #8
 8008654:	4909      	ldr	r1, [pc, #36]	; (800867c <Get_SerialNum+0x50>)
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 f814 	bl	8008684 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800865c:	2204      	movs	r2, #4
 800865e:	4908      	ldr	r1, [pc, #32]	; (8008680 <Get_SerialNum+0x54>)
 8008660:	68b8      	ldr	r0, [r7, #8]
 8008662:	f000 f80f 	bl	8008684 <IntToUnicode>
  }
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	1fff7a10 	.word	0x1fff7a10
 8008674:	1fff7a14 	.word	0x1fff7a14
 8008678:	1fff7a18 	.word	0x1fff7a18
 800867c:	200000e2 	.word	0x200000e2
 8008680:	200000f2 	.word	0x200000f2

08008684 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008696:	2300      	movs	r3, #0
 8008698:	75fb      	strb	r3, [r7, #23]
 800869a:	e027      	b.n	80086ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	0f1b      	lsrs	r3, r3, #28
 80086a0:	2b09      	cmp	r3, #9
 80086a2:	d80b      	bhi.n	80086bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	0f1b      	lsrs	r3, r3, #28
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	4619      	mov	r1, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	440b      	add	r3, r1
 80086b4:	3230      	adds	r2, #48	; 0x30
 80086b6:	b2d2      	uxtb	r2, r2
 80086b8:	701a      	strb	r2, [r3, #0]
 80086ba:	e00a      	b.n	80086d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	0f1b      	lsrs	r3, r3, #28
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	4619      	mov	r1, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	440b      	add	r3, r1
 80086cc:	3237      	adds	r2, #55	; 0x37
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	3301      	adds	r3, #1
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	4413      	add	r3, r2
 80086e2:	2200      	movs	r2, #0
 80086e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	3301      	adds	r3, #1
 80086ea:	75fb      	strb	r3, [r7, #23]
 80086ec:	7dfa      	ldrb	r2, [r7, #23]
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d3d3      	bcc.n	800869c <IntToUnicode+0x18>
  }
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
	...

08008704 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08a      	sub	sp, #40	; 0x28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800870c:	f107 0314 	add.w	r3, r7, #20
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	605a      	str	r2, [r3, #4]
 8008716:	609a      	str	r2, [r3, #8]
 8008718:	60da      	str	r2, [r3, #12]
 800871a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008724:	d13a      	bne.n	800879c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008726:	2300      	movs	r3, #0
 8008728:	613b      	str	r3, [r7, #16]
 800872a:	4b1e      	ldr	r3, [pc, #120]	; (80087a4 <HAL_PCD_MspInit+0xa0>)
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	4a1d      	ldr	r2, [pc, #116]	; (80087a4 <HAL_PCD_MspInit+0xa0>)
 8008730:	f043 0301 	orr.w	r3, r3, #1
 8008734:	6313      	str	r3, [r2, #48]	; 0x30
 8008736:	4b1b      	ldr	r3, [pc, #108]	; (80087a4 <HAL_PCD_MspInit+0xa0>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	613b      	str	r3, [r7, #16]
 8008740:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008742:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008748:	2302      	movs	r3, #2
 800874a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800874c:	2300      	movs	r3, #0
 800874e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008750:	2303      	movs	r3, #3
 8008752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008754:	230a      	movs	r3, #10
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008758:	f107 0314 	add.w	r3, r7, #20
 800875c:	4619      	mov	r1, r3
 800875e:	4812      	ldr	r0, [pc, #72]	; (80087a8 <HAL_PCD_MspInit+0xa4>)
 8008760:	f7f9 f894 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008764:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <HAL_PCD_MspInit+0xa0>)
 8008766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008768:	4a0e      	ldr	r2, [pc, #56]	; (80087a4 <HAL_PCD_MspInit+0xa0>)
 800876a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800876e:	6353      	str	r3, [r2, #52]	; 0x34
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <HAL_PCD_MspInit+0xa0>)
 8008776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008778:	4a0a      	ldr	r2, [pc, #40]	; (80087a4 <HAL_PCD_MspInit+0xa0>)
 800877a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800877e:	6453      	str	r3, [r2, #68]	; 0x44
 8008780:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <HAL_PCD_MspInit+0xa0>)
 8008782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800878c:	2200      	movs	r2, #0
 800878e:	2100      	movs	r1, #0
 8008790:	2043      	movs	r0, #67	; 0x43
 8008792:	f7f9 f844 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008796:	2043      	movs	r0, #67	; 0x43
 8008798:	f7f9 f85d 	bl	8001856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800879c:	bf00      	nop
 800879e:	3728      	adds	r7, #40	; 0x28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	40023800 	.word	0x40023800
 80087a8:	40020000 	.word	0x40020000

080087ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80087c0:	4619      	mov	r1, r3
 80087c2:	4610      	mov	r0, r2
 80087c4:	f7fe fb7f 	bl	8006ec6 <USBD_LL_SetupStage>
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80087e2:	78fa      	ldrb	r2, [r7, #3]
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	4613      	mov	r3, r2
 80087e8:	00db      	lsls	r3, r3, #3
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	440b      	add	r3, r1
 80087f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	4619      	mov	r1, r3
 80087fa:	f7fe fbb9 	bl	8006f70 <USBD_LL_DataOutStage>
}
 80087fe:	bf00      	nop
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	4613      	mov	r3, r2
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	440b      	add	r3, r1
 8008826:	334c      	adds	r3, #76	; 0x4c
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	4619      	mov	r1, r3
 800882e:	f7fe fc52 	bl	80070d6 <USBD_LL_DataInStage>
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fd86 	bl	800735a <USBD_LL_SOF>
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800885e:	2301      	movs	r3, #1
 8008860:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b02      	cmp	r3, #2
 8008868:	d001      	beq.n	800886e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800886a:	f7f8 f92f 	bl	8000acc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008874:	7bfa      	ldrb	r2, [r7, #15]
 8008876:	4611      	mov	r1, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe fd30 	bl	80072de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe fcd8 	bl	800723a <USBD_LL_Reset>
}
 800888a:	bf00      	nop
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fd2b 	bl	80072fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	6812      	ldr	r2, [r2, #0]
 80088b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088ba:	f043 0301 	orr.w	r3, r3, #1
 80088be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d005      	beq.n	80088d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088c8:	4b04      	ldr	r3, [pc, #16]	; (80088dc <HAL_PCD_SuspendCallback+0x48>)
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	4a03      	ldr	r2, [pc, #12]	; (80088dc <HAL_PCD_SuspendCallback+0x48>)
 80088ce:	f043 0306 	orr.w	r3, r3, #6
 80088d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	e000ed00 	.word	0xe000ed00

080088e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe fd1b 	bl	800732a <USBD_LL_Resume>
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800890e:	78fa      	ldrb	r2, [r7, #3]
 8008910:	4611      	mov	r1, r2
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe fd73 	bl	80073fe <USBD_LL_IsoOUTIncomplete>
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	4611      	mov	r1, r2
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe fd2f 	bl	800739a <USBD_LL_IsoINIncomplete>
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008952:	4618      	mov	r0, r3
 8008954:	f7fe fd85 	bl	8007462 <USBD_LL_DevConnected>
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe fd82 	bl	8007478 <USBD_LL_DevDisconnected>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d13c      	bne.n	8008a06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800898c:	4a20      	ldr	r2, [pc, #128]	; (8008a10 <USBD_LL_Init+0x94>)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a1e      	ldr	r2, [pc, #120]	; (8008a10 <USBD_LL_Init+0x94>)
 8008998:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800899c:	4b1c      	ldr	r3, [pc, #112]	; (8008a10 <USBD_LL_Init+0x94>)
 800899e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80089a4:	4b1a      	ldr	r3, [pc, #104]	; (8008a10 <USBD_LL_Init+0x94>)
 80089a6:	2204      	movs	r2, #4
 80089a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089aa:	4b19      	ldr	r3, [pc, #100]	; (8008a10 <USBD_LL_Init+0x94>)
 80089ac:	2202      	movs	r2, #2
 80089ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089b0:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <USBD_LL_Init+0x94>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089b6:	4b16      	ldr	r3, [pc, #88]	; (8008a10 <USBD_LL_Init+0x94>)
 80089b8:	2202      	movs	r2, #2
 80089ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089bc:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <USBD_LL_Init+0x94>)
 80089be:	2200      	movs	r2, #0
 80089c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80089c2:	4b13      	ldr	r3, [pc, #76]	; (8008a10 <USBD_LL_Init+0x94>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80089c8:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <USBD_LL_Init+0x94>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80089ce:	4b10      	ldr	r3, [pc, #64]	; (8008a10 <USBD_LL_Init+0x94>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80089d4:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <USBD_LL_Init+0x94>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80089da:	480d      	ldr	r0, [pc, #52]	; (8008a10 <USBD_LL_Init+0x94>)
 80089dc:	f7f9 fa38 	bl	8001e50 <HAL_PCD_Init>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80089e6:	f7f8 f871 	bl	8000acc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80089ea:	2180      	movs	r1, #128	; 0x80
 80089ec:	4808      	ldr	r0, [pc, #32]	; (8008a10 <USBD_LL_Init+0x94>)
 80089ee:	f7fa fc90 	bl	8003312 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089f2:	2240      	movs	r2, #64	; 0x40
 80089f4:	2100      	movs	r1, #0
 80089f6:	4806      	ldr	r0, [pc, #24]	; (8008a10 <USBD_LL_Init+0x94>)
 80089f8:	f7fa fc44 	bl	8003284 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089fc:	2280      	movs	r2, #128	; 0x80
 80089fe:	2101      	movs	r1, #1
 8008a00:	4803      	ldr	r0, [pc, #12]	; (8008a10 <USBD_LL_Init+0x94>)
 8008a02:	f7fa fc3f 	bl	8003284 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	2000180c 	.word	0x2000180c

08008a14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7f9 fb2d 	bl	800208a <HAL_PCD_Start>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 f942 	bl	8008cc0 <USBD_Get_USB_Status>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	4608      	mov	r0, r1
 8008a54:	4611      	mov	r1, r2
 8008a56:	461a      	mov	r2, r3
 8008a58:	4603      	mov	r3, r0
 8008a5a:	70fb      	strb	r3, [r7, #3]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	70bb      	strb	r3, [r7, #2]
 8008a60:	4613      	mov	r3, r2
 8008a62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a72:	78bb      	ldrb	r3, [r7, #2]
 8008a74:	883a      	ldrh	r2, [r7, #0]
 8008a76:	78f9      	ldrb	r1, [r7, #3]
 8008a78:	f7f9 fffe 	bl	8002a78 <HAL_PCD_EP_Open>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 f91c 	bl	8008cc0 <USBD_Get_USB_Status>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ab0:	78fa      	ldrb	r2, [r7, #3]
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fa f847 	bl	8002b48 <HAL_PCD_EP_Close>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 f8fd 	bl	8008cc0 <USBD_Get_USB_Status>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008aee:	78fa      	ldrb	r2, [r7, #3]
 8008af0:	4611      	mov	r1, r2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fa f91f 	bl	8002d36 <HAL_PCD_EP_SetStall>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f8de 	bl	8008cc0 <USBD_Get_USB_Status>
 8008b04:	4603      	mov	r3, r0
 8008b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b2c:	78fa      	ldrb	r2, [r7, #3]
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fa f964 	bl	8002dfe <HAL_PCD_EP_ClrStall>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 f8bf 	bl	8008cc0 <USBD_Get_USB_Status>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	da0b      	bge.n	8008b84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b72:	68f9      	ldr	r1, [r7, #12]
 8008b74:	4613      	mov	r3, r2
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	440b      	add	r3, r1
 8008b7e:	333e      	adds	r3, #62	; 0x3e
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	e00b      	b.n	8008b9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b8a:	68f9      	ldr	r1, [r7, #12]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008b9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7f9 ff31 	bl	8002a2e <HAL_PCD_SetAddress>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 f874 	bl	8008cc0 <USBD_Get_USB_Status>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b086      	sub	sp, #24
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c04:	7af9      	ldrb	r1, [r7, #11]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	f7fa f84a 	bl	8002ca2 <HAL_PCD_EP_Transmit>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 f853 	bl	8008cc0 <USBD_Get_USB_Status>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	607a      	str	r2, [r7, #4]
 8008c32:	603b      	str	r3, [r7, #0]
 8008c34:	460b      	mov	r3, r1
 8008c36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c46:	7af9      	ldrb	r1, [r7, #11]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	f7f9 ffc6 	bl	8002bdc <HAL_PCD_EP_Receive>
 8008c50:	4603      	mov	r3, r0
 8008c52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 f832 	bl	8008cc0 <USBD_Get_USB_Status>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c60:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c7c:	78fa      	ldrb	r2, [r7, #3]
 8008c7e:	4611      	mov	r1, r2
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7f9 fff6 	bl	8002c72 <HAL_PCD_EP_GetRxCount>
 8008c86:	4603      	mov	r3, r0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c98:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <USBD_static_malloc+0x18>)
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	20001d18 	.word	0x20001d18

08008cac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]

}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d817      	bhi.n	8008d04 <USBD_Get_USB_Status+0x44>
 8008cd4:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <USBD_Get_USB_Status+0x1c>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008ced 	.word	0x08008ced
 8008ce0:	08008cf3 	.word	0x08008cf3
 8008ce4:	08008cf9 	.word	0x08008cf9
 8008ce8:	08008cff 	.word	0x08008cff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf0:	e00b      	b.n	8008d0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf6:	e008      	b.n	8008d0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfc:	e005      	b.n	8008d0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	73fb      	strb	r3, [r7, #15]
    break;
 8008d02:	e002      	b.n	8008d0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d04:	2303      	movs	r3, #3
 8008d06:	73fb      	strb	r3, [r7, #15]
    break;
 8008d08:	bf00      	nop
  }
  return usb_status;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <memset>:
 8008d18:	4402      	add	r2, r0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d100      	bne.n	8008d22 <memset+0xa>
 8008d20:	4770      	bx	lr
 8008d22:	f803 1b01 	strb.w	r1, [r3], #1
 8008d26:	e7f9      	b.n	8008d1c <memset+0x4>

08008d28 <__libc_init_array>:
 8008d28:	b570      	push	{r4, r5, r6, lr}
 8008d2a:	4d0d      	ldr	r5, [pc, #52]	; (8008d60 <__libc_init_array+0x38>)
 8008d2c:	4c0d      	ldr	r4, [pc, #52]	; (8008d64 <__libc_init_array+0x3c>)
 8008d2e:	1b64      	subs	r4, r4, r5
 8008d30:	10a4      	asrs	r4, r4, #2
 8008d32:	2600      	movs	r6, #0
 8008d34:	42a6      	cmp	r6, r4
 8008d36:	d109      	bne.n	8008d4c <__libc_init_array+0x24>
 8008d38:	4d0b      	ldr	r5, [pc, #44]	; (8008d68 <__libc_init_array+0x40>)
 8008d3a:	4c0c      	ldr	r4, [pc, #48]	; (8008d6c <__libc_init_array+0x44>)
 8008d3c:	f000 f818 	bl	8008d70 <_init>
 8008d40:	1b64      	subs	r4, r4, r5
 8008d42:	10a4      	asrs	r4, r4, #2
 8008d44:	2600      	movs	r6, #0
 8008d46:	42a6      	cmp	r6, r4
 8008d48:	d105      	bne.n	8008d56 <__libc_init_array+0x2e>
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d50:	4798      	blx	r3
 8008d52:	3601      	adds	r6, #1
 8008d54:	e7ee      	b.n	8008d34 <__libc_init_array+0xc>
 8008d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d5a:	4798      	blx	r3
 8008d5c:	3601      	adds	r6, #1
 8008d5e:	e7f2      	b.n	8008d46 <__libc_init_array+0x1e>
 8008d60:	08008df0 	.word	0x08008df0
 8008d64:	08008df0 	.word	0x08008df0
 8008d68:	08008df0 	.word	0x08008df0
 8008d6c:	08008df4 	.word	0x08008df4

08008d70 <_init>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr

08008d7c <_fini>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr
