
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aff0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800b190  0800b190  0001b190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b51c  0800b51c  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800b51c  0800b51c  0001b51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b524  0800b524  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b528  0800b528  0001b528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800b52c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010550  20000270  0800b79c  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200107c0  0800b79c  000207c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011135  00000000  00000000  000202e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ca3  00000000  00000000  00031418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  000340c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb2  00000000  00000000  00035118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019994  00000000  00000000  00035dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c56  00000000  00000000  0004f75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be2a  00000000  00000000  000643b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005400  00000000  00000000  001001e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  001055e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000270 	.word	0x20000270
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b178 	.word	0x0800b178

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000274 	.word	0x20000274
 80001dc:	0800b178 	.word	0x0800b178

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <PrepareCommutation>:
HAL_StatusTypeDef StopSequence(void);
HAL_StatusTypeDef ChangePWM (void);

/* Private function ----------------------------------------------------------*/

HAL_StatusTypeDef PrepareCommutation () {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1 + 6 * Registers[DirReg];
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <PrepareCommutation+0x78>)
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <PrepareCommutation+0x7c>)
 8000fa8:	885b      	ldrh	r3, [r3, #2]
 8000faa:	4619      	mov	r1, r3
 8000fac:	0049      	lsls	r1, r1, #1
 8000fae:	440b      	add	r3, r1
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	80fb      	strh	r3, [r7, #6]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000fbc:	88fa      	ldrh	r2, [r7, #6]
 8000fbe:	4915      	ldr	r1, [pc, #84]	; (8001014 <PrepareCommutation+0x80>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	440b      	add	r3, r1
 8000fca:	881a      	ldrh	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <PrepareCommutation+0x84>)
 8000fce:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000fd0:	88fa      	ldrh	r2, [r7, #6]
 8000fd2:	4910      	ldr	r1, [pc, #64]	; (8001014 <PrepareCommutation+0x80>)
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	440b      	add	r3, r1
 8000fde:	3304      	adds	r3, #4
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <PrepareCommutation+0x84>)
 8000fe4:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000fe6:	88fa      	ldrh	r2, [r7, #6]
 8000fe8:	490a      	ldr	r1, [pc, #40]	; (8001014 <PrepareCommutation+0x80>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <PrepareCommutation+0x84>)
 8000ffa:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8000ffc:	2300      	movs	r3, #0

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000
 8001010:	20000090 	.word	0x20000090
 8001014:	20000000 	.word	0x20000000
 8001018:	40010000 	.word	0x40010000
 800101c:	00000000 	.word	0x00000000

08001020 <StartupSequence>:

	return HAL_OK;

}

HAL_StatusTypeDef StartupSequence () {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

	// Initialize some constantes
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2; 			// Get clock frequency for APB1 timer
 8001026:	f005 fdf5 	bl	8006c14 <HAL_RCC_GetPCLK1Freq>
 800102a:	4603      	mov	r3, r0
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4a8a      	ldr	r2, [pc, #552]	; (8001258 <StartupSequence+0x238>)
 8001030:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;				// Get clock frequency for APB2 timer
 8001032:	f005 fe03 	bl	8006c3c <HAL_RCC_GetPCLK2Freq>
 8001036:	4603      	mov	r3, r0
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4a88      	ldr	r2, [pc, #544]	; (800125c <StartupSequence+0x23c>)
 800103c:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1)) * 1.35; 	// Calculate a constant to later be used for RPM calculation
 800103e:	4b87      	ldr	r3, [pc, #540]	; (800125c <StartupSequence+0x23c>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4b87      	ldr	r3, [pc, #540]	; (8001260 <StartupSequence+0x240>)
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	3301      	adds	r3, #1
 8001048:	fbb2 f3f3 	udiv	r3, r2, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa61 	bl	8000514 <__aeabi_ui2d>
 8001052:	a37f      	add	r3, pc, #508	; (adr r3, 8001250 <StartupSequence+0x230>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fad6 	bl	8000608 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fda8 	bl	8000bb8 <__aeabi_d2uiz>
 8001068:	4603      	mov	r3, r0
 800106a:	4a7e      	ldr	r2, [pc, #504]	; (8001264 <StartupSequence+0x244>)
 800106c:	6013      	str	r3, [r2, #0]

	// Make sure PWM is set for first commutation
	ChangePWM();
 800106e:	f000 f973 	bl	8001358 <ChangePWM>
	*/

	// Set registers for first commutation
	// Read IDR for Hall Sensor status
	// uint16_t Hall = (GPIOA->IDR & 0b111) + 6 * Direction + 3;
	uint16_t Hall = (GPIOA->IDR & 0b111) + 6 * Registers[DirReg] - 3;
 8001072:	4b7d      	ldr	r3, [pc, #500]	; (8001268 <StartupSequence+0x248>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	b29b      	uxth	r3, r3
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b7b      	ldr	r3, [pc, #492]	; (800126c <StartupSequence+0x24c>)
 8001080:	885b      	ldrh	r3, [r3, #2]
 8001082:	4619      	mov	r1, r3
 8001084:	0049      	lsls	r1, r1, #1
 8001086:	440b      	add	r3, r1
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	b29b      	uxth	r3, r3
 800108c:	4413      	add	r3, r2
 800108e:	b29b      	uxth	r3, r3
 8001090:	3b03      	subs	r3, #3
 8001092:	80fb      	strh	r3, [r7, #6]

	// Set registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8001094:	88fa      	ldrh	r2, [r7, #6]
 8001096:	4976      	ldr	r1, [pc, #472]	; (8001270 <StartupSequence+0x250>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	440b      	add	r3, r1
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4b73      	ldr	r3, [pc, #460]	; (8001274 <StartupSequence+0x254>)
 80010a6:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	4971      	ldr	r1, [pc, #452]	; (8001270 <StartupSequence+0x250>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	440b      	add	r3, r1
 80010b6:	3304      	adds	r3, #4
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	4b6e      	ldr	r3, [pc, #440]	; (8001274 <StartupSequence+0x254>)
 80010bc:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 80010be:	88fa      	ldrh	r2, [r7, #6]
 80010c0:	496b      	ldr	r1, [pc, #428]	; (8001270 <StartupSequence+0x250>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	440b      	add	r3, r1
 80010cc:	3302      	adds	r3, #2
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	4b68      	ldr	r3, [pc, #416]	; (8001274 <StartupSequence+0x254>)
 80010d2:	61da      	str	r2, [r3, #28]

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 80010d4:	2100      	movs	r1, #0
 80010d6:	4868      	ldr	r0, [pc, #416]	; (8001278 <StartupSequence+0x258>)
 80010d8:	f005 fef4 	bl	8006ec4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 80010dc:	2104      	movs	r1, #4
 80010de:	4866      	ldr	r0, [pc, #408]	; (8001278 <StartupSequence+0x258>)
 80010e0:	f005 fef0 	bl	8006ec4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 80010e4:	2108      	movs	r1, #8
 80010e6:	4864      	ldr	r0, [pc, #400]	; (8001278 <StartupSequence+0x258>)
 80010e8:	f005 feec 	bl	8006ec4 <HAL_TIM_PWM_Start>

	// Start HallSensor timer in XOR mode
	HAL_TIMEx_HallSensor_Start (&htim2);
 80010ec:	4863      	ldr	r0, [pc, #396]	; (800127c <StartupSequence+0x25c>)
 80010ee:	f007 f9f9 	bl	80084e4 <HAL_TIMEx_HallSensor_Start>

	// Start ADC timer
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010f2:	2100      	movs	r1, #0
 80010f4:	4862      	ldr	r0, [pc, #392]	; (8001280 <StartupSequence+0x260>)
 80010f6:	f005 fee5 	bl	8006ec4 <HAL_TIM_PWM_Start>

	// Start Temp timer
	HAL_TIM_PWM_Start (&htim5, TIM_CHANNEL_1);
 80010fa:	2100      	movs	r1, #0
 80010fc:	4861      	ldr	r0, [pc, #388]	; (8001284 <StartupSequence+0x264>)
 80010fe:	f005 fee1 	bl	8006ec4 <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8001102:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <StartupSequence+0x254>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	4a5b      	ldr	r2, [pc, #364]	; (8001274 <StartupSequence+0x254>)
 8001108:	f023 0320 	bic.w	r3, r3, #32
 800110c:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 800110e:	4b59      	ldr	r3, [pc, #356]	; (8001274 <StartupSequence+0x254>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	4a58      	ldr	r2, [pc, #352]	; (8001274 <StartupSequence+0x254>)
 8001114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001118:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 800111a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001128:	60d3      	str	r3, [r2, #12]
	TIM3->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 3
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <StartupSequence+0x268>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	4a56      	ldr	r2, [pc, #344]	; (8001288 <StartupSequence+0x268>)
 8001130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001134:	60d3      	str	r3, [r2, #12]
	TIM5->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 5
 8001136:	4b55      	ldr	r3, [pc, #340]	; (800128c <StartupSequence+0x26c>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	4a54      	ldr	r2, [pc, #336]	; (800128c <StartupSequence+0x26c>)
 800113c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001140:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001142:	4b47      	ldr	r3, [pc, #284]	; (8001260 <StartupSequence+0x240>)
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	4a46      	ldr	r2, [pc, #280]	; (8001260 <StartupSequence+0x240>)
 8001148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800114c:	60d3      	str	r3, [r2, #12]

	// Start all timers
	HAL_TIM_Base_Start_IT (&htim1);
 800114e:	484a      	ldr	r0, [pc, #296]	; (8001278 <StartupSequence+0x258>)
 8001150:	f005 fdd8 	bl	8006d04 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 8001154:	4849      	ldr	r0, [pc, #292]	; (800127c <StartupSequence+0x25c>)
 8001156:	f005 fdd5 	bl	8006d04 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim3);
 800115a:	4849      	ldr	r0, [pc, #292]	; (8001280 <StartupSequence+0x260>)
 800115c:	f005 fdd2 	bl	8006d04 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim5);
 8001160:	4848      	ldr	r0, [pc, #288]	; (8001284 <StartupSequence+0x264>)
 8001162:	f005 fdcf 	bl	8006d04 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim9);
 8001166:	484a      	ldr	r0, [pc, #296]	; (8001290 <StartupSequence+0x270>)
 8001168:	f005 fdcc 	bl	8006d04 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 800116c:	2104      	movs	r1, #4
 800116e:	4848      	ldr	r0, [pc, #288]	; (8001290 <StartupSequence+0x270>)
 8001170:	f006 f80c 	bl	800718c <HAL_TIM_IC_Start_IT>

	// Start ADC for current sensing
	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	HAL_ADC_Start_IT(&hadc1);
 8001174:	4847      	ldr	r0, [pc, #284]	; (8001294 <StartupSequence+0x274>)
 8001176:	f001 fcad 	bl	8002ad4 <HAL_ADC_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 800117a:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <StartupSequence+0x254>)
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	4a3d      	ldr	r2, [pc, #244]	; (8001274 <StartupSequence+0x254>)
 8001180:	f023 0320 	bic.w	r3, r3, #32
 8001184:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8001186:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <StartupSequence+0x254>)
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	4a3a      	ldr	r2, [pc, #232]	; (8001274 <StartupSequence+0x254>)
 800118c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001190:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 8001192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011a0:	6113      	str	r3, [r2, #16]
	TIM3->SR &= ~TIM_SR_TIF;		// Clear timer 3 interrupt flag
 80011a2:	4b39      	ldr	r3, [pc, #228]	; (8001288 <StartupSequence+0x268>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	4a38      	ldr	r2, [pc, #224]	; (8001288 <StartupSequence+0x268>)
 80011a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011ac:	6113      	str	r3, [r2, #16]
	TIM5->SR &= ~TIM_SR_TIF;		// Clear timer 5 interrupt flag
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <StartupSequence+0x26c>)
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	4a36      	ldr	r2, [pc, #216]	; (800128c <StartupSequence+0x26c>)
 80011b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011b8:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <StartupSequence+0x240>)
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	4a28      	ldr	r2, [pc, #160]	; (8001260 <StartupSequence+0x240>)
 80011c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011c4:	6113      	str	r3, [r2, #16]

	// Enable interrupts on the necessary timers
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 80011c6:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <StartupSequence+0x254>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	4a2a      	ldr	r2, [pc, #168]	; (8001274 <StartupSequence+0x254>)
 80011cc:	f043 0320 	orr.w	r3, r3, #32
 80011d0:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 80011d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e0:	60d3      	str	r3, [r2, #12]
	TIM3->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 3
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <StartupSequence+0x268>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	4a28      	ldr	r2, [pc, #160]	; (8001288 <StartupSequence+0x268>)
 80011e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ec:	60d3      	str	r3, [r2, #12]
	TIM5->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 5
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <StartupSequence+0x26c>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	4a26      	ldr	r2, [pc, #152]	; (800128c <StartupSequence+0x26c>)
 80011f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f8:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <StartupSequence+0x240>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	4a18      	ldr	r2, [pc, #96]	; (8001260 <StartupSequence+0x240>)
 8001200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001204:	60d3      	str	r3, [r2, #12]

	// Write some registers
	// ADC1->CR1  |= ADC_CR1_EOCIE;	// Enable ADC interrupts
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <StartupSequence+0x254>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <StartupSequence+0x254>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6053      	str	r3, [r2, #4]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <StartupSequence+0x254>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <StartupSequence+0x254>)
 8001218:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800F;			// Set dead-time to 100ns and make sure to enable MOE bit
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <StartupSequence+0x254>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <StartupSequence+0x254>)
 8001224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001228:	f043 030f 	orr.w	r3, r3, #15
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <StartupSequence+0x254>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <StartupSequence+0x254>)
 8001234:	f043 0320 	orr.w	r3, r3, #32
 8001238:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <StartupSequence+0x254>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <StartupSequence+0x254>)
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	60d3      	str	r3, [r2, #12]

	return HAL_OK;
 8001246:	2300      	movs	r3, #0

}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	9999999a 	.word	0x9999999a
 8001254:	3ff59999 	.word	0x3ff59999
 8001258:	2000028c 	.word	0x2000028c
 800125c:	20000290 	.word	0x20000290
 8001260:	40014000 	.word	0x40014000
 8001264:	20000294 	.word	0x20000294
 8001268:	40020000 	.word	0x40020000
 800126c:	20000090 	.word	0x20000090
 8001270:	20000000 	.word	0x20000000
 8001274:	40010000 	.word	0x40010000
 8001278:	200104c0 	.word	0x200104c0
 800127c:	20010508 	.word	0x20010508
 8001280:	20010550 	.word	0x20010550
 8001284:	200105e0 	.word	0x200105e0
 8001288:	40000400 	.word	0x40000400
 800128c:	40000c00 	.word	0x40000c00
 8001290:	20010628 	.word	0x20010628
 8001294:	200102a4 	.word	0x200102a4

08001298 <StopSequence>:

HAL_StatusTypeDef StopSequence(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 800129c:	4828      	ldr	r0, [pc, #160]	; (8001340 <StopSequence+0xa8>)
 800129e:	f007 f9a1 	bl	80085e4 <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <StopSequence+0xac>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <StopSequence+0xac>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <StopSequence+0xac>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]

	// Perform one last commutation event if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 		// If COMIE bit in DIER is set commutation events are still enabled
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <StopSequence+0xac>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <StopSequence+0x34>

		TIM1->EGR |= TIM_EGR_COMG; 						// Trigger commutation event
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <StopSequence+0xac>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <StopSequence+0xac>)
 80012c6:	f043 0320 	orr.w	r3, r3, #32
 80012ca:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened

	}

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <StopSequence+0xac>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <StopSequence+0xac>)
 80012d2:	f023 0320 	bic.w	r3, r3, #32
 80012d6:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <StopSequence+0xac>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <StopSequence+0xac>)
 80012de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012e2:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 80012e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012f2:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <StopSequence+0xb0>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a13      	ldr	r2, [pc, #76]	; (8001348 <StopSequence+0xb0>)
 80012fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012fe:	60d3      	str	r3, [r2, #12]

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 8001300:	4812      	ldr	r0, [pc, #72]	; (800134c <StopSequence+0xb4>)
 8001302:	f005 fd61 	bl	8006dc8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <StopSequence+0xa8>)
 8001308:	f005 fd5e 	bl	8006dc8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 800130c:	4810      	ldr	r0, [pc, #64]	; (8001350 <StopSequence+0xb8>)
 800130e:	f005 fd5b 	bl	8006dc8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 8001312:	2104      	movs	r1, #4
 8001314:	480e      	ldr	r0, [pc, #56]	; (8001350 <StopSequence+0xb8>)
 8001316:	f006 f853 	bl	80073c0 <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 800131a:	2100      	movs	r1, #0
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <StopSequence+0xb4>)
 800131e:	f005 fe81 	bl	8007024 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 8001322:	2104      	movs	r1, #4
 8001324:	4809      	ldr	r0, [pc, #36]	; (800134c <StopSequence+0xb4>)
 8001326:	f005 fe7d 	bl	8007024 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 800132a:	2108      	movs	r1, #8
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <StopSequence+0xb4>)
 800132e:	f005 fe79 	bl	8007024 <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <StopSequence+0xbc>)
 8001334:	2200      	movs	r2, #0
 8001336:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 8001338:	2300      	movs	r3, #0

}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20010508 	.word	0x20010508
 8001344:	40010000 	.word	0x40010000
 8001348:	40014000 	.word	0x40014000
 800134c:	200104c0 	.word	0x200104c0
 8001350:	20010628 	.word	0x20010628
 8001354:	20000090 	.word	0x20000090

08001358 <ChangePWM>:

HAL_StatusTypeDef ChangePWM (void) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0

	uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <ChangePWM+0x6c>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <ChangePWM+0x70>)
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	fb02 f303 	mul.w	r3, r2, r3
 800136c:	4a17      	ldr	r2, [pc, #92]	; (80013cc <ChangePWM+0x74>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	607b      	str	r3, [r7, #4]

	if (PWM >= TIM1->ARR - 60) {
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <ChangePWM+0x70>)
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	3b3c      	subs	r3, #60	; 0x3c
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	d303      	bcc.n	800138a <ChangePWM+0x32>
		PWM = TIM1->ARR - 60;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <ChangePWM+0x70>)
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	3b3c      	subs	r3, #60	; 0x3c
 8001388:	607b      	str	r3, [r7, #4]
	}

	TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <ChangePWM+0x70>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <ChangePWM+0x70>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <ChangePWM+0x70>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 800139c:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <ChangePWM+0x70>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <ChangePWM+0x70>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <ChangePWM+0x70>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <ChangePWM+0x70>)
 80013ae:	f023 0302 	bic.w	r3, r3, #2
 80013b2:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 80013b4:	2300      	movs	r3, #0

}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000090 	.word	0x20000090
 80013c8:	40010000 	.word	0x40010000
 80013cc:	51eb851f 	.word	0x51eb851f

080013d0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	463b      	mov	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <MX_ADC1_Init+0x9c>)
 80013e4:	4a22      	ldr	r2, [pc, #136]	; (8001470 <MX_ADC1_Init+0xa0>)
 80013e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_ADC1_Init+0x9c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_ADC1_Init+0x9c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_ADC1_Init+0x9c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_ADC1_Init+0x9c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_ADC1_Init+0x9c>)
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_ADC1_Init+0x9c>)
 800140a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_ADC1_Init+0x9c>)
 8001412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_ADC1_Init+0x9c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_ADC1_Init+0x9c>)
 8001420:	2201      	movs	r2, #1
 8001422:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_ADC1_Init+0x9c>)
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_ADC1_Init+0x9c>)
 800142e:	2201      	movs	r2, #1
 8001430:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001432:	480e      	ldr	r0, [pc, #56]	; (800146c <MX_ADC1_Init+0x9c>)
 8001434:	f001 fb0a 	bl	8002a4c <HAL_ADC_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800143e:	f000 fc41 	bl	8001cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001442:	2309      	movs	r3, #9
 8001444:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001446:	2301      	movs	r3, #1
 8001448:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800144a:	2301      	movs	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_ADC1_Init+0x9c>)
 8001454:	f001 fd2e 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800145e:	f000 fc31 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200102a4 	.word	0x200102a4
 8001470:	40012000 	.word	0x40012000

08001474 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_ADC_MspInit+0x8c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d12f      	bne.n	80014f6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_ADC_MspInit+0x90>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a19      	ldr	r2, [pc, #100]	; (8001504 <HAL_ADC_MspInit+0x90>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_ADC_MspInit+0x90>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_ADC_MspInit+0x90>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <HAL_ADC_MspInit+0x90>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_ADC_MspInit+0x90>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014ce:	2302      	movs	r3, #2
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d2:	2303      	movs	r3, #3
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <HAL_ADC_MspInit+0x94>)
 80014e2:	f002 f861 	bl	80035a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2012      	movs	r0, #18
 80014ec:	f001 fff5 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014f0:	2012      	movs	r0, #18
 80014f2:	f002 f80e 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40012000 	.word	0x40012000
 8001504:	40023800 	.word	0x40023800
 8001508:	40020400 	.word	0x40020400
 800150c:	00000000 	.word	0x00000000

08001510 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

	TotalCurrent -= Current[Ci];
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <HAL_ADC_ConvCpltCallback+0xf0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a39      	ldr	r2, [pc, #228]	; (8001604 <HAL_ADC_ConvCpltCallback+0xf4>)
 800151e:	8812      	ldrh	r2, [r2, #0]
 8001520:	4611      	mov	r1, r2
 8001522:	4a39      	ldr	r2, [pc, #228]	; (8001608 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001524:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	4a35      	ldr	r2, [pc, #212]	; (8001600 <HAL_ADC_ConvCpltCallback+0xf0>)
 800152c:	6013      	str	r3, [r2, #0]
	Current[Ci] = HAL_ADC_GetValue(&hadc1);
 800152e:	4837      	ldr	r0, [pc, #220]	; (800160c <HAL_ADC_ConvCpltCallback+0xfc>)
 8001530:	f001 fc9e 	bl	8002e70 <HAL_ADC_GetValue>
 8001534:	4601      	mov	r1, r0
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	b289      	uxth	r1, r1
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001540:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	TotalCurrent += Current[Ci];
 8001544:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_ADC_ConvCpltCallback+0xf8>)
 800154c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001550:	461a      	mov	r2, r3
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a29      	ldr	r2, [pc, #164]	; (8001600 <HAL_ADC_ConvCpltCallback+0xf0>)
 800155a:	6013      	str	r3, [r2, #0]

	Ci++;
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_ADC_ConvCpltCallback+0xf4>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001566:	801a      	strh	r2, [r3, #0]

	if ( Ci >= AvgSizeCur - 1 ) {
 8001568:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_ADC_ConvCpltCallback+0xf4>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001570:	4293      	cmp	r3, r2
 8001572:	d902      	bls.n	800157a <HAL_ADC_ConvCpltCallback+0x6a>
		Ci = 0;
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001576:	2200      	movs	r2, #0
 8001578:	801a      	strh	r2, [r3, #0]
	}

	float current = (3.3 * (TotalCurrent / AvgSizeCur)) / 40960 / 0.015;
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_ADC_ConvCpltCallback+0xf0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	0bdb      	lsrs	r3, r3, #15
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffc7 	bl	8000514 <__aeabi_ui2d>
 8001586:	a31a      	add	r3, pc, #104	; (adr r3, 80015f0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f83c 	bl	8000608 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_ADC_ConvCpltCallback+0x100>)
 800159e:	f7ff f95d 	bl	800085c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	a313      	add	r3, pc, #76	; (adr r3, 80015f8 <HAL_ADC_ConvCpltCallback+0xe8>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f954 	bl	800085c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fb1c 	bl	8000bf8 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]
	Registers[CurReg] = current * 1000;
 80015c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001614 <HAL_ADC_ConvCpltCallback+0x104>
 80015cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d4:	ee17 3a90 	vmov	r3, s15
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_ADC_ConvCpltCallback+0x108>)
 80015dc:	809a      	strh	r2, [r3, #4]

	Counter++;
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_ADC_ConvCpltCallback+0x10c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <HAL_ADC_ConvCpltCallback+0x10c>)
 80015e6:	6013      	str	r3, [r2, #0]

}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	66666666 	.word	0x66666666
 80015f4:	400a6666 	.word	0x400a6666
 80015f8:	eb851eb8 	.word	0xeb851eb8
 80015fc:	3f8eb851 	.word	0x3f8eb851
 8001600:	20000298 	.word	0x20000298
 8001604:	200002a0 	.word	0x200002a0
 8001608:	200002a4 	.word	0x200002a4
 800160c:	200102a4 	.word	0x200102a4
 8001610:	40e40000 	.word	0x40e40000
 8001614:	447a0000 	.word	0x447a0000
 8001618:	20000090 	.word	0x20000090
 800161c:	2000029c 	.word	0x2000029c

08001620 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b50      	ldr	r3, [pc, #320]	; (800177c <MX_GPIO_Init+0x15c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a4f      	ldr	r2, [pc, #316]	; (800177c <MX_GPIO_Init+0x15c>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b4d      	ldr	r3, [pc, #308]	; (800177c <MX_GPIO_Init+0x15c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b49      	ldr	r3, [pc, #292]	; (800177c <MX_GPIO_Init+0x15c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a48      	ldr	r2, [pc, #288]	; (800177c <MX_GPIO_Init+0x15c>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b46      	ldr	r3, [pc, #280]	; (800177c <MX_GPIO_Init+0x15c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b42      	ldr	r3, [pc, #264]	; (800177c <MX_GPIO_Init+0x15c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a41      	ldr	r2, [pc, #260]	; (800177c <MX_GPIO_Init+0x15c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <MX_GPIO_Init+0x15c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <MX_GPIO_Init+0x15c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a3a      	ldr	r2, [pc, #232]	; (800177c <MX_GPIO_Init+0x15c>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b38      	ldr	r3, [pc, #224]	; (800177c <MX_GPIO_Init+0x15c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ac:	4834      	ldr	r0, [pc, #208]	; (8001780 <MX_GPIO_Init+0x160>)
 80016ae:	f002 f8ff 	bl	80038b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b8:	4832      	ldr	r0, [pc, #200]	; (8001784 <MX_GPIO_Init+0x164>)
 80016ba:	f002 f8f9 	bl	80038b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	482a      	ldr	r0, [pc, #168]	; (8001780 <MX_GPIO_Init+0x160>)
 80016d8:	f001 ff66 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e2:	2303      	movs	r3, #3
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4823      	ldr	r0, [pc, #140]	; (8001780 <MX_GPIO_Init+0x160>)
 80016f2:	f001 ff59 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80016f6:	f649 03f0 	movw	r3, #39152	; 0x98f0
 80016fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	2303      	movs	r3, #3
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	481f      	ldr	r0, [pc, #124]	; (8001788 <MX_GPIO_Init+0x168>)
 800170c:	f001 ff4c 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9;
 8001710:	f240 2325 	movw	r3, #549	; 0x225
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001716:	2303      	movs	r3, #3
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4817      	ldr	r0, [pc, #92]	; (8001784 <MX_GPIO_Init+0x164>)
 8001726:	f001 ff3f 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4810      	ldr	r0, [pc, #64]	; (8001784 <MX_GPIO_Init+0x164>)
 8001744:	f001 ff30 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001748:	2310      	movs	r3, #16
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800174c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001752:	2302      	movs	r3, #2
 8001754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <MX_GPIO_Init+0x164>)
 800175e:	f001 ff23 	bl	80035a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	200a      	movs	r0, #10
 8001768:	f001 feb7 	bl	80034da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800176c:	200a      	movs	r0, #10
 800176e:	f001 fed0 	bl	8003512 <HAL_NVIC_EnableIRQ>

}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	; 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40020800 	.word	0x40020800
 8001784:	40020400 	.word	0x40020400
 8001788:	40020000 	.word	0x40020000

0800178c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_I2C1_Init+0x50>)
 8001792:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <MX_I2C1_Init+0x54>)
 8001794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_I2C1_Init+0x50>)
 8001798:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <MX_I2C1_Init+0x58>)
 800179a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_I2C1_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_I2C1_Init+0x50>)
 80017a4:	2220      	movs	r2, #32
 80017a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_I2C1_Init+0x50>)
 80017aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <MX_I2C1_Init+0x50>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_I2C1_Init+0x50>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <MX_I2C1_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_I2C1_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <MX_I2C1_Init+0x50>)
 80017ca:	f002 f8af 	bl	800392c <HAL_I2C_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017d4:	f000 fa76 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20010304 	.word	0x20010304
 80017e0:	40005400 	.word	0x40005400
 80017e4:	000186a0 	.word	0x000186a0

080017e8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_I2C2_Init+0x50>)
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <MX_I2C2_Init+0x54>)
 80017f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_I2C2_Init+0x50>)
 80017f4:	4a12      	ldr	r2, [pc, #72]	; (8001840 <MX_I2C2_Init+0x58>)
 80017f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_I2C2_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_I2C2_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_I2C2_Init+0x50>)
 8001806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <MX_I2C2_Init+0x50>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_I2C2_Init+0x50>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <MX_I2C2_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_I2C2_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_I2C2_Init+0x50>)
 8001826:	f002 f881 	bl	800392c <HAL_I2C_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001830:	f000 fa48 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20010358 	.word	0x20010358
 800183c:	40005800 	.word	0x40005800
 8001840:	000186a0 	.word	0x000186a0

08001844 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a42      	ldr	r2, [pc, #264]	; (800196c <HAL_I2C_MspInit+0x128>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d13c      	bne.n	80018e0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	4b41      	ldr	r3, [pc, #260]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a40      	ldr	r2, [pc, #256]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001882:	23c0      	movs	r3, #192	; 0xc0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001886:	2312      	movs	r3, #18
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188a:	2301      	movs	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001892:	2304      	movs	r3, #4
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4835      	ldr	r0, [pc, #212]	; (8001974 <HAL_I2C_MspInit+0x130>)
 800189e:	f001 fe83 	bl	80035a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a31      	ldr	r2, [pc, #196]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 80018ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	201f      	movs	r0, #31
 80018c4:	f001 fe09 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018c8:	201f      	movs	r0, #31
 80018ca:	f001 fe22 	bl	8003512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2020      	movs	r0, #32
 80018d4:	f001 fe01 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80018d8:	2020      	movs	r0, #32
 80018da:	f001 fe1a 	bl	8003512 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018de:	e041      	b.n	8001964 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a24      	ldr	r2, [pc, #144]	; (8001978 <HAL_I2C_MspInit+0x134>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d13c      	bne.n	8001964 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190c:	2312      	movs	r3, #18
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001910:	2301      	movs	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001918:	2304      	movs	r3, #4
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	4814      	ldr	r0, [pc, #80]	; (8001974 <HAL_I2C_MspInit+0x130>)
 8001924:	f001 fe40 	bl	80035a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001928:	2308      	movs	r3, #8
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192c:	2312      	movs	r3, #18
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001930:	2301      	movs	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001938:	2309      	movs	r3, #9
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4619      	mov	r1, r3
 8001942:	480c      	ldr	r0, [pc, #48]	; (8001974 <HAL_I2C_MspInit+0x130>)
 8001944:	f001 fe30 	bl	80035a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 8001952:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_I2C_MspInit+0x12c>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	bf00      	nop
 8001966:	3730      	adds	r7, #48	; 0x30
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40005400 	.word	0x40005400
 8001970:	40023800 	.word	0x40023800
 8001974:	40020400 	.word	0x40020400
 8001978:	40005800 	.word	0x40005800

0800197c <HAL_I2C_ListenCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

	// Once the transfer is complete start listening again.
	if (i2cHandle->Instance == I2C1) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_I2C_ListenCpltCallback+0x20>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d102      	bne.n	8001994 <HAL_I2C_ListenCpltCallback+0x18>
		HAL_I2C_EnableListen_IT (i2cHandle);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f002 fd1a 	bl	80043c8 <HAL_I2C_EnableListen_IT>
	}

}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40005400 	.word	0x40005400

080019a0 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef* i2cHandle, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	70fb      	strb	r3, [r7, #3]
 80019ac:	4613      	mov	r3, r2
 80019ae:	803b      	strh	r3, [r7, #0]

	if (i2cHandle->Instance == I2C1) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <HAL_I2C_AddrCallback+0x58>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d11a      	bne.n	80019f0 <HAL_I2C_AddrCallback+0x50>
		if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10d      	bne.n	80019dc <HAL_I2C_AddrCallback+0x3c>

			// Reset number of recieved bytes and start recieving the first byte.
			RxCount = 0;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_I2C_AddrCallback+0x5c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_FIRST_FRAME);
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_I2C_AddrCallback+0x5c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_I2C_AddrCallback+0x60>)
 80019ce:	18d1      	adds	r1, r2, r3
 80019d0:	2301      	movs	r3, #1
 80019d2:	2201      	movs	r2, #1
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f002 fc84 	bl	80042e2 <HAL_I2C_Slave_Seq_Receive_IT>

		}

	}

}
 80019da:	e009      	b.n	80019f0 <HAL_I2C_AddrCallback+0x50>
			ret = HAL_I2C_Slave_Seq_Transmit_IT(i2cHandle, (uint8_t *) Registers, RegSize * 2, I2C_FIRST_FRAME);
 80019dc:	2301      	movs	r3, #1
 80019de:	220a      	movs	r2, #10
 80019e0:	4908      	ldr	r1, [pc, #32]	; (8001a04 <HAL_I2C_AddrCallback+0x64>)
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f002 fc0a 	bl	80041fc <HAL_I2C_Slave_Seq_Transmit_IT>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_I2C_AddrCallback+0x68>)
 80019ee:	701a      	strb	r2, [r3, #0]
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40005400 	.word	0x40005400
 80019fc:	200102ed 	.word	0x200102ed
 8001a00:	200102f0 	.word	0x200102f0
 8001a04:	20000090 	.word	0x20000090
 8001a08:	200103b0 	.word	0x200103b0

08001a0c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d128      	bne.n	8001a70 <HAL_I2C_SlaveRxCpltCallback+0x64>

		RxCount++;
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a28:	701a      	strb	r2, [r3, #0]

		if ( RxCount < RxSize ) {
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d818      	bhi.n	8001a64 <HAL_I2C_SlaveRxCpltCallback+0x58>

			// If the number of recieved bytes is less than the total keep recieving and otherwise recieve te last byte.
			if (RxCount == RxSize - 1) {
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d10a      	bne.n	8001a50 <HAL_I2C_SlaveRxCpltCallback+0x44>
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_LAST_FRAME);
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001a42:	18d1      	adds	r1, r2, r3
 8001a44:	2320      	movs	r3, #32
 8001a46:	2201      	movs	r2, #1
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f002 fc4a 	bl	80042e2 <HAL_I2C_Slave_Seq_Receive_IT>
 8001a4e:	e009      	b.n	8001a64 <HAL_I2C_SlaveRxCpltCallback+0x58>
			} else {
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_NEXT_FRAME);
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001a58:	18d1      	adds	r1, r2, r3
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f002 fc3f 	bl	80042e2 <HAL_I2C_Slave_Seq_Receive_IT>
			}
		}

		// Once the maximum of recievable bytes has been reached start processing the data.
		if ( RxCount == RxSize) {
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d101      	bne.n	8001a70 <HAL_I2C_SlaveRxCpltCallback+0x64>
			ProcessData();
 8001a6c:	f000 f83c 	bl	8001ae8 <ProcessData>
		}

	}

}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	200102ed 	.word	0x200102ed
 8001a80:	200102f0 	.word	0x200102f0

08001a84 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef* i2cHandle) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <HAL_I2C_ErrorCallback+0x58>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d11d      	bne.n	8001ad2 <HAL_I2C_ErrorCallback+0x4e>

		if ( HAL_I2C_GetError (i2cHandle) == 4) {
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f002 fefa 	bl	8004890 <HAL_I2C_GetError>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d114      	bne.n	8001acc <HAL_I2C_ErrorCallback+0x48>

			__HAL_I2C_CLEAR_FLAG (i2cHandle, I2C_FLAG_AF); 	// Clear AF flag
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aaa:	615a      	str	r2, [r3, #20]

			if ( TxCount == 0) { 							// Error while recieving
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_I2C_ErrorCallback+0x5c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_I2C_ErrorCallback+0x3c>
				I2C_Error = HAL_ERROR;						// Custom error to know if an error has occured. It is not cleared anywhere.
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_I2C_ErrorCallback+0x60>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
				ProcessData();								// Error 4 is an unexpected termination of the transfer so the recieved data can still be used.
 8001aba:	f000 f815 	bl	8001ae8 <ProcessData>
 8001abe:	e005      	b.n	8001acc <HAL_I2C_ErrorCallback+0x48>
			} else { 										// Error while transmitting, this is ignored
				TxCount--;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_I2C_ErrorCallback+0x5c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_I2C_ErrorCallback+0x5c>)
 8001aca:	701a      	strb	r2, [r3, #0]
			}

		}

		// Start listening again since an error will most likely have terminated the transfer.
		HAL_I2C_EnableListen_IT(i2cHandle);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f002 fc7b 	bl	80043c8 <HAL_I2C_EnableListen_IT>

	}

}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	200102ec 	.word	0x200102ec
 8001ae4:	20010300 	.word	0x20010300

08001ae8 <ProcessData>:

void ProcessData (void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0

	// Initialize some variables
	StartReg = RxData[0]; 			// Start address of registers to be written
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <ProcessData+0xac>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <ProcessData+0xb0>)
 8001af6:	601a      	str	r2, [r3, #0]
	NumReg = RxCount; 				// Number of registers to be written
 8001af8:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <ProcessData+0xb4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <ProcessData+0xb8>)
 8001b00:	601a      	str	r2, [r3, #0]
	EndReg = StartReg + NumReg - 2; // Last register to be written
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <ProcessData+0xb0>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <ProcessData+0xb8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b02      	subs	r3, #2
 8001b0e:	4a25      	ldr	r2, [pc, #148]	; (8001ba4 <ProcessData+0xbc>)
 8001b10:	6013      	str	r3, [r2, #0]

	// If the last register to be writen is larger than the size of the register call the error handler
	if (EndReg > RegSize) {
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <ProcessData+0xbc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	dd01      	ble.n	8001b1e <ProcessData+0x36>
		Error_Handler();
 8001b1a:	f000 f8d3 	bl	8001cc4 <Error_Handler>
	}

	// Write data into the register using a for loop
	for (int i = 2; i < NumReg; i++) {
 8001b1e:	2302      	movs	r3, #2
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	e00f      	b.n	8001b44 <ProcessData+0x5c>
		Registers[StartReg++] = RxData[i];
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <ProcessData+0xac>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	7818      	ldrb	r0, [r3, #0]
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <ProcessData+0xb0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	4919      	ldr	r1, [pc, #100]	; (8001b98 <ProcessData+0xb0>)
 8001b34:	600a      	str	r2, [r1, #0]
 8001b36:	b281      	uxth	r1, r0
 8001b38:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <ProcessData+0xc0>)
 8001b3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 2; i < NumReg; i++) {
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3301      	adds	r3, #1
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <ProcessData+0xb8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dbea      	blt.n	8001b24 <ProcessData+0x3c>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] == 0) {
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <ProcessData+0xc0>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <ProcessData+0x7a>
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <ProcessData+0xc0>)
 8001b58:	88db      	ldrh	r3, [r3, #6]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <ProcessData+0x7a>
		StartupSequence();
 8001b5e:	f7ff fa5f 	bl	8001020 <StartupSequence>
	}

	// If the PWM is 0 and the motor is still turning shutdown
	if ( Registers[PWMReg] == 0 && Registers[RPMReg] > 0 ) {
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <ProcessData+0xc0>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <ProcessData+0x8e>
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <ProcessData+0xc0>)
 8001b6c:	88db      	ldrh	r3, [r3, #6]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <ProcessData+0x8e>
		StopSequence();
 8001b72:	f7ff fb91 	bl	8001298 <StopSequence>
	}

	// Call some functions
	ChangePWM(); 				// Update PWM values
 8001b76:	f7ff fbef 	bl	8001358 <ChangePWM>
	memset(RxData, 0, RxSize); 	// Empty the RxData array for next transmission
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <ProcessData+0xac>)
 8001b80:	f007 fba7 	bl	80092d2 <memset>

	// Activate the buzzer everytime a transfer has been completed
	Buzzer = 1;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <ProcessData+0xc4>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200102f0 	.word	0x200102f0
 8001b98:	200102f4 	.word	0x200102f4
 8001b9c:	200102ed 	.word	0x200102ed
 8001ba0:	200102f8 	.word	0x200102f8
 8001ba4:	200102fc 	.word	0x200102fc
 8001ba8:	20000090 	.word	0x20000090
 8001bac:	200103ac 	.word	0x200103ac

08001bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb4:	f000 fed8 	bl	8002968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb8:	f000 f81a 	bl	8001bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bbc:	f7ff fd30 	bl	8001620 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001bc0:	f000 fac4 	bl	800214c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bc4:	f000 fb7c 	bl	80022c0 <MX_TIM2_Init>
  MX_TIM9_Init();
 8001bc8:	f000 fcc6 	bl	8002558 <MX_TIM9_Init>
  MX_I2C1_Init();
 8001bcc:	f7ff fdde 	bl	800178c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001bd0:	f7ff fbfe 	bl	80013d0 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001bd4:	f7ff fe08 	bl	80017e8 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001bd8:	f000 fc12 	bl	8002400 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001bdc:	f000 fbba 	bl	8002354 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001be0:	f000 fc62 	bl	80024a8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	HAL_I2C_EnableListen_IT (&hi2c1);
 8001be4:	4801      	ldr	r0, [pc, #4]	; (8001bec <main+0x3c>)
 8001be6:	f002 fbef 	bl	80043c8 <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <main+0x3a>
 8001bec:	20010304 	.word	0x20010304

08001bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b094      	sub	sp, #80	; 0x50
 8001bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf6:	f107 0320 	add.w	r3, r7, #32
 8001bfa:	2230      	movs	r2, #48	; 0x30
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f007 fb67 	bl	80092d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <SystemClock_Config+0xcc>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a27      	ldr	r2, [pc, #156]	; (8001cbc <SystemClock_Config+0xcc>)
 8001c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <SystemClock_Config+0xcc>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <SystemClock_Config+0xd0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <SystemClock_Config+0xd0>)
 8001c3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <SystemClock_Config+0xd0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c56:	2302      	movs	r3, #2
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c60:	2319      	movs	r3, #25
 8001c62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c64:	23c0      	movs	r3, #192	; 0xc0
 8001c66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 fb9d 	bl	80063b4 <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c80:	f000 f820 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c84:	230f      	movs	r3, #15
 8001c86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	2103      	movs	r1, #3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fdfe 	bl	80068a4 <HAL_RCC_ClockConfig>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cae:	f000 f809 	bl	8001cc4 <Error_Handler>
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3750      	adds	r7, #80	; 0x50
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <Error_Handler+0x8>
	...

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <HAL_MspInit+0x4c>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_MspInit+0x4c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_MspInit+0x4c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <NMI_Handler+0x4>

08001d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <MemManage_Handler+0x4>

08001d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <BusFault_Handler+0x4>

08001d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <UsageFault_Handler+0x4>

08001d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f000 fe4e 	bl	8002a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	Buzzer = 1;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <EXTI4_IRQHandler+0x14>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d7e:	2010      	movs	r0, #16
 8001d80:	f001 fdb0 	bl	80038e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200103ac 	.word	0x200103ac

08001d8c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <ADC_IRQHandler+0x10>)
 8001d92:	f000 ff5d 	bl	8002c50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200102a4 	.word	0x200102a4

08001da0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d03f      	beq.n	8001e30 <TIM1_BRK_TIM9_IRQHandler+0x90>

		Total -= RPM[i];
 8001db0:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2a      	ldr	r2, [pc, #168]	; (8001e60 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001db6:	8812      	ldrh	r2, [r2, #0]
 8001db8:	4611      	mov	r1, r2
 8001dba:	4a2a      	ldr	r2, [pc, #168]	; (8001e64 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001dbc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001dc4:	6013      	str	r3, [r2, #0]
		RPM[i] = RPMConst / (TIM9->CCR2);
 8001dc6:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <TIM1_BRK_TIM9_IRQHandler+0xc8>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dce:	fbb2 f1f3 	udiv	r1, r2, r3
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	b289      	uxth	r1, r1
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001ddc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Total += RPM[i];
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001de8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001df6:	6013      	str	r3, [r2, #0]

		i++;
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001e02:	801a      	strh	r2, [r3, #0]

		if ( i >= AvgSize - 1 ) {
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	2b7e      	cmp	r3, #126	; 0x7e
 8001e0a:	d902      	bls.n	8001e12 <TIM1_BRK_TIM9_IRQHandler+0x72>
			i = 0;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	801a      	strh	r2, [r3, #0]
		}

		Registers[RPMReg] = Total / AvgSize;
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	09db      	lsrs	r3, r3, #7
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001e1c:	80da      	strh	r2, [r3, #6]

		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001e20:	88db      	ldrh	r3, [r3, #6]
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d90e      	bls.n	8001e48 <TIM1_BRK_TIM9_IRQHandler+0xa8>
			StopSequence();
 8001e2a:	f7ff fa35 	bl	8001298 <StopSequence>
 8001e2e:	e00b      	b.n	8001e48 <TIM1_BRK_TIM9_IRQHandler+0xa8>
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	80da      	strh	r2, [r3, #6]
		Total = 0;
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
		memset(RPM, 0, AvgSize * 2);
 8001e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e40:	2100      	movs	r1, #0
 8001e42:	4808      	ldr	r0, [pc, #32]	; (8001e64 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001e44:	f007 fa45 	bl	80092d2 <memset>
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <TIM1_BRK_TIM9_IRQHandler+0xd0>)
 8001e4a:	f005 fb67 	bl	800751c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001e4e:	4809      	ldr	r0, [pc, #36]	; (8001e74 <TIM1_BRK_TIM9_IRQHandler+0xd4>)
 8001e50:	f005 fb64 	bl	800751c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40014000 	.word	0x40014000
 8001e5c:	200103b4 	.word	0x200103b4
 8001e60:	200104b8 	.word	0x200104b8
 8001e64:	200103b8 	.word	0x200103b8
 8001e68:	20000294 	.word	0x20000294
 8001e6c:	20000090 	.word	0x20000090
 8001e70:	200104c0 	.word	0x200104c0
 8001e74:	20010628 	.word	0x20010628

08001e78 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation (); // Set next Commutation states
 8001e7c:	f7ff f88a 	bl	8000f94 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 				// Reset COMIF in SR register
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001e86:	f023 0320 	bic.w	r3, r3, #32
 8001e8a:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e8c:	4803      	ldr	r0, [pc, #12]	; (8001e9c <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8001e8e:	f005 fb45 	bl	800751c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	200104c0 	.word	0x200104c0

08001ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <TIM2_IRQHandler+0x20>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <TIM2_IRQHandler+0x24>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <TIM2_IRQHandler+0x24>)
 8001eb0:	f043 0320 	orr.w	r3, r3, #32
 8001eb4:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eb6:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <TIM2_IRQHandler+0x28>)
 8001eb8:	f005 fb30 	bl	800751c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40014000 	.word	0x40014000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	20010508 	.word	0x20010508

08001ecc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <I2C1_EV_IRQHandler+0x10>)
 8001ed2:	f002 faaf 	bl	8004434 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20010304 	.word	0x20010304

08001ee0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <I2C1_ER_IRQHandler+0x10>)
 8001ee6:	f002 fbf8 	bl	80046da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20010304 	.word	0x20010304

08001ef4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM5_IRQn 0 */

	uint8_t buff[2];
	float Temp = 0;
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]

	buff[0] = 0x05;
 8001f00:	2305      	movs	r3, #5
 8001f02:	703b      	strb	r3, [r7, #0]
	buff[1] = 0x00;
 8001f04:	2300      	movs	r3, #0
 8001f06:	707b      	strb	r3, [r7, #1]

	ret = HAL_I2C_Master_Transmit(&hi2c2, MCP9808_ADDR << 1, buff, 1, HAL_MAX_DELAY);
 8001f08:	463a      	mov	r2, r7
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2301      	movs	r3, #1
 8001f12:	2130      	movs	r1, #48	; 0x30
 8001f14:	481c      	ldr	r0, [pc, #112]	; (8001f88 <TIM5_IRQHandler+0x94>)
 8001f16:	f001 fe4d 	bl	8003bb4 <HAL_I2C_Master_Transmit>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <TIM5_IRQHandler+0x98>)
 8001f20:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Receive(&hi2c2, MCP9808_ADDR << 1, buff, 2, HAL_MAX_DELAY);
 8001f22:	463a      	mov	r2, r7
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	2130      	movs	r1, #48	; 0x30
 8001f2e:	4816      	ldr	r0, [pc, #88]	; (8001f88 <TIM5_IRQHandler+0x94>)
 8001f30:	f001 ff3e 	bl	8003db0 <HAL_I2C_Master_Receive>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <TIM5_IRQHandler+0x98>)
 8001f3a:	701a      	strb	r2, [r3, #0]

	Temp = ((((int16_t)buff[0] << 11) + ((int16_t)buff[1] << 3)) >> 3) / 1600.0;
 8001f3c:	783b      	ldrb	r3, [r7, #0]
 8001f3e:	02da      	lsls	r2, r3, #11
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	10db      	asrs	r3, r3, #3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe faf3 	bl	8000534 <__aeabi_i2d>
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <TIM5_IRQHandler+0x9c>)
 8001f54:	f7fe fc82 	bl	800085c <__aeabi_ddiv>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe fe4a 	bl	8000bf8 <__aeabi_d2f>
 8001f64:	4603      	mov	r3, r0
 8001f66:	607b      	str	r3, [r7, #4]
	Registers[TempReg] = Temp;
 8001f68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f70:	ee17 3a90 	vmov	r3, s15
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <TIM5_IRQHandler+0xa0>)
 8001f78:	811a      	strh	r2, [r3, #8]

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f7a:	4807      	ldr	r0, [pc, #28]	; (8001f98 <TIM5_IRQHandler+0xa4>)
 8001f7c:	f005 face 	bl	800751c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20010358 	.word	0x20010358
 8001f8c:	200103b0 	.word	0x200103b0
 8001f90:	40990000 	.word	0x40990000
 8001f94:	20000090 	.word	0x20000090
 8001f98:	200105e0 	.word	0x200105e0

08001f9c <_getpid>:
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_kill>:
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	f007 f9df 	bl	8009378 <__errno>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2216      	movs	r2, #22
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_exit>:
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ffe7 	bl	8001fac <_kill>
 8001fde:	e7fe      	b.n	8001fde <_exit+0x12>

08001fe0 <_read>:
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e00a      	b.n	8002008 <_read+0x28>
 8001ff2:	f3af 8000 	nop.w
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbf0      	blt.n	8001ff2 <_read+0x12>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_write>:
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e009      	b.n	8002040 <_write+0x26>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	60ba      	str	r2, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f3af 8000 	nop.w
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf1      	blt.n	800202c <_write+0x12>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_close>:
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_fstat>:
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	2300      	movs	r3, #0
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_isatty>:
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	2301      	movs	r3, #1
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_lseek>:
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	2300      	movs	r3, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <_sbrk>:
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <_sbrk+0x5c>)
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <_sbrk+0x60>)
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_sbrk+0x22>
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <_sbrk+0x64>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <_sbrk+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d207      	bcs.n	80020fc <_sbrk+0x40>
 80020ec:	f007 f944 	bl	8009378 <__errno>
 80020f0:	4603      	mov	r3, r0
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020fa:	e009      	b.n	8002110 <_sbrk+0x54>
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <_sbrk+0x64>)
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20020000 	.word	0x20020000
 800211c:	00000400 	.word	0x00000400
 8002120:	200104bc 	.word	0x200104bc
 8002124:	200107c0 	.word	0x200107c0

08002128 <SystemInit>:
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <SystemInit+0x20>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <SystemInit+0x20>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b096      	sub	sp, #88	; 0x58
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002152:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002162:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800216c:	f107 0320 	add.w	r3, r7, #32
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
 800217c:	615a      	str	r2, [r3, #20]
 800217e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002180:	463b      	mov	r3, r7
 8002182:	2220      	movs	r2, #32
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f007 f8a3 	bl	80092d2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800218c:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <MX_TIM1_Init+0x16c>)
 800218e:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <MX_TIM1_Init+0x170>)
 8002190:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <MX_TIM1_Init+0x16c>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002198:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <MX_TIM1_Init+0x16c>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021a0:	f240 727f 	movw	r2, #1919	; 0x77f
 80021a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a6:	4b44      	ldr	r3, [pc, #272]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021ac:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021b8:	483f      	ldr	r0, [pc, #252]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021ba:	f004 fd53 	bl	8006c64 <HAL_TIM_Base_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80021c4:	f7ff fd7e 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021c8:	483b      	ldr	r0, [pc, #236]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021ca:	f004 fe2c 	bl	8006e26 <HAL_TIM_PWM_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80021d4:	f7ff fd76 	bl	8001cc4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80021d8:	2304      	movs	r3, #4
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80021dc:	2300      	movs	r3, #0
 80021de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80021e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021e4:	4619      	mov	r1, r3
 80021e6:	4834      	ldr	r0, [pc, #208]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021e8:	f005 fbfe 	bl	80079e8 <HAL_TIM_SlaveConfigSynchro>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80021f2:	f7ff fd67 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002202:	4619      	mov	r1, r3
 8002204:	482c      	ldr	r0, [pc, #176]	; (80022b8 <MX_TIM1_Init+0x16c>)
 8002206:	f006 fa25 	bl	8008654 <HAL_TIMEx_MasterConfigSynchronization>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002210:	f7ff fd58 	bl	8001cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002214:	2360      	movs	r3, #96	; 0x60
 8002216:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002230:	f107 0320 	add.w	r3, r7, #32
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	481f      	ldr	r0, [pc, #124]	; (80022b8 <MX_TIM1_Init+0x16c>)
 800223a:	f005 fb13 	bl	8007864 <HAL_TIM_PWM_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002244:	f7ff fd3e 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002248:	f107 0320 	add.w	r3, r7, #32
 800224c:	2204      	movs	r2, #4
 800224e:	4619      	mov	r1, r3
 8002250:	4819      	ldr	r0, [pc, #100]	; (80022b8 <MX_TIM1_Init+0x16c>)
 8002252:	f005 fb07 	bl	8007864 <HAL_TIM_PWM_ConfigChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800225c:	f7ff fd32 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002260:	f107 0320 	add.w	r3, r7, #32
 8002264:	2208      	movs	r2, #8
 8002266:	4619      	mov	r1, r3
 8002268:	4813      	ldr	r0, [pc, #76]	; (80022b8 <MX_TIM1_Init+0x16c>)
 800226a:	f005 fafb 	bl	8007864 <HAL_TIM_PWM_ConfigChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002274:	f7ff fd26 	bl	8001cc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800228c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002290:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002296:	463b      	mov	r3, r7
 8002298:	4619      	mov	r1, r3
 800229a:	4807      	ldr	r0, [pc, #28]	; (80022b8 <MX_TIM1_Init+0x16c>)
 800229c:	f006 fa48 	bl	8008730 <HAL_TIMEx_ConfigBreakDeadTime>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80022a6:	f7ff fd0d 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022aa:	4803      	ldr	r0, [pc, #12]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80022ac:	f000 fad6 	bl	800285c <HAL_TIM_MspPostInit>

}
 80022b0:	bf00      	nop
 80022b2:	3758      	adds	r7, #88	; 0x58
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	200104c0 	.word	0x200104c0
 80022bc:	40010000 	.word	0x40010000

080022c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <MX_TIM2_Init+0x90>)
 80022de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <MX_TIM2_Init+0x90>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <MX_TIM2_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <MX_TIM2_Init+0x90>)
 80022f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <MX_TIM2_Init+0x90>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <MX_TIM2_Init+0x90>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	4619      	mov	r1, r3
 800231a:	480d      	ldr	r0, [pc, #52]	; (8002350 <MX_TIM2_Init+0x90>)
 800231c:	f006 f838 	bl	8008390 <HAL_TIMEx_HallSensor_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002326:	f7ff fccd 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800232a:	2350      	movs	r3, #80	; 0x50
 800232c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002332:	463b      	mov	r3, r7
 8002334:	4619      	mov	r1, r3
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <MX_TIM2_Init+0x90>)
 8002338:	f006 f98c 	bl	8008654 <HAL_TIMEx_MasterConfigSynchronization>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002342:	f7ff fcbf 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20010508 	.word	0x20010508

08002354 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235a:	f107 0320 	add.w	r3, r7, #32
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	615a      	str	r2, [r3, #20]
 8002374:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <MX_TIM3_Init+0xa4>)
 8002378:	4a20      	ldr	r2, [pc, #128]	; (80023fc <MX_TIM3_Init+0xa8>)
 800237a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800237c:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <MX_TIM3_Init+0xa4>)
 800237e:	2200      	movs	r2, #0
 8002380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <MX_TIM3_Init+0xa4>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 959;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <MX_TIM3_Init+0xa4>)
 800238a:	f240 32bf 	movw	r2, #959	; 0x3bf
 800238e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <MX_TIM3_Init+0xa4>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <MX_TIM3_Init+0xa4>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800239c:	4816      	ldr	r0, [pc, #88]	; (80023f8 <MX_TIM3_Init+0xa4>)
 800239e:	f004 fd42 	bl	8006e26 <HAL_TIM_PWM_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80023a8:	f7ff fc8c 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023ac:	2320      	movs	r3, #32
 80023ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023b4:	f107 0320 	add.w	r3, r7, #32
 80023b8:	4619      	mov	r1, r3
 80023ba:	480f      	ldr	r0, [pc, #60]	; (80023f8 <MX_TIM3_Init+0xa4>)
 80023bc:	f006 f94a 	bl	8008654 <HAL_TIMEx_MasterConfigSynchronization>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80023c6:	f7ff fc7d 	bl	8001cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ca:	2360      	movs	r3, #96	; 0x60
 80023cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	2200      	movs	r2, #0
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_TIM3_Init+0xa4>)
 80023e2:	f005 fa3f 	bl	8007864 <HAL_TIM_PWM_ConfigChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80023ec:	f7ff fc6a 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	; 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20010550 	.word	0x20010550
 80023fc:	40000400 	.word	0x40000400

08002400 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002406:	f107 0310 	add.w	r3, r7, #16
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002410:	463b      	mov	r3, r7
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800241c:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <MX_TIM4_Init+0xa0>)
 800241e:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <MX_TIM4_Init+0xa4>)
 8002420:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002422:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <MX_TIM4_Init+0xa0>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002434:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <MX_TIM4_Init+0xa0>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002442:	4817      	ldr	r0, [pc, #92]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002444:	f004 fe52 	bl	80070ec <HAL_TIM_IC_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800244e:	f7ff fc39 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800245a:	f107 0310 	add.w	r3, r7, #16
 800245e:	4619      	mov	r1, r3
 8002460:	480f      	ldr	r0, [pc, #60]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002462:	f006 f8f7 	bl	8008654 <HAL_TIMEx_MasterConfigSynchronization>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800246c:	f7ff fc2a 	bl	8001cc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002470:	2300      	movs	r3, #0
 8002472:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002474:	2301      	movs	r3, #1
 8002476:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002480:	463b      	mov	r3, r7
 8002482:	2208      	movs	r2, #8
 8002484:	4619      	mov	r1, r3
 8002486:	4806      	ldr	r0, [pc, #24]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002488:	f005 f950 	bl	800772c <HAL_TIM_IC_ConfigChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002492:	f7ff fc17 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20010598 	.word	0x20010598
 80024a4:	40000800 	.word	0x40000800

080024a8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ae:	f107 0320 	add.w	r3, r7, #32
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	615a      	str	r2, [r3, #20]
 80024c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <MX_TIM5_Init+0xa4>)
 80024cc:	4a20      	ldr	r2, [pc, #128]	; (8002550 <MX_TIM5_Init+0xa8>)
 80024ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100;
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <MX_TIM5_Init+0xa4>)
 80024d2:	2264      	movs	r2, #100	; 0x64
 80024d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <MX_TIM5_Init+0xa4>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 960000;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <MX_TIM5_Init+0xa4>)
 80024de:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <MX_TIM5_Init+0xac>)
 80024e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	; (800254c <MX_TIM5_Init+0xa4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <MX_TIM5_Init+0xa4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80024ee:	4817      	ldr	r0, [pc, #92]	; (800254c <MX_TIM5_Init+0xa4>)
 80024f0:	f004 fc99 	bl	8006e26 <HAL_TIM_PWM_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80024fa:	f7ff fbe3 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002506:	f107 0320 	add.w	r3, r7, #32
 800250a:	4619      	mov	r1, r3
 800250c:	480f      	ldr	r0, [pc, #60]	; (800254c <MX_TIM5_Init+0xa4>)
 800250e:	f006 f8a1 	bl	8008654 <HAL_TIMEx_MasterConfigSynchronization>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002518:	f7ff fbd4 	bl	8001cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251c:	2360      	movs	r3, #96	; 0x60
 800251e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2200      	movs	r2, #0
 8002530:	4619      	mov	r1, r3
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <MX_TIM5_Init+0xa4>)
 8002534:	f005 f996 	bl	8007864 <HAL_TIM_PWM_ConfigChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800253e:	f7ff fbc1 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	; 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200105e0 	.word	0x200105e0
 8002550:	40000c00 	.word	0x40000c00
 8002554:	000ea600 	.word	0x000ea600

08002558 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800255e:	463b      	mov	r3, r7
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <MX_TIM9_Init+0x78>)
 800256c:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <MX_TIM9_Init+0x7c>)
 800256e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <MX_TIM9_Init+0x78>)
 8002572:	f240 52db 	movw	r2, #1499	; 0x5db
 8002576:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <MX_TIM9_Init+0x78>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <MX_TIM9_Init+0x78>)
 8002580:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002584:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <MX_TIM9_Init+0x78>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <MX_TIM9_Init+0x78>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8002592:	480f      	ldr	r0, [pc, #60]	; (80025d0 <MX_TIM9_Init+0x78>)
 8002594:	f004 fdaa 	bl	80070ec <HAL_TIM_IC_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800259e:	f7ff fb91 	bl	8001cc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025a2:	2300      	movs	r3, #0
 80025a4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025a6:	2301      	movs	r3, #1
 80025a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 80025ae:	2302      	movs	r3, #2
 80025b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025b2:	463b      	mov	r3, r7
 80025b4:	2204      	movs	r2, #4
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_TIM9_Init+0x78>)
 80025ba:	f005 f8b7 	bl	800772c <HAL_TIM_IC_ConfigChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 80025c4:	f7ff fb7e 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20010628 	.word	0x20010628
 80025d4:	40014000 	.word	0x40014000

080025d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_TIM_Base_MspInit+0x58>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d11d      	bne.n	8002626 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_TIM_Base_MspInit+0x5c>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a10      	ldr	r2, [pc, #64]	; (8002634 <HAL_TIM_Base_MspInit+0x5c>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_TIM_Base_MspInit+0x5c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2018      	movs	r0, #24
 800260c:	f000 ff65 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002610:	2018      	movs	r0, #24
 8002612:	f000 ff7e 	bl	8003512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	201a      	movs	r0, #26
 800261c:	f000 ff5d 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002620:	201a      	movs	r0, #26
 8002622:	f000 ff76 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40010000 	.word	0x40010000
 8002634:	40023800 	.word	0x40023800

08002638 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002658:	d133      	bne.n	80026c2 <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a13      	ldr	r2, [pc, #76]	; (80026cc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002692:	2307      	movs	r3, #7
 8002694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800269a:	2301      	movs	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026a2:	2301      	movs	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	4808      	ldr	r0, [pc, #32]	; (80026d0 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 80026ae:	f000 ff7b 	bl	80035a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	201c      	movs	r0, #28
 80026b8:	f000 ff0f 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026bc:	201c      	movs	r0, #28
 80026be:	f000 ff28 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	; 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020000 	.word	0x40020000

080026d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a18      	ldr	r2, [pc, #96]	; (8002744 <HAL_TIM_PWM_MspInit+0x70>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_TIM_PWM_MspInit+0x74>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_TIM_PWM_MspInit+0x74>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_TIM_PWM_MspInit+0x74>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002702:	e01a      	b.n	800273a <HAL_TIM_PWM_MspInit+0x66>
  else if(tim_pwmHandle->Instance==TIM5)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a10      	ldr	r2, [pc, #64]	; (800274c <HAL_TIM_PWM_MspInit+0x78>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d115      	bne.n	800273a <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_TIM_PWM_MspInit+0x74>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <HAL_TIM_PWM_MspInit+0x74>)
 8002718:	f043 0308 	orr.w	r3, r3, #8
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_TIM_PWM_MspInit+0x74>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2100      	movs	r1, #0
 800272e:	2032      	movs	r0, #50	; 0x32
 8002730:	f000 fed3 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002734:	2032      	movs	r0, #50	; 0x32
 8002736:	f000 feec 	bl	8003512 <HAL_NVIC_EnableIRQ>
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40000400 	.word	0x40000400
 8002748:	40023800 	.word	0x40023800
 800274c:	40000c00 	.word	0x40000c00

08002750 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a36      	ldr	r2, [pc, #216]	; (8002848 <HAL_TIM_IC_MspInit+0xf8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d12d      	bne.n	80027ce <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	4b35      	ldr	r3, [pc, #212]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a34      	ldr	r2, [pc, #208]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a2d      	ldr	r2, [pc, #180]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027bc:	2302      	movs	r3, #2
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	4619      	mov	r1, r3
 80027c6:	4822      	ldr	r0, [pc, #136]	; (8002850 <HAL_TIM_IC_MspInit+0x100>)
 80027c8:	f000 feee 	bl	80035a8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80027cc:	e038      	b.n	8002840 <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM9)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a20      	ldr	r2, [pc, #128]	; (8002854 <HAL_TIM_IC_MspInit+0x104>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d133      	bne.n	8002840 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	4a1a      	ldr	r2, [pc, #104]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e6:	6453      	str	r3, [r2, #68]	; 0x44
 80027e8:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	4a13      	ldr	r2, [pc, #76]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6313      	str	r3, [r2, #48]	; 0x30
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_TIM_IC_MspInit+0xfc>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002810:	2308      	movs	r3, #8
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002818:	2301      	movs	r3, #1
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002820:	2303      	movs	r3, #3
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	480b      	ldr	r0, [pc, #44]	; (8002858 <HAL_TIM_IC_MspInit+0x108>)
 800282c:	f000 febc 	bl	80035a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002830:	2200      	movs	r2, #0
 8002832:	2100      	movs	r1, #0
 8002834:	2018      	movs	r0, #24
 8002836:	f000 fe50 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800283a:	2018      	movs	r0, #24
 800283c:	f000 fe69 	bl	8003512 <HAL_NVIC_EnableIRQ>
}
 8002840:	bf00      	nop
 8002842:	3730      	adds	r7, #48	; 0x30
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40000800 	.word	0x40000800
 800284c:	40023800 	.word	0x40023800
 8002850:	40020400 	.word	0x40020400
 8002854:	40014000 	.word	0x40014000
 8002858:	40020000 	.word	0x40020000

0800285c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a22      	ldr	r2, [pc, #136]	; (8002904 <HAL_TIM_MspPostInit+0xa8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d13d      	bne.n	80028fa <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <HAL_TIM_MspPostInit+0xac>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a20      	ldr	r2, [pc, #128]	; (8002908 <HAL_TIM_MspPostInit+0xac>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <HAL_TIM_MspPostInit+0xac>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_TIM_MspPostInit+0xac>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a19      	ldr	r2, [pc, #100]	; (8002908 <HAL_TIM_MspPostInit+0xac>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <HAL_TIM_MspPostInit+0xac>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80028ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4619      	mov	r1, r3
 80028d2:	480e      	ldr	r0, [pc, #56]	; (800290c <HAL_TIM_MspPostInit+0xb0>)
 80028d4:	f000 fe68 	bl	80035a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80028d8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80028dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ee:	f107 0314 	add.w	r3, r7, #20
 80028f2:	4619      	mov	r1, r3
 80028f4:	4806      	ldr	r0, [pc, #24]	; (8002910 <HAL_TIM_MspPostInit+0xb4>)
 80028f6:	f000 fe57 	bl	80035a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028fa:	bf00      	nop
 80028fc:	3728      	adds	r7, #40	; 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40010000 	.word	0x40010000
 8002908:	40023800 	.word	0x40023800
 800290c:	40020400 	.word	0x40020400
 8002910:	40020000 	.word	0x40020000

08002914 <Reset_Handler>:
 8002914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800294c <LoopFillZerobss+0x12>
 8002918:	480d      	ldr	r0, [pc, #52]	; (8002950 <LoopFillZerobss+0x16>)
 800291a:	490e      	ldr	r1, [pc, #56]	; (8002954 <LoopFillZerobss+0x1a>)
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <LoopFillZerobss+0x1e>)
 800291e:	2300      	movs	r3, #0
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:
 8002922:	58d4      	ldr	r4, [r2, r3]
 8002924:	50c4      	str	r4, [r0, r3]
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:
 8002928:	18c4      	adds	r4, r0, r3
 800292a:	428c      	cmp	r4, r1
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <LoopFillZerobss+0x22>)
 8002930:	4c0b      	ldr	r4, [pc, #44]	; (8002960 <LoopFillZerobss+0x26>)
 8002932:	2300      	movs	r3, #0
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:
 800293a:	42a2      	cmp	r2, r4
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>
 800293e:	f7ff fbf3 	bl	8002128 <SystemInit>
 8002942:	f006 fd1f 	bl	8009384 <__libc_init_array>
 8002946:	f7ff f933 	bl	8001bb0 <main>
 800294a:	4770      	bx	lr
 800294c:	20020000 	.word	0x20020000
 8002950:	20000000 	.word	0x20000000
 8002954:	20000270 	.word	0x20000270
 8002958:	0800b52c 	.word	0x0800b52c
 800295c:	20000270 	.word	0x20000270
 8002960:	200107c0 	.word	0x200107c0

08002964 <DMA1_Stream0_IRQHandler>:
 8002964:	e7fe      	b.n	8002964 <DMA1_Stream0_IRQHandler>
	...

08002968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_Init+0x40>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <HAL_Init+0x40>)
 8002972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_Init+0x40>)
 800297e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <HAL_Init+0x40>)
 800298a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002990:	2003      	movs	r0, #3
 8002992:	f000 fd97 	bl	80034c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002996:	200f      	movs	r0, #15
 8002998:	f000 f808 	bl	80029ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800299c:	f7ff f998 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023c00 	.word	0x40023c00

080029ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_InitTick+0x54>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_InitTick+0x58>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fdaf 	bl	800352e <HAL_SYSTICK_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00e      	b.n	80029f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d80a      	bhi.n	80029f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e0:	2200      	movs	r2, #0
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029e8:	f000 fd77 	bl	80034da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029ec:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <HAL_InitTick+0x5c>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e000      	b.n	80029f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	2000009c 	.word	0x2000009c
 8002a04:	200000a4 	.word	0x200000a4
 8002a08:	200000a0 	.word	0x200000a0

08002a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_IncTick+0x20>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_IncTick+0x24>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_IncTick+0x24>)
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	200000a4 	.word	0x200000a4
 8002a30:	20010670 	.word	0x20010670

08002a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return uwTick;
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_GetTick+0x14>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20010670 	.word	0x20010670

08002a4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e033      	b.n	8002aca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe fd02 	bl	8001474 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d118      	bne.n	8002abc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a92:	f023 0302 	bic.w	r3, r3, #2
 8002a96:	f043 0202 	orr.w	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fb3a 	bl	8003118 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f023 0303 	bic.w	r3, r3, #3
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
 8002aba:	e001      	b.n	8002ac0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_Start_IT+0x1a>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e0a1      	b.n	8002c32 <HAL_ADC_Start_IT+0x15e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d018      	beq.n	8002b36 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b14:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <HAL_ADC_Start_IT+0x16c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a4a      	ldr	r2, [pc, #296]	; (8002c44 <HAL_ADC_Start_IT+0x170>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0c9a      	lsrs	r2, r3, #18
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b28:	e002      	b.n	8002b30 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f9      	bne.n	8002b2a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d169      	bne.n	8002c18 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b82:	d106      	bne.n	8002b92 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	f023 0206 	bic.w	r2, r3, #6
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
 8002b90:	e002      	b.n	8002b98 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_ADC_Start_IT+0x174>)
 8002ba2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bac:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bbc:	f043 0320 	orr.w	r3, r3, #32
 8002bc0:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d129      	bne.n	8002c30 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	e020      	b.n	8002c30 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <HAL_ADC_Start_IT+0x178>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d11b      	bne.n	8002c30 <HAL_ADC_Start_IT+0x15c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d114      	bne.n	8002c30 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	e00b      	b.n	8002c30 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0210 	orr.w	r2, r3, #16
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	2000009c 	.word	0x2000009c
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	40012300 	.word	0x40012300
 8002c4c:	40012000 	.word	0x40012000

08002c50 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d049      	beq.n	8002d1a <HAL_ADC_IRQHandler+0xca>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d046      	beq.n	8002d1a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d12b      	bne.n	8002d0a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d127      	bne.n	8002d0a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d119      	bne.n	8002d0a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0220 	bic.w	r2, r2, #32
 8002ce4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d105      	bne.n	8002d0a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe fc00 	bl	8001510 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0212 	mvn.w	r2, #18
 8002d18:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d28:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d057      	beq.n	8002de0 <HAL_ADC_IRQHandler+0x190>
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d054      	beq.n	8002de0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d139      	bne.n	8002dd0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d12b      	bne.n	8002dd0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d124      	bne.n	8002dd0 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d11d      	bne.n	8002dd0 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d119      	bne.n	8002dd0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002daa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fa9d 	bl	8003310 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f06f 020c 	mvn.w	r2, #12
 8002dde:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d017      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x1d6>
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d014      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10d      	bne.n	8002e26 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f837 	bl	8002e8a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0201 	mvn.w	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e34:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d015      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x218>
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d012      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	f043 0202 	orr.w	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f06f 0220 	mvn.w	r2, #32
 8002e56:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f820 	bl	8002e9e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0220 	mvn.w	r2, #32
 8002e66:	601a      	str	r2, [r3, #0]
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1c>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e113      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x244>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b09      	cmp	r3, #9
 8002ede:	d925      	bls.n	8002f2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68d9      	ldr	r1, [r3, #12]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3b1e      	subs	r3, #30
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43da      	mvns	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	400a      	ands	r2, r1
 8002f04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68d9      	ldr	r1, [r3, #12]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4403      	add	r3, r0
 8002f1e:	3b1e      	subs	r3, #30
 8002f20:	409a      	lsls	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	e022      	b.n	8002f72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6919      	ldr	r1, [r3, #16]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	2207      	movs	r2, #7
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6919      	ldr	r1, [r3, #16]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4618      	mov	r0, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4403      	add	r3, r0
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d824      	bhi.n	8002fc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	3b05      	subs	r3, #5
 8002f8c:	221f      	movs	r2, #31
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	400a      	ands	r2, r1
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3b05      	subs	r3, #5
 8002fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fc2:	e04c      	b.n	800305e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d824      	bhi.n	8003016 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b23      	subs	r3, #35	; 0x23
 8002fde:	221f      	movs	r2, #31
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	400a      	ands	r2, r1
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	3b23      	subs	r3, #35	; 0x23
 8003008:	fa00 f203 	lsl.w	r2, r0, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
 8003014:	e023      	b.n	800305e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	3b41      	subs	r3, #65	; 0x41
 8003028:	221f      	movs	r2, #31
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	400a      	ands	r2, r1
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	b29b      	uxth	r3, r3
 8003044:	4618      	mov	r0, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	3b41      	subs	r3, #65	; 0x41
 8003052:	fa00 f203 	lsl.w	r2, r0, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800305e:	4b29      	ldr	r3, [pc, #164]	; (8003104 <HAL_ADC_ConfigChannel+0x250>)
 8003060:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a28      	ldr	r2, [pc, #160]	; (8003108 <HAL_ADC_ConfigChannel+0x254>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d10f      	bne.n	800308c <HAL_ADC_ConfigChannel+0x1d8>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b12      	cmp	r3, #18
 8003072:	d10b      	bne.n	800308c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <HAL_ADC_ConfigChannel+0x254>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d12b      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x23a>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_ADC_ConfigChannel+0x258>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <HAL_ADC_ConfigChannel+0x1f4>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b11      	cmp	r3, #17
 80030a6:	d122      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <HAL_ADC_ConfigChannel+0x258>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d111      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_ADC_ConfigChannel+0x25c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a11      	ldr	r2, [pc, #68]	; (8003114 <HAL_ADC_ConfigChannel+0x260>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	0c9a      	lsrs	r2, r3, #18
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030e0:	e002      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f9      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40012300 	.word	0x40012300
 8003108:	40012000 	.word	0x40012000
 800310c:	10000012 	.word	0x10000012
 8003110:	2000009c 	.word	0x2000009c
 8003114:	431bde83 	.word	0x431bde83

08003118 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003120:	4b79      	ldr	r3, [pc, #484]	; (8003308 <ADC_Init+0x1f0>)
 8003122:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800314c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	021a      	lsls	r2, r3, #8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003192:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6899      	ldr	r1, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	4a58      	ldr	r2, [pc, #352]	; (800330c <ADC_Init+0x1f4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6899      	ldr	r1, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6899      	ldr	r1, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	e00f      	b.n	8003216 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003214:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0202 	bic.w	r2, r2, #2
 8003224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6899      	ldr	r1, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7e1b      	ldrb	r3, [r3, #24]
 8003230:	005a      	lsls	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01b      	beq.n	800327c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003252:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003262:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	3b01      	subs	r3, #1
 8003270:	035a      	lsls	r2, r3, #13
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	e007      	b.n	800328c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	051a      	lsls	r2, r3, #20
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ce:	025a      	lsls	r2, r3, #9
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6899      	ldr	r1, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	029a      	lsls	r2, r3, #10
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40012300 	.word	0x40012300
 800330c:	0f000001 	.word	0x0f000001

08003310 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800334c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003356:	4a04      	ldr	r2, [pc, #16]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60d3      	str	r3, [r2, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <__NVIC_EnableIRQ+0x38>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	; (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003490:	d301      	bcc.n	8003496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <SysTick_Config+0x40>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349e:	210f      	movs	r1, #15
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034a4:	f7ff ff8e 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <SysTick_Config+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <SysTick_Config+0x40>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff29 	bl	8003324 <__NVIC_SetPriorityGrouping>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ec:	f7ff ff3e 	bl	800336c <__NVIC_GetPriorityGrouping>
 80034f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff8e 	bl	8003418 <NVIC_EncodePriority>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff5d 	bl	80033c4 <__NVIC_SetPriority>
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff31 	bl	8003388 <__NVIC_EnableIRQ>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffa2 	bl	8003480 <SysTick_Config>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d004      	beq.n	8003564 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e00c      	b.n	800357e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2205      	movs	r2, #5
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003598:	b2db      	uxtb	r3, r3
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e159      	b.n	8003878 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035c4:	2201      	movs	r2, #1
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	f040 8148 	bne.w	8003872 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d005      	beq.n	80035fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d130      	bne.n	800365c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	2203      	movs	r2, #3
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003630:	2201      	movs	r2, #1
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 0201 	and.w	r2, r3, #1
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b03      	cmp	r3, #3
 8003666:	d017      	beq.n	8003698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d123      	bne.n	80036ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3208      	adds	r2, #8
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	220f      	movs	r2, #15
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	08da      	lsrs	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	69b9      	ldr	r1, [r7, #24]
 80036e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0203 	and.w	r2, r3, #3
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80a2 	beq.w	8003872 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b57      	ldr	r3, [pc, #348]	; (8003890 <HAL_GPIO_Init+0x2e8>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	4a56      	ldr	r2, [pc, #344]	; (8003890 <HAL_GPIO_Init+0x2e8>)
 8003738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800373c:	6453      	str	r3, [r2, #68]	; 0x44
 800373e:	4b54      	ldr	r3, [pc, #336]	; (8003890 <HAL_GPIO_Init+0x2e8>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800374a:	4a52      	ldr	r2, [pc, #328]	; (8003894 <HAL_GPIO_Init+0x2ec>)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3302      	adds	r3, #2
 8003752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	220f      	movs	r2, #15
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a49      	ldr	r2, [pc, #292]	; (8003898 <HAL_GPIO_Init+0x2f0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d019      	beq.n	80037aa <HAL_GPIO_Init+0x202>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a48      	ldr	r2, [pc, #288]	; (800389c <HAL_GPIO_Init+0x2f4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_GPIO_Init+0x1fe>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a47      	ldr	r2, [pc, #284]	; (80038a0 <HAL_GPIO_Init+0x2f8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00d      	beq.n	80037a2 <HAL_GPIO_Init+0x1fa>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a46      	ldr	r2, [pc, #280]	; (80038a4 <HAL_GPIO_Init+0x2fc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <HAL_GPIO_Init+0x1f6>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a45      	ldr	r2, [pc, #276]	; (80038a8 <HAL_GPIO_Init+0x300>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d101      	bne.n	800379a <HAL_GPIO_Init+0x1f2>
 8003796:	2304      	movs	r3, #4
 8003798:	e008      	b.n	80037ac <HAL_GPIO_Init+0x204>
 800379a:	2307      	movs	r3, #7
 800379c:	e006      	b.n	80037ac <HAL_GPIO_Init+0x204>
 800379e:	2303      	movs	r3, #3
 80037a0:	e004      	b.n	80037ac <HAL_GPIO_Init+0x204>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e002      	b.n	80037ac <HAL_GPIO_Init+0x204>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_GPIO_Init+0x204>
 80037aa:	2300      	movs	r3, #0
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	f002 0203 	and.w	r2, r2, #3
 80037b2:	0092      	lsls	r2, r2, #2
 80037b4:	4093      	lsls	r3, r2
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037bc:	4935      	ldr	r1, [pc, #212]	; (8003894 <HAL_GPIO_Init+0x2ec>)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	089b      	lsrs	r3, r3, #2
 80037c2:	3302      	adds	r3, #2
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ca:	4b38      	ldr	r3, [pc, #224]	; (80038ac <HAL_GPIO_Init+0x304>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ee:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <HAL_GPIO_Init+0x304>)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f4:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <HAL_GPIO_Init+0x304>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003818:	4a24      	ldr	r2, [pc, #144]	; (80038ac <HAL_GPIO_Init+0x304>)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800381e:	4b23      	ldr	r3, [pc, #140]	; (80038ac <HAL_GPIO_Init+0x304>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003842:	4a1a      	ldr	r2, [pc, #104]	; (80038ac <HAL_GPIO_Init+0x304>)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003848:	4b18      	ldr	r3, [pc, #96]	; (80038ac <HAL_GPIO_Init+0x304>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800386c:	4a0f      	ldr	r2, [pc, #60]	; (80038ac <HAL_GPIO_Init+0x304>)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3301      	adds	r3, #1
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	2b0f      	cmp	r3, #15
 800387c:	f67f aea2 	bls.w	80035c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	3724      	adds	r7, #36	; 0x24
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	40013800 	.word	0x40013800
 8003898:	40020000 	.word	0x40020000
 800389c:	40020400 	.word	0x40020400
 80038a0:	40020800 	.word	0x40020800
 80038a4:	40020c00 	.word	0x40020c00
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40013c00 	.word	0x40013c00

080038b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	807b      	strh	r3, [r7, #2]
 80038bc:	4613      	mov	r3, r2
 80038be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038c0:	787b      	ldrb	r3, [r7, #1]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038cc:	e003      	b.n	80038d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ce:	887b      	ldrh	r3, [r7, #2]
 80038d0:	041a      	lsls	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	619a      	str	r2, [r3, #24]
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d006      	beq.n	8003908 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038fa:	4a05      	ldr	r2, [pc, #20]	; (8003910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f806 	bl	8003914 <HAL_GPIO_EXTI_Callback>
  }
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40013c00 	.word	0x40013c00

08003914 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e12b      	b.n	8003b96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd ff76 	bl	8001844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	; 0x24
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800397e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800398e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003990:	f003 f940 	bl	8006c14 <HAL_RCC_GetPCLK1Freq>
 8003994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4a81      	ldr	r2, [pc, #516]	; (8003ba0 <HAL_I2C_Init+0x274>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d807      	bhi.n	80039b0 <HAL_I2C_Init+0x84>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a80      	ldr	r2, [pc, #512]	; (8003ba4 <HAL_I2C_Init+0x278>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	bf94      	ite	ls
 80039a8:	2301      	movls	r3, #1
 80039aa:	2300      	movhi	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e006      	b.n	80039be <HAL_I2C_Init+0x92>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a7d      	ldr	r2, [pc, #500]	; (8003ba8 <HAL_I2C_Init+0x27c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	bf94      	ite	ls
 80039b8:	2301      	movls	r3, #1
 80039ba:	2300      	movhi	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e0e7      	b.n	8003b96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4a78      	ldr	r2, [pc, #480]	; (8003bac <HAL_I2C_Init+0x280>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	0c9b      	lsrs	r3, r3, #18
 80039d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a6a      	ldr	r2, [pc, #424]	; (8003ba0 <HAL_I2C_Init+0x274>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d802      	bhi.n	8003a00 <HAL_I2C_Init+0xd4>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3301      	adds	r3, #1
 80039fe:	e009      	b.n	8003a14 <HAL_I2C_Init+0xe8>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	4a69      	ldr	r2, [pc, #420]	; (8003bb0 <HAL_I2C_Init+0x284>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	099b      	lsrs	r3, r3, #6
 8003a12:	3301      	adds	r3, #1
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	495c      	ldr	r1, [pc, #368]	; (8003ba0 <HAL_I2C_Init+0x274>)
 8003a30:	428b      	cmp	r3, r1
 8003a32:	d819      	bhi.n	8003a68 <HAL_I2C_Init+0x13c>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1e59      	subs	r1, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a42:	1c59      	adds	r1, r3, #1
 8003a44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a48:	400b      	ands	r3, r1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_I2C_Init+0x138>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1e59      	subs	r1, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a62:	e051      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003a64:	2304      	movs	r3, #4
 8003a66:	e04f      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d111      	bne.n	8003a94 <HAL_I2C_Init+0x168>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e58      	subs	r0, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	440b      	add	r3, r1
 8003a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e012      	b.n	8003aba <HAL_I2C_Init+0x18e>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1e58      	subs	r0, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	0099      	lsls	r1, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Init+0x196>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e022      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_I2C_Init+0x1bc>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1e58      	subs	r0, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6859      	ldr	r1, [r3, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	440b      	add	r3, r1
 8003ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae6:	e00f      	b.n	8003b08 <HAL_I2C_Init+0x1dc>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1e58      	subs	r0, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	0099      	lsls	r1, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afe:	3301      	adds	r3, #1
 8003b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	6809      	ldr	r1, [r1, #0]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6911      	ldr	r1, [r2, #16]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68d2      	ldr	r2, [r2, #12]
 8003b42:	4311      	orrs	r1, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	000186a0 	.word	0x000186a0
 8003ba4:	001e847f 	.word	0x001e847f
 8003ba8:	003d08ff 	.word	0x003d08ff
 8003bac:	431bde83 	.word	0x431bde83
 8003bb0:	10624dd3 	.word	0x10624dd3

08003bb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	817b      	strh	r3, [r7, #10]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bc8:	f7fe ff34 	bl	8002a34 <HAL_GetTick>
 8003bcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	f040 80e0 	bne.w	8003d9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2319      	movs	r3, #25
 8003be2:	2201      	movs	r2, #1
 8003be4:	4970      	ldr	r1, [pc, #448]	; (8003da8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f002 f9ba 	bl	8005f60 <I2C_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0d3      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_I2C_Master_Transmit+0x50>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e0cc      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d007      	beq.n	8003c2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0201 	orr.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2221      	movs	r2, #33	; 0x21
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2210      	movs	r2, #16
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	893a      	ldrh	r2, [r7, #8]
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a50      	ldr	r2, [pc, #320]	; (8003dac <HAL_I2C_Master_Transmit+0x1f8>)
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c6c:	8979      	ldrh	r1, [r7, #10]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f001 ff7c 	bl	8005b70 <I2C_MasterRequestWrite>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e08d      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c98:	e066      	b.n	8003d68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	6a39      	ldr	r1, [r7, #32]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f002 fa34 	bl	800610c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d107      	bne.n	8003cc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e06b      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	781a      	ldrb	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d11b      	bne.n	8003d3c <HAL_I2C_Master_Transmit+0x188>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d017      	beq.n	8003d3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	6a39      	ldr	r1, [r7, #32]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f002 fa24 	bl	800618e <I2C_WaitOnBTFFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00d      	beq.n	8003d68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d107      	bne.n	8003d64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e01a      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d194      	bne.n	8003c9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e000      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	00100002 	.word	0x00100002
 8003dac:	ffff0000 	.word	0xffff0000

08003db0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08c      	sub	sp, #48	; 0x30
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	817b      	strh	r3, [r7, #10]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7fe fe36 	bl	8002a34 <HAL_GetTick>
 8003dc8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	f040 820b 	bne.w	80041ee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2319      	movs	r3, #25
 8003dde:	2201      	movs	r2, #1
 8003de0:	497c      	ldr	r1, [pc, #496]	; (8003fd4 <HAL_I2C_Master_Receive+0x224>)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f002 f8bc 	bl	8005f60 <I2C_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
 8003df0:	e1fe      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2C_Master_Receive+0x50>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e1f7      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d007      	beq.n	8003e26 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0201 	orr.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2222      	movs	r2, #34	; 0x22
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2210      	movs	r2, #16
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	893a      	ldrh	r2, [r7, #8]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a5c      	ldr	r2, [pc, #368]	; (8003fd8 <HAL_I2C_Master_Receive+0x228>)
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e68:	8979      	ldrh	r1, [r7, #10]
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f001 ff00 	bl	8005c74 <I2C_MasterRequestRead>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e1b8      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d113      	bne.n	8003eae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e86:	2300      	movs	r3, #0
 8003e88:	623b      	str	r3, [r7, #32]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	623b      	str	r3, [r7, #32]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	623b      	str	r3, [r7, #32]
 8003e9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e18c      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d11b      	bne.n	8003eee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e16c      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d11b      	bne.n	8003f2e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	e14c      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f54:	e138      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	f200 80f1 	bhi.w	8004142 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d123      	bne.n	8003fb0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f002 f981 	bl	8006274 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e139      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fae:	e10b      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d14e      	bne.n	8004056 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4906      	ldr	r1, [pc, #24]	; (8003fdc <HAL_I2C_Master_Receive+0x22c>)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f001 ffcc 	bl	8005f60 <I2C_WaitOnFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e10e      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
 8003fd2:	bf00      	nop
 8003fd4:	00100002 	.word	0x00100002
 8003fd8:	ffff0000 	.word	0xffff0000
 8003fdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004054:	e0b8      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	2200      	movs	r2, #0
 800405e:	4966      	ldr	r1, [pc, #408]	; (80041f8 <HAL_I2C_Master_Receive+0x448>)
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f001 ff7d 	bl	8005f60 <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0bf      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	2200      	movs	r2, #0
 80040ba:	494f      	ldr	r1, [pc, #316]	; (80041f8 <HAL_I2C_Master_Receive+0x448>)
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f001 ff4f 	bl	8005f60 <I2C_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e091      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004140:	e042      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004144:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f002 f894 	bl	8006274 <I2C_WaitOnRXNEFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e04c      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b04      	cmp	r3, #4
 8004194:	d118      	bne.n	80041c8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f47f aec2 	bne.w	8003f56 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e000      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
  }
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3728      	adds	r7, #40	; 0x28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	00010004 	.word	0x00010004

080041fc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004218:	2b28      	cmp	r3, #40	; 0x28
 800421a:	d15b      	bne.n	80042d4 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e054      	b.n	80042d6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8004236:	2302      	movs	r3, #2
 8004238:	e04d      	b.n	80042d6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d007      	beq.n	8004260 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800426e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2229      	movs	r2, #41	; 0x29
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	88fa      	ldrh	r2, [r7, #6]
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80042ce:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b087      	sub	sp, #28
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	603b      	str	r3, [r7, #0]
 80042ee:	4613      	mov	r3, r2
 80042f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042fe:	2b28      	cmp	r3, #40	; 0x28
 8004300:	d15b      	bne.n	80043ba <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e054      	b.n	80043bc <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800431c:	2302      	movs	r3, #2
 800431e:	e04d      	b.n	80043bc <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b01      	cmp	r3, #1
 8004334:	d007      	beq.n	8004346 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0201 	orr.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004354:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	222a      	movs	r2, #42	; 0x2a
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	88fa      	ldrh	r2, [r7, #6]
 8004376:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80043b4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d124      	bne.n	8004426 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2228      	movs	r2, #40	; 0x28
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d007      	beq.n	8004402 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004410:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004420:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e000      	b.n	8004428 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004454:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b10      	cmp	r3, #16
 8004462:	d003      	beq.n	800446c <HAL_I2C_EV_IRQHandler+0x38>
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	f040 80b1 	bne.w	80045ce <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10d      	bne.n	80044a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800448c:	d003      	beq.n	8004496 <HAL_I2C_EV_IRQHandler+0x62>
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004494:	d101      	bne.n	800449a <HAL_I2C_EV_IRQHandler+0x66>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_I2C_EV_IRQHandler+0x68>
 800449a:	2300      	movs	r3, #0
 800449c:	2b01      	cmp	r3, #1
 800449e:	f000 8114 	beq.w	80046ca <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00b      	beq.n	80044c4 <HAL_I2C_EV_IRQHandler+0x90>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d006      	beq.n	80044c4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f001 ff61 	bl	800637e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fd3e 	bl	8004f3e <I2C_Master_SB>
 80044c2:	e083      	b.n	80045cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_I2C_EV_IRQHandler+0xac>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fdb6 	bl	800504a <I2C_Master_ADD10>
 80044de:	e075      	b.n	80045cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_I2C_EV_IRQHandler+0xc8>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fdd2 	bl	800509e <I2C_Master_ADDR>
 80044fa:	e067      	b.n	80045cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d036      	beq.n	8004574 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004514:	f000 80db 	beq.w	80046ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <HAL_I2C_EV_IRQHandler+0x10a>
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_I2C_EV_IRQHandler+0x10a>
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f9b6 	bl	80048a8 <I2C_MasterTransmit_TXE>
 800453c:	e046      	b.n	80045cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80c2 	beq.w	80046ce <HAL_I2C_EV_IRQHandler+0x29a>
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80bc 	beq.w	80046ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004556:	7bbb      	ldrb	r3, [r7, #14]
 8004558:	2b21      	cmp	r3, #33	; 0x21
 800455a:	d103      	bne.n	8004564 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fa3f 	bl	80049e0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004562:	e0b4      	b.n	80046ce <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	f040 80b1 	bne.w	80046ce <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 faad 	bl	8004acc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004572:	e0ac      	b.n	80046ce <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800457e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004582:	f000 80a4 	beq.w	80046ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <HAL_I2C_EV_IRQHandler+0x178>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_I2C_EV_IRQHandler+0x178>
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fb25 	bl	8004bf4 <I2C_MasterReceive_RXNE>
 80045aa:	e00f      	b.n	80045cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 808b 	beq.w	80046ce <HAL_I2C_EV_IRQHandler+0x29a>
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 8085 	beq.w	80046ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fbd0 	bl	8004d6a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ca:	e080      	b.n	80046ce <HAL_I2C_EV_IRQHandler+0x29a>
 80045cc:	e07f      	b.n	80046ce <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	e007      	b.n	80045f0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d011      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0x1ea>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00c      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004614:	69b9      	ldr	r1, [r7, #24]
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 ff90 	bl	800553c <I2C_Slave_ADDR>
 800461c:	e05a      	b.n	80046d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_I2C_EV_IRQHandler+0x206>
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 ffca 	bl	80055cc <I2C_Slave_STOPF>
 8004638:	e04c      	b.n	80046d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800463a:	7bbb      	ldrb	r3, [r7, #14]
 800463c:	2b21      	cmp	r3, #33	; 0x21
 800463e:	d002      	beq.n	8004646 <HAL_I2C_EV_IRQHandler+0x212>
 8004640:	7bbb      	ldrb	r3, [r7, #14]
 8004642:	2b29      	cmp	r3, #41	; 0x29
 8004644:	d120      	bne.n	8004688 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00d      	beq.n	800466c <HAL_I2C_EV_IRQHandler+0x238>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <HAL_I2C_EV_IRQHandler+0x238>
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d103      	bne.n	800466c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 feab 	bl	80053c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800466a:	e032      	b.n	80046d2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d02d      	beq.n	80046d2 <HAL_I2C_EV_IRQHandler+0x29e>
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467c:	2b00      	cmp	r3, #0
 800467e:	d028      	beq.n	80046d2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 feda 	bl	800543a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004686:	e024      	b.n	80046d2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00d      	beq.n	80046ae <HAL_I2C_EV_IRQHandler+0x27a>
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_I2C_EV_IRQHandler+0x27a>
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d103      	bne.n	80046ae <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fee8 	bl	800547c <I2C_SlaveReceive_RXNE>
 80046ac:	e012      	b.n	80046d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00d      	beq.n	80046d4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 ff18 	bl	80054f8 <I2C_SlaveReceive_BTF>
 80046c8:	e004      	b.n	80046d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80046ca:	bf00      	nop
 80046cc:	e002      	b.n	80046d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b08a      	sub	sp, #40	; 0x28
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <HAL_I2C_ER_IRQHandler+0x4a>
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004722:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00d      	beq.n	800474a <HAL_I2C_ER_IRQHandler+0x70>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f043 0302 	orr.w	r3, r3, #2
 800473e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004748:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	2b00      	cmp	r3, #0
 8004752:	d03e      	beq.n	80047d2 <HAL_I2C_ER_IRQHandler+0xf8>
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	2b00      	cmp	r3, #0
 800475c:	d039      	beq.n	80047d2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800475e:	7efb      	ldrb	r3, [r7, #27]
 8004760:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004770:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004778:	7ebb      	ldrb	r3, [r7, #26]
 800477a:	2b20      	cmp	r3, #32
 800477c:	d112      	bne.n	80047a4 <HAL_I2C_ER_IRQHandler+0xca>
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10f      	bne.n	80047a4 <HAL_I2C_ER_IRQHandler+0xca>
 8004784:	7cfb      	ldrb	r3, [r7, #19]
 8004786:	2b21      	cmp	r3, #33	; 0x21
 8004788:	d008      	beq.n	800479c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800478a:	7cfb      	ldrb	r3, [r7, #19]
 800478c:	2b29      	cmp	r3, #41	; 0x29
 800478e:	d005      	beq.n	800479c <HAL_I2C_ER_IRQHandler+0xc2>
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	2b28      	cmp	r3, #40	; 0x28
 8004794:	d106      	bne.n	80047a4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b21      	cmp	r3, #33	; 0x21
 800479a:	d103      	bne.n	80047a4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f001 f845 	bl	800582c <I2C_Slave_AF>
 80047a2:	e016      	b.n	80047d2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	f043 0304 	orr.w	r3, r3, #4
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047b6:	7efb      	ldrb	r3, [r7, #27]
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d002      	beq.n	80047c2 <HAL_I2C_ER_IRQHandler+0xe8>
 80047bc:	7efb      	ldrb	r3, [r7, #27]
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d107      	bne.n	80047d2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00d      	beq.n	80047f8 <HAL_I2C_ER_IRQHandler+0x11e>
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80047f6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f001 f87e 	bl	800590c <I2C_ITError>
  }
}
 8004810:	bf00      	nop
 8004812:	3728      	adds	r7, #40	; 0x28
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d150      	bne.n	8004970 <I2C_MasterTransmit_TXE+0xc8>
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	2b21      	cmp	r3, #33	; 0x21
 80048d2:	d14d      	bne.n	8004970 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d01d      	beq.n	8004916 <I2C_MasterTransmit_TXE+0x6e>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d01a      	beq.n	8004916 <I2C_MasterTransmit_TXE+0x6e>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048e6:	d016      	beq.n	8004916 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048f6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2211      	movs	r2, #17
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff ff82 	bl	8004818 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004914:	e060      	b.n	80049d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004924:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004934:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d107      	bne.n	8004960 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff7b 	bl	8004854 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800495e:	e03b      	b.n	80049d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ff55 	bl	8004818 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800496e:	e033      	b.n	80049d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	2b21      	cmp	r3, #33	; 0x21
 8004974:	d005      	beq.n	8004982 <I2C_MasterTransmit_TXE+0xda>
 8004976:	7bbb      	ldrb	r3, [r7, #14]
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d12d      	bne.n	80049d8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b22      	cmp	r3, #34	; 0x22
 8004980:	d12a      	bne.n	80049d8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d108      	bne.n	800499e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800499c:	e01c      	b.n	80049d8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d103      	bne.n	80049b2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f88e 	bl	8004acc <I2C_MemoryTransmit_TXE_BTF>
}
 80049b0:	e012      	b.n	80049d8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	781a      	ldrb	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049d6:	e7ff      	b.n	80049d8 <I2C_MasterTransmit_TXE+0x130>
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b21      	cmp	r3, #33	; 0x21
 80049f8:	d164      	bne.n	8004ac4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d012      	beq.n	8004a2a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a28:	e04c      	b.n	8004ac4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d01d      	beq.n	8004a6c <I2C_MasterTransmit_BTF+0x8c>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d01a      	beq.n	8004a6c <I2C_MasterTransmit_BTF+0x8c>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a3c:	d016      	beq.n	8004a6c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a4c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2211      	movs	r2, #17
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fed7 	bl	8004818 <HAL_I2C_MasterTxCpltCallback>
}
 8004a6a:	e02b      	b.n	8004ac4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a7a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b40      	cmp	r3, #64	; 0x40
 8004aa4:	d107      	bne.n	8004ab6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff fed0 	bl	8004854 <HAL_I2C_MemTxCpltCallback>
}
 8004ab4:	e006      	b.n	8004ac4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff feaa 	bl	8004818 <HAL_I2C_MasterTxCpltCallback>
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d11d      	bne.n	8004b20 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d10b      	bne.n	8004b04 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afc:	1c9a      	adds	r2, r3, #2
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004b02:	e073      	b.n	8004bec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	121b      	asrs	r3, r3, #8
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b1e:	e065      	b.n	8004bec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d10b      	bne.n	8004b40 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b3e:	e055      	b.n	8004bec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d151      	bne.n	8004bec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b22      	cmp	r3, #34	; 0x22
 8004b4c:	d10d      	bne.n	8004b6a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b5c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b68:	e040      	b.n	8004bec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d015      	beq.n	8004ba0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b21      	cmp	r3, #33	; 0x21
 8004b78:	d112      	bne.n	8004ba0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	781a      	ldrb	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b9e:	e025      	b.n	8004bec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d120      	bne.n	8004bec <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b21      	cmp	r3, #33	; 0x21
 8004bae:	d11d      	bne.n	8004bec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bbe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff fe34 	bl	8004854 <HAL_I2C_MemTxCpltCallback>
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b22      	cmp	r3, #34	; 0x22
 8004c06:	f040 80ac 	bne.w	8004d62 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d921      	bls.n	8004c5c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	f040 808c 	bne.w	8004d62 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c58:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004c5a:	e082      	b.n	8004d62 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d075      	beq.n	8004d50 <I2C_MasterReceive_RXNE+0x15c>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d002      	beq.n	8004c70 <I2C_MasterReceive_RXNE+0x7c>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d16f      	bne.n	8004d50 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f001 facd 	bl	8006210 <I2C_WaitOnSTOPRequestThroughIT>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d142      	bne.n	8004d02 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d10a      	bne.n	8004cec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff fdbf 	bl	8004868 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cea:	e03a      	b.n	8004d62 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2212      	movs	r2, #18
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff fd96 	bl	800482c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d00:	e02f      	b.n	8004d62 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d10:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fc fe9b 	bl	8001a84 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d4e:	e008      	b.n	8004d62 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5e:	605a      	str	r2, [r3, #4]
}
 8004d60:	e7ff      	b.n	8004d62 <I2C_MasterReceive_RXNE+0x16e>
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d11b      	bne.n	8004dba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d90:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004db8:	e0bd      	b.n	8004f36 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d129      	bne.n	8004e18 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d00a      	beq.n	8004df0 <I2C_MasterReceive_BTF+0x86>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d007      	beq.n	8004df0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e16:	e08e      	b.n	8004f36 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d176      	bne.n	8004f10 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d002      	beq.n	8004e2e <I2C_MasterReceive_BTF+0xc4>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d108      	bne.n	8004e40 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e019      	b.n	8004e74 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d002      	beq.n	8004e4c <I2C_MasterReceive_BTF+0xe2>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d108      	bne.n	8004e5e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	e00a      	b.n	8004e74 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d007      	beq.n	8004e74 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e72:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ece:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b40      	cmp	r3, #64	; 0x40
 8004ee2:	d10a      	bne.n	8004efa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff fcb8 	bl	8004868 <HAL_I2C_MemRxCpltCallback>
}
 8004ef8:	e01d      	b.n	8004f36 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2212      	movs	r2, #18
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff fc8f 	bl	800482c <HAL_I2C_MasterRxCpltCallback>
}
 8004f0e:	e012      	b.n	8004f36 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b40      	cmp	r3, #64	; 0x40
 8004f50:	d117      	bne.n	8004f82 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f6a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004f6c:	e067      	b.n	800503e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	611a      	str	r2, [r3, #16]
}
 8004f80:	e05d      	b.n	800503e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f8a:	d133      	bne.n	8004ff4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b21      	cmp	r3, #33	; 0x21
 8004f96:	d109      	bne.n	8004fac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fa8:	611a      	str	r2, [r3, #16]
 8004faa:	e008      	b.n	8004fbe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <I2C_Master_SB+0x92>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d108      	bne.n	8004fe2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d032      	beq.n	800503e <I2C_Master_SB+0x100>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d02d      	beq.n	800503e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff0:	605a      	str	r2, [r3, #4]
}
 8004ff2:	e024      	b.n	800503e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10e      	bne.n	800501a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005000:	b29b      	uxth	r3, r3
 8005002:	11db      	asrs	r3, r3, #7
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f003 0306 	and.w	r3, r3, #6
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f063 030f 	orn	r3, r3, #15
 8005010:	b2da      	uxtb	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	611a      	str	r2, [r3, #16]
}
 8005018:	e011      	b.n	800503e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501e:	2b01      	cmp	r3, #1
 8005020:	d10d      	bne.n	800503e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	b29b      	uxth	r3, r3
 8005028:	11db      	asrs	r3, r3, #7
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f003 0306 	and.w	r3, r3, #6
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f063 030e 	orn	r3, r3, #14
 8005036:	b2da      	uxtb	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	611a      	str	r2, [r3, #16]
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	b2da      	uxtb	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <I2C_Master_ADD10+0x26>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d108      	bne.n	8005082 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00c      	beq.n	8005092 <I2C_Master_ADD10+0x48>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005090:	605a      	str	r2, [r3, #4]
  }
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800509e:	b480      	push	{r7}
 80050a0:	b091      	sub	sp, #68	; 0x44
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b22      	cmp	r3, #34	; 0x22
 80050c6:	f040 8169 	bne.w	800539c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10f      	bne.n	80050f2 <I2C_Master_ADDR+0x54>
 80050d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	d10b      	bne.n	80050f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050da:	2300      	movs	r3, #0
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	633b      	str	r3, [r7, #48]	; 0x30
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	e160      	b.n	80053b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d11d      	bne.n	8005136 <I2C_Master_ADDR+0x98>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005102:	d118      	bne.n	8005136 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005104:	2300      	movs	r3, #0
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005118:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005128:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	651a      	str	r2, [r3, #80]	; 0x50
 8005134:	e13e      	b.n	80053b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d113      	bne.n	8005168 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005140:	2300      	movs	r3, #0
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	62bb      	str	r3, [r7, #40]	; 0x28
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e115      	b.n	8005394 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	f040 808a 	bne.w	8005288 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800517a:	d137      	bne.n	80051ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519a:	d113      	bne.n	80051c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ac:	2300      	movs	r3, #0
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	e0e7      	b.n	8005394 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c4:	2300      	movs	r3, #0
 80051c6:	623b      	str	r3, [r7, #32]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	623b      	str	r3, [r7, #32]
 80051d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	e0d3      	b.n	8005394 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d02e      	beq.n	8005250 <I2C_Master_ADDR+0x1b2>
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d02b      	beq.n	8005250 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	2b12      	cmp	r3, #18
 80051fc:	d102      	bne.n	8005204 <I2C_Master_ADDR+0x166>
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	2b01      	cmp	r3, #1
 8005202:	d125      	bne.n	8005250 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	2b04      	cmp	r3, #4
 8005208:	d00e      	beq.n	8005228 <I2C_Master_ADDR+0x18a>
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	2b02      	cmp	r3, #2
 800520e:	d00b      	beq.n	8005228 <I2C_Master_ADDR+0x18a>
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	2b10      	cmp	r3, #16
 8005214:	d008      	beq.n	8005228 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e007      	b.n	8005238 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005236:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	e0a1      	b.n	8005394 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005260:	2300      	movs	r3, #0
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	61bb      	str	r3, [r7, #24]
 8005274:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	e085      	b.n	8005394 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d14d      	bne.n	800532e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	2b04      	cmp	r3, #4
 8005296:	d016      	beq.n	80052c6 <I2C_Master_ADDR+0x228>
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	2b02      	cmp	r3, #2
 800529c:	d013      	beq.n	80052c6 <I2C_Master_ADDR+0x228>
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d010      	beq.n	80052c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	e007      	b.n	80052d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e4:	d117      	bne.n	8005316 <I2C_Master_ADDR+0x278>
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052ec:	d00b      	beq.n	8005306 <I2C_Master_ADDR+0x268>
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d008      	beq.n	8005306 <I2C_Master_ADDR+0x268>
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d005      	beq.n	8005306 <I2C_Master_ADDR+0x268>
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d002      	beq.n	8005306 <I2C_Master_ADDR+0x268>
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	2b20      	cmp	r3, #32
 8005304:	d107      	bne.n	8005316 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005314:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	e032      	b.n	8005394 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800533c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534c:	d117      	bne.n	800537e <I2C_Master_ADDR+0x2e0>
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005354:	d00b      	beq.n	800536e <I2C_Master_ADDR+0x2d0>
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	2b01      	cmp	r3, #1
 800535a:	d008      	beq.n	800536e <I2C_Master_ADDR+0x2d0>
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	2b08      	cmp	r3, #8
 8005360:	d005      	beq.n	800536e <I2C_Master_ADDR+0x2d0>
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	2b10      	cmp	r3, #16
 8005366:	d002      	beq.n	800536e <I2C_Master_ADDR+0x2d0>
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	2b20      	cmp	r3, #32
 800536c:	d107      	bne.n	800537e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800537c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537e:	2300      	movs	r3, #0
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800539a:	e00b      	b.n	80053b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
}
 80053b2:	e7ff      	b.n	80053b4 <I2C_Master_ADDR+0x316>
 80053b4:	bf00      	nop
 80053b6:	3744      	adds	r7, #68	; 0x44
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d02b      	beq.n	8005432 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	781a      	ldrb	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d114      	bne.n	8005432 <I2C_SlaveTransmit_TXE+0x72>
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	2b29      	cmp	r3, #41	; 0x29
 800540c:	d111      	bne.n	8005432 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2221      	movs	r2, #33	; 0x21
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2228      	movs	r2, #40	; 0x28
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff fa07 	bl	8004840 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d011      	beq.n	8005470 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	781a      	ldrb	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d02c      	beq.n	80054f0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d114      	bne.n	80054f0 <I2C_SlaveReceive_RXNE+0x74>
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	2b2a      	cmp	r3, #42	; 0x2a
 80054ca:	d111      	bne.n	80054f0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2222      	movs	r2, #34	; 0x22
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2228      	movs	r2, #40	; 0x28
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fc fa8e 	bl	8001a0c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d012      	beq.n	8005530 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005556:	2b28      	cmp	r3, #40	; 0x28
 8005558:	d125      	bne.n	80055a6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005568:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	81bb      	strh	r3, [r7, #12]
 8005588:	e002      	b.n	8005590 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005598:	89ba      	ldrh	r2, [r7, #12]
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fc f9fe 	bl	80019a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80055a4:	e00e      	b.n	80055c4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a6:	2300      	movs	r3, #0
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80055ec:	2300      	movs	r3, #0
 80055ee:	60bb      	str	r3, [r7, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	60bb      	str	r3, [r7, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005618:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005628:	d172      	bne.n	8005710 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b22      	cmp	r3, #34	; 0x22
 800562e:	d002      	beq.n	8005636 <I2C_Slave_STOPF+0x6a>
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b2a      	cmp	r3, #42	; 0x2a
 8005634:	d135      	bne.n	80056a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	b29a      	uxth	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f043 0204 	orr.w	r2, r3, #4
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005668:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	4618      	mov	r0, r3
 8005670:	f7fd ff8b 	bl	800358a <HAL_DMA_GetState>
 8005674:	4603      	mov	r3, r0
 8005676:	2b01      	cmp	r3, #1
 8005678:	d049      	beq.n	800570e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	4a69      	ldr	r2, [pc, #420]	; (8005824 <I2C_Slave_STOPF+0x258>)
 8005680:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	4618      	mov	r0, r3
 8005688:	f7fd ff5d 	bl	8003546 <HAL_DMA_Abort_IT>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d03d      	beq.n	800570e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800569c:	4610      	mov	r0, r2
 800569e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056a0:	e035      	b.n	800570e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d005      	beq.n	80056c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f043 0204 	orr.w	r2, r3, #4
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fd ff55 	bl	800358a <HAL_DMA_GetState>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d014      	beq.n	8005710 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	4a4e      	ldr	r2, [pc, #312]	; (8005824 <I2C_Slave_STOPF+0x258>)
 80056ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fd ff27 	bl	8003546 <HAL_DMA_Abort_IT>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d008      	beq.n	8005710 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
 800570c:	e000      	b.n	8005710 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800570e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d03e      	beq.n	8005798 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b04      	cmp	r3, #4
 8005726:	d112      	bne.n	800574e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d112      	bne.n	8005782 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	f043 0204 	orr.w	r2, r3, #4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8b3 	bl	800590c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80057a6:	e039      	b.n	800581c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b2a      	cmp	r3, #42	; 0x2a
 80057ac:	d109      	bne.n	80057c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2228      	movs	r2, #40	; 0x28
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7fc f925 	bl	8001a0c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b28      	cmp	r3, #40	; 0x28
 80057cc:	d111      	bne.n	80057f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a15      	ldr	r2, [pc, #84]	; (8005828 <I2C_Slave_STOPF+0x25c>)
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fc f8c6 	bl	800197c <HAL_I2C_ListenCpltCallback>
}
 80057f0:	e014      	b.n	800581c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	2b22      	cmp	r3, #34	; 0x22
 80057f8:	d002      	beq.n	8005800 <I2C_Slave_STOPF+0x234>
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	2b22      	cmp	r3, #34	; 0x22
 80057fe:	d10d      	bne.n	800581c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fc f8f8 	bl	8001a0c <HAL_I2C_SlaveRxCpltCallback>
}
 800581c:	bf00      	nop
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	08005e11 	.word	0x08005e11
 8005828:	ffff0000 	.word	0xffff0000

0800582c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b08      	cmp	r3, #8
 8005846:	d002      	beq.n	800584e <I2C_Slave_AF+0x22>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b20      	cmp	r3, #32
 800584c:	d129      	bne.n	80058a2 <I2C_Slave_AF+0x76>
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	2b28      	cmp	r3, #40	; 0x28
 8005852:	d126      	bne.n	80058a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <I2C_Slave_AF+0xdc>)
 8005858:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005868:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005872:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005882:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fc f86e 	bl	800197c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80058a0:	e02e      	b.n	8005900 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	2b21      	cmp	r3, #33	; 0x21
 80058a6:	d126      	bne.n	80058f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a17      	ldr	r2, [pc, #92]	; (8005908 <I2C_Slave_AF+0xdc>)
 80058ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2221      	movs	r2, #33	; 0x21
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fe ffa6 	bl	8004840 <HAL_I2C_SlaveTxCpltCallback>
}
 80058f4:	e004      	b.n	8005900 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058fe:	615a      	str	r2, [r3, #20]
}
 8005900:	bf00      	nop
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	ffff0000 	.word	0xffff0000

0800590c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005922:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005924:	7bbb      	ldrb	r3, [r7, #14]
 8005926:	2b10      	cmp	r3, #16
 8005928:	d002      	beq.n	8005930 <I2C_ITError+0x24>
 800592a:	7bbb      	ldrb	r3, [r7, #14]
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d10a      	bne.n	8005946 <I2C_ITError+0x3a>
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b22      	cmp	r3, #34	; 0x22
 8005934:	d107      	bne.n	8005946 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005944:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800594c:	2b28      	cmp	r3, #40	; 0x28
 800594e:	d107      	bne.n	8005960 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2228      	movs	r2, #40	; 0x28
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800595e:	e015      	b.n	800598c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800596a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800596e:	d00a      	beq.n	8005986 <I2C_ITError+0x7a>
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	2b60      	cmp	r3, #96	; 0x60
 8005974:	d007      	beq.n	8005986 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599a:	d162      	bne.n	8005a62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d020      	beq.n	80059fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059be:	4a6a      	ldr	r2, [pc, #424]	; (8005b68 <I2C_ITError+0x25c>)
 80059c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fd fdbd 	bl	8003546 <HAL_DMA_Abort_IT>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8089 	beq.w	8005ae6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059f6:	4610      	mov	r0, r2
 80059f8:	4798      	blx	r3
 80059fa:	e074      	b.n	8005ae6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	4a59      	ldr	r2, [pc, #356]	; (8005b68 <I2C_ITError+0x25c>)
 8005a02:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fd fd9c 	bl	8003546 <HAL_DMA_Abort_IT>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d068      	beq.n	8005ae6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1e:	2b40      	cmp	r3, #64	; 0x40
 8005a20:	d10b      	bne.n	8005a3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0201 	bic.w	r2, r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4798      	blx	r3
 8005a60:	e041      	b.n	8005ae6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b60      	cmp	r3, #96	; 0x60
 8005a6c:	d125      	bne.n	8005aba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d10b      	bne.n	8005aa2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	691a      	ldr	r2, [r3, #16]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0201 	bic.w	r2, r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fe fee2 	bl	800487c <HAL_I2C_AbortCpltCallback>
 8005ab8:	e015      	b.n	8005ae6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d10b      	bne.n	8005ae0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7fb ffcf 	bl	8001a84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10e      	bne.n	8005b14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b22:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d113      	bne.n	8005b60 <I2C_ITError+0x254>
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b28      	cmp	r3, #40	; 0x28
 8005b3c:	d110      	bne.n	8005b60 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <I2C_ITError+0x260>)
 8005b42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fb ff0e 	bl	800197c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	08005e11 	.word	0x08005e11
 8005b6c:	ffff0000 	.word	0xffff0000

08005b70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	607a      	str	r2, [r7, #4]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d006      	beq.n	8005b9a <I2C_MasterRequestWrite+0x2a>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d003      	beq.n	8005b9a <I2C_MasterRequestWrite+0x2a>
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b98:	d108      	bne.n	8005bac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e00b      	b.n	8005bc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	2b12      	cmp	r3, #18
 8005bb2:	d107      	bne.n	8005bc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f9c5 	bl	8005f60 <I2C_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00d      	beq.n	8005bf8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bea:	d103      	bne.n	8005bf4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e035      	b.n	8005c64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c00:	d108      	bne.n	8005c14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c02:	897b      	ldrh	r3, [r7, #10]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c10:	611a      	str	r2, [r3, #16]
 8005c12:	e01b      	b.n	8005c4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c14:	897b      	ldrh	r3, [r7, #10]
 8005c16:	11db      	asrs	r3, r3, #7
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	f003 0306 	and.w	r3, r3, #6
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	f063 030f 	orn	r3, r3, #15
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	490e      	ldr	r1, [pc, #56]	; (8005c6c <I2C_MasterRequestWrite+0xfc>)
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f9eb 	bl	800600e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e010      	b.n	8005c64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c42:	897b      	ldrh	r3, [r7, #10]
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	4907      	ldr	r1, [pc, #28]	; (8005c70 <I2C_MasterRequestWrite+0x100>)
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f9db 	bl	800600e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	00010008 	.word	0x00010008
 8005c70:	00010002 	.word	0x00010002

08005c74 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	607a      	str	r2, [r7, #4]
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	460b      	mov	r3, r1
 8005c82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c98:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d006      	beq.n	8005cae <I2C_MasterRequestRead+0x3a>
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d003      	beq.n	8005cae <I2C_MasterRequestRead+0x3a>
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cac:	d108      	bne.n	8005cc0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e00b      	b.n	8005cd8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	2b11      	cmp	r3, #17
 8005cc6:	d107      	bne.n	8005cd8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f93b 	bl	8005f60 <I2C_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00d      	beq.n	8005d0c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cfe:	d103      	bne.n	8005d08 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e079      	b.n	8005e00 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d14:	d108      	bne.n	8005d28 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d16:	897b      	ldrh	r3, [r7, #10]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]
 8005d26:	e05f      	b.n	8005de8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d28:	897b      	ldrh	r3, [r7, #10]
 8005d2a:	11db      	asrs	r3, r3, #7
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f003 0306 	and.w	r3, r3, #6
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f063 030f 	orn	r3, r3, #15
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	4930      	ldr	r1, [pc, #192]	; (8005e08 <I2C_MasterRequestRead+0x194>)
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f961 	bl	800600e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e054      	b.n	8005e00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d56:	897b      	ldrh	r3, [r7, #10]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4929      	ldr	r1, [pc, #164]	; (8005e0c <I2C_MasterRequestRead+0x198>)
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f951 	bl	800600e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e044      	b.n	8005e00 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d76:	2300      	movs	r3, #0
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d9a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f8d9 	bl	8005f60 <I2C_WaitOnFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00d      	beq.n	8005dd0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc2:	d103      	bne.n	8005dcc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e017      	b.n	8005e00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005dd0:	897b      	ldrh	r3, [r7, #10]
 8005dd2:	11db      	asrs	r3, r3, #7
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	f003 0306 	and.w	r3, r3, #6
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	f063 030e 	orn	r3, r3, #14
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4907      	ldr	r1, [pc, #28]	; (8005e0c <I2C_MasterRequestRead+0x198>)
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f90d 	bl	800600e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	00010008 	.word	0x00010008
 8005e0c:	00010002 	.word	0x00010002

08005e10 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e28:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e2a:	4b4b      	ldr	r3, [pc, #300]	; (8005f58 <I2C_DMAAbort+0x148>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	08db      	lsrs	r3, r3, #3
 8005e30:	4a4a      	ldr	r2, [pc, #296]	; (8005f5c <I2C_DMAAbort+0x14c>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	0a1a      	lsrs	r2, r3, #8
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	00da      	lsls	r2, r3, #3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	f043 0220 	orr.w	r2, r3, #32
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e56:	e00a      	b.n	8005e6e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e6c:	d0ea      	beq.n	8005e44 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0201 	bic.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b60      	cmp	r3, #96	; 0x60
 8005ede:	d10e      	bne.n	8005efe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ef6:	6978      	ldr	r0, [r7, #20]
 8005ef8:	f7fe fcc0 	bl	800487c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005efc:	e027      	b.n	8005f4e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005efe:	7cfb      	ldrb	r3, [r7, #19]
 8005f00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f04:	2b28      	cmp	r3, #40	; 0x28
 8005f06:	d117      	bne.n	8005f38 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2228      	movs	r2, #40	; 0x28
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f36:	e007      	b.n	8005f48 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f48:	6978      	ldr	r0, [r7, #20]
 8005f4a:	f7fb fd9b 	bl	8001a84 <HAL_I2C_ErrorCallback>
}
 8005f4e:	bf00      	nop
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	2000009c 	.word	0x2000009c
 8005f5c:	14f8b589 	.word	0x14f8b589

08005f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f70:	e025      	b.n	8005fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f78:	d021      	beq.n	8005fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7a:	f7fc fd5b 	bl	8002a34 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d302      	bcc.n	8005f90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d116      	bne.n	8005fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e023      	b.n	8006006 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	0c1b      	lsrs	r3, r3, #16
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d10d      	bne.n	8005fe4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	43da      	mvns	r2, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	bf0c      	ite	eq
 8005fda:	2301      	moveq	r3, #1
 8005fdc:	2300      	movne	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	e00c      	b.n	8005ffe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	43da      	mvns	r2, r3
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bf0c      	ite	eq
 8005ff6:	2301      	moveq	r3, #1
 8005ff8:	2300      	movne	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	429a      	cmp	r2, r3
 8006002:	d0b6      	beq.n	8005f72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
 800601a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800601c:	e051      	b.n	80060c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602c:	d123      	bne.n	8006076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006046:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f043 0204 	orr.w	r2, r3, #4
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e046      	b.n	8006104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800607c:	d021      	beq.n	80060c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607e:	f7fc fcd9 	bl	8002a34 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	429a      	cmp	r2, r3
 800608c:	d302      	bcc.n	8006094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d116      	bne.n	80060c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f043 0220 	orr.w	r2, r3, #32
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e020      	b.n	8006104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	0c1b      	lsrs	r3, r3, #16
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d10c      	bne.n	80060e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	43da      	mvns	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4013      	ands	r3, r2
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bf14      	ite	ne
 80060de:	2301      	movne	r3, #1
 80060e0:	2300      	moveq	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	e00b      	b.n	80060fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	43da      	mvns	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	4013      	ands	r3, r2
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d18d      	bne.n	800601e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006118:	e02d      	b.n	8006176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f900 	bl	8006320 <I2C_IsAcknowledgeFailed>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e02d      	b.n	8006186 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006130:	d021      	beq.n	8006176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006132:	f7fc fc7f 	bl	8002a34 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	429a      	cmp	r2, r3
 8006140:	d302      	bcc.n	8006148 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d116      	bne.n	8006176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	f043 0220 	orr.w	r2, r3, #32
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e007      	b.n	8006186 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006180:	2b80      	cmp	r3, #128	; 0x80
 8006182:	d1ca      	bne.n	800611a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800619a:	e02d      	b.n	80061f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 f8bf 	bl	8006320 <I2C_IsAcknowledgeFailed>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e02d      	b.n	8006208 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b2:	d021      	beq.n	80061f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b4:	f7fc fc3e 	bl	8002a34 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d302      	bcc.n	80061ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d116      	bne.n	80061f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	f043 0220 	orr.w	r2, r3, #32
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e007      	b.n	8006208 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b04      	cmp	r3, #4
 8006204:	d1ca      	bne.n	800619c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800621c:	4b13      	ldr	r3, [pc, #76]	; (800626c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	08db      	lsrs	r3, r3, #3
 8006222:	4a13      	ldr	r2, [pc, #76]	; (8006270 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006224:	fba2 2303 	umull	r2, r3, r2, r3
 8006228:	0a1a      	lsrs	r2, r3, #8
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3b01      	subs	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d107      	bne.n	800624e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f043 0220 	orr.w	r2, r3, #32
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e008      	b.n	8006260 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800625c:	d0e9      	beq.n	8006232 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	2000009c 	.word	0x2000009c
 8006270:	14f8b589 	.word	0x14f8b589

08006274 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006280:	e042      	b.n	8006308 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b10      	cmp	r3, #16
 800628e:	d119      	bne.n	80062c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0210 	mvn.w	r2, #16
 8006298:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e029      	b.n	8006318 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c4:	f7fc fbb6 	bl	8002a34 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d302      	bcc.n	80062da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d116      	bne.n	8006308 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f4:	f043 0220 	orr.w	r2, r3, #32
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e007      	b.n	8006318 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d1b5      	bne.n	8006282 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006336:	d11b      	bne.n	8006370 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006340:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	f043 0204 	orr.w	r2, r3, #4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800638e:	d103      	bne.n	8006398 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006396:	e007      	b.n	80063a8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063a0:	d102      	bne.n	80063a8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2208      	movs	r2, #8
 80063a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e267      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d075      	beq.n	80064be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063d2:	4b88      	ldr	r3, [pc, #544]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 030c 	and.w	r3, r3, #12
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d00c      	beq.n	80063f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063de:	4b85      	ldr	r3, [pc, #532]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d112      	bne.n	8006410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ea:	4b82      	ldr	r3, [pc, #520]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063f6:	d10b      	bne.n	8006410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063f8:	4b7e      	ldr	r3, [pc, #504]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d05b      	beq.n	80064bc <HAL_RCC_OscConfig+0x108>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d157      	bne.n	80064bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e242      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006418:	d106      	bne.n	8006428 <HAL_RCC_OscConfig+0x74>
 800641a:	4b76      	ldr	r3, [pc, #472]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a75      	ldr	r2, [pc, #468]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	e01d      	b.n	8006464 <HAL_RCC_OscConfig+0xb0>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006430:	d10c      	bne.n	800644c <HAL_RCC_OscConfig+0x98>
 8006432:	4b70      	ldr	r3, [pc, #448]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a6f      	ldr	r2, [pc, #444]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	4b6d      	ldr	r3, [pc, #436]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a6c      	ldr	r2, [pc, #432]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e00b      	b.n	8006464 <HAL_RCC_OscConfig+0xb0>
 800644c:	4b69      	ldr	r3, [pc, #420]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a68      	ldr	r2, [pc, #416]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	4b66      	ldr	r3, [pc, #408]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a65      	ldr	r2, [pc, #404]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 800645e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d013      	beq.n	8006494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646c:	f7fc fae2 	bl	8002a34 <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006474:	f7fc fade 	bl	8002a34 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b64      	cmp	r3, #100	; 0x64
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e207      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006486:	4b5b      	ldr	r3, [pc, #364]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0xc0>
 8006492:	e014      	b.n	80064be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fc face 	bl	8002a34 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800649c:	f7fc faca 	bl	8002a34 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	; 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e1f3      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ae:	4b51      	ldr	r3, [pc, #324]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0xe8>
 80064ba:	e000      	b.n	80064be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d063      	beq.n	8006592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064ca:	4b4a      	ldr	r3, [pc, #296]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 030c 	and.w	r3, r3, #12
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00b      	beq.n	80064ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064d6:	4b47      	ldr	r3, [pc, #284]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d11c      	bne.n	800651c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064e2:	4b44      	ldr	r3, [pc, #272]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d116      	bne.n	800651c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ee:	4b41      	ldr	r3, [pc, #260]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_RCC_OscConfig+0x152>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d001      	beq.n	8006506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e1c7      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006506:	4b3b      	ldr	r3, [pc, #236]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	4937      	ldr	r1, [pc, #220]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006516:	4313      	orrs	r3, r2
 8006518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800651a:	e03a      	b.n	8006592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d020      	beq.n	8006566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006524:	4b34      	ldr	r3, [pc, #208]	; (80065f8 <HAL_RCC_OscConfig+0x244>)
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652a:	f7fc fa83 	bl	8002a34 <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006532:	f7fc fa7f 	bl	8002a34 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e1a8      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006544:	4b2b      	ldr	r3, [pc, #172]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0f0      	beq.n	8006532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006550:	4b28      	ldr	r3, [pc, #160]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4925      	ldr	r1, [pc, #148]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006560:	4313      	orrs	r3, r2
 8006562:	600b      	str	r3, [r1, #0]
 8006564:	e015      	b.n	8006592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006566:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <HAL_RCC_OscConfig+0x244>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656c:	f7fc fa62 	bl	8002a34 <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006574:	f7fc fa5e 	bl	8002a34 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e187      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006586:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0308 	and.w	r3, r3, #8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d036      	beq.n	800660c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d016      	beq.n	80065d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <HAL_RCC_OscConfig+0x248>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ac:	f7fc fa42 	bl	8002a34 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b4:	f7fc fa3e 	bl	8002a34 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e167      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065c6:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <HAL_RCC_OscConfig+0x240>)
 80065c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCC_OscConfig+0x200>
 80065d2:	e01b      	b.n	800660c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065d4:	4b09      	ldr	r3, [pc, #36]	; (80065fc <HAL_RCC_OscConfig+0x248>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065da:	f7fc fa2b 	bl	8002a34 <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e0:	e00e      	b.n	8006600 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e2:	f7fc fa27 	bl	8002a34 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d907      	bls.n	8006600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e150      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
 80065f4:	40023800 	.word	0x40023800
 80065f8:	42470000 	.word	0x42470000
 80065fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006600:	4b88      	ldr	r3, [pc, #544]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1ea      	bne.n	80065e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 8097 	beq.w	8006748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800661a:	2300      	movs	r3, #0
 800661c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800661e:	4b81      	ldr	r3, [pc, #516]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10f      	bne.n	800664a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800662a:	2300      	movs	r3, #0
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	4b7d      	ldr	r3, [pc, #500]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	4a7c      	ldr	r2, [pc, #496]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006638:	6413      	str	r3, [r2, #64]	; 0x40
 800663a:	4b7a      	ldr	r3, [pc, #488]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006646:	2301      	movs	r3, #1
 8006648:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664a:	4b77      	ldr	r3, [pc, #476]	; (8006828 <HAL_RCC_OscConfig+0x474>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	2b00      	cmp	r3, #0
 8006654:	d118      	bne.n	8006688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006656:	4b74      	ldr	r3, [pc, #464]	; (8006828 <HAL_RCC_OscConfig+0x474>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a73      	ldr	r2, [pc, #460]	; (8006828 <HAL_RCC_OscConfig+0x474>)
 800665c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006662:	f7fc f9e7 	bl	8002a34 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800666a:	f7fc f9e3 	bl	8002a34 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e10c      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800667c:	4b6a      	ldr	r3, [pc, #424]	; (8006828 <HAL_RCC_OscConfig+0x474>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0f0      	beq.n	800666a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d106      	bne.n	800669e <HAL_RCC_OscConfig+0x2ea>
 8006690:	4b64      	ldr	r3, [pc, #400]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006694:	4a63      	ldr	r2, [pc, #396]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	6713      	str	r3, [r2, #112]	; 0x70
 800669c:	e01c      	b.n	80066d8 <HAL_RCC_OscConfig+0x324>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2b05      	cmp	r3, #5
 80066a4:	d10c      	bne.n	80066c0 <HAL_RCC_OscConfig+0x30c>
 80066a6:	4b5f      	ldr	r3, [pc, #380]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	4a5e      	ldr	r2, [pc, #376]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066ac:	f043 0304 	orr.w	r3, r3, #4
 80066b0:	6713      	str	r3, [r2, #112]	; 0x70
 80066b2:	4b5c      	ldr	r3, [pc, #368]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	4a5b      	ldr	r2, [pc, #364]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066b8:	f043 0301 	orr.w	r3, r3, #1
 80066bc:	6713      	str	r3, [r2, #112]	; 0x70
 80066be:	e00b      	b.n	80066d8 <HAL_RCC_OscConfig+0x324>
 80066c0:	4b58      	ldr	r3, [pc, #352]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c4:	4a57      	ldr	r2, [pc, #348]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	6713      	str	r3, [r2, #112]	; 0x70
 80066cc:	4b55      	ldr	r3, [pc, #340]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d0:	4a54      	ldr	r2, [pc, #336]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80066d2:	f023 0304 	bic.w	r3, r3, #4
 80066d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d015      	beq.n	800670c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e0:	f7fc f9a8 	bl	8002a34 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e6:	e00a      	b.n	80066fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e8:	f7fc f9a4 	bl	8002a34 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e0cb      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066fe:	4b49      	ldr	r3, [pc, #292]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0ee      	beq.n	80066e8 <HAL_RCC_OscConfig+0x334>
 800670a:	e014      	b.n	8006736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800670c:	f7fc f992 	bl	8002a34 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006712:	e00a      	b.n	800672a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006714:	f7fc f98e 	bl	8002a34 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006722:	4293      	cmp	r3, r2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e0b5      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800672a:	4b3e      	ldr	r3, [pc, #248]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1ee      	bne.n	8006714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d105      	bne.n	8006748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800673c:	4b39      	ldr	r3, [pc, #228]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 800673e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006740:	4a38      	ldr	r2, [pc, #224]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006746:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 80a1 	beq.w	8006894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006752:	4b34      	ldr	r3, [pc, #208]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 030c 	and.w	r3, r3, #12
 800675a:	2b08      	cmp	r3, #8
 800675c:	d05c      	beq.n	8006818 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d141      	bne.n	80067ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006766:	4b31      	ldr	r3, [pc, #196]	; (800682c <HAL_RCC_OscConfig+0x478>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800676c:	f7fc f962 	bl	8002a34 <HAL_GetTick>
 8006770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006774:	f7fc f95e 	bl	8002a34 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e087      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006786:	4b27      	ldr	r3, [pc, #156]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f0      	bne.n	8006774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69da      	ldr	r2, [r3, #28]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	019b      	lsls	r3, r3, #6
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	085b      	lsrs	r3, r3, #1
 80067aa:	3b01      	subs	r3, #1
 80067ac:	041b      	lsls	r3, r3, #16
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	061b      	lsls	r3, r3, #24
 80067b6:	491b      	ldr	r1, [pc, #108]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067bc:	4b1b      	ldr	r3, [pc, #108]	; (800682c <HAL_RCC_OscConfig+0x478>)
 80067be:	2201      	movs	r2, #1
 80067c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c2:	f7fc f937 	bl	8002a34 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067c8:	e008      	b.n	80067dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ca:	f7fc f933 	bl	8002a34 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e05c      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067dc:	4b11      	ldr	r3, [pc, #68]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0f0      	beq.n	80067ca <HAL_RCC_OscConfig+0x416>
 80067e8:	e054      	b.n	8006894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ea:	4b10      	ldr	r3, [pc, #64]	; (800682c <HAL_RCC_OscConfig+0x478>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f0:	f7fc f920 	bl	8002a34 <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f8:	f7fc f91c 	bl	8002a34 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e045      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800680a:	4b06      	ldr	r3, [pc, #24]	; (8006824 <HAL_RCC_OscConfig+0x470>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f0      	bne.n	80067f8 <HAL_RCC_OscConfig+0x444>
 8006816:	e03d      	b.n	8006894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d107      	bne.n	8006830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e038      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
 8006824:	40023800 	.word	0x40023800
 8006828:	40007000 	.word	0x40007000
 800682c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006830:	4b1b      	ldr	r3, [pc, #108]	; (80068a0 <HAL_RCC_OscConfig+0x4ec>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d028      	beq.n	8006890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006848:	429a      	cmp	r2, r3
 800684a:	d121      	bne.n	8006890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006856:	429a      	cmp	r2, r3
 8006858:	d11a      	bne.n	8006890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006860:	4013      	ands	r3, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006868:	4293      	cmp	r3, r2
 800686a:	d111      	bne.n	8006890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	3b01      	subs	r3, #1
 800687a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800687c:	429a      	cmp	r2, r3
 800687e:	d107      	bne.n	8006890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800688c:	429a      	cmp	r2, r3
 800688e:	d001      	beq.n	8006894 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40023800 	.word	0x40023800

080068a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0cc      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068b8:	4b68      	ldr	r3, [pc, #416]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d90c      	bls.n	80068e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c6:	4b65      	ldr	r3, [pc, #404]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	4b63      	ldr	r3, [pc, #396]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e0b8      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d020      	beq.n	800692e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068f8:	4b59      	ldr	r3, [pc, #356]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	4a58      	ldr	r2, [pc, #352]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006910:	4b53      	ldr	r3, [pc, #332]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	4a52      	ldr	r2, [pc, #328]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800691a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800691c:	4b50      	ldr	r3, [pc, #320]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	494d      	ldr	r1, [pc, #308]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 800692a:	4313      	orrs	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d044      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d107      	bne.n	8006952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006942:	4b47      	ldr	r3, [pc, #284]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d119      	bne.n	8006982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e07f      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d003      	beq.n	8006962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800695e:	2b03      	cmp	r3, #3
 8006960:	d107      	bne.n	8006972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006962:	4b3f      	ldr	r3, [pc, #252]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e06f      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006972:	4b3b      	ldr	r3, [pc, #236]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e067      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006982:	4b37      	ldr	r3, [pc, #220]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f023 0203 	bic.w	r2, r3, #3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4934      	ldr	r1, [pc, #208]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006990:	4313      	orrs	r3, r2
 8006992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006994:	f7fc f84e 	bl	8002a34 <HAL_GetTick>
 8006998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699a:	e00a      	b.n	80069b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800699c:	f7fc f84a 	bl	8002a34 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e04f      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b2:	4b2b      	ldr	r3, [pc, #172]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 020c 	and.w	r2, r3, #12
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d1eb      	bne.n	800699c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069c4:	4b25      	ldr	r3, [pc, #148]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d20c      	bcs.n	80069ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d2:	4b22      	ldr	r3, [pc, #136]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069da:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <HAL_RCC_ClockConfig+0x1b8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0307 	and.w	r3, r3, #7
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d001      	beq.n	80069ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e032      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f8:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4916      	ldr	r1, [pc, #88]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d009      	beq.n	8006a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a16:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	490e      	ldr	r1, [pc, #56]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a2a:	f000 f821 	bl	8006a70 <HAL_RCC_GetSysClockFreq>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	490a      	ldr	r1, [pc, #40]	; (8006a64 <HAL_RCC_ClockConfig+0x1c0>)
 8006a3c:	5ccb      	ldrb	r3, [r1, r3]
 8006a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a42:	4a09      	ldr	r2, [pc, #36]	; (8006a68 <HAL_RCC_ClockConfig+0x1c4>)
 8006a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a46:	4b09      	ldr	r3, [pc, #36]	; (8006a6c <HAL_RCC_ClockConfig+0x1c8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fb ffae 	bl	80029ac <HAL_InitTick>

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40023c00 	.word	0x40023c00
 8006a60:	40023800 	.word	0x40023800
 8006a64:	0800b190 	.word	0x0800b190
 8006a68:	2000009c 	.word	0x2000009c
 8006a6c:	200000a0 	.word	0x200000a0

08006a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a74:	b090      	sub	sp, #64	; 0x40
 8006a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a80:	2300      	movs	r3, #0
 8006a82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a88:	4b59      	ldr	r3, [pc, #356]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f003 030c 	and.w	r3, r3, #12
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d00d      	beq.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	f200 80a1 	bhi.w	8006bdc <HAL_RCC_GetSysClockFreq+0x16c>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d003      	beq.n	8006aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8006aa2:	e09b      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006aa4:	4b53      	ldr	r3, [pc, #332]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006aa6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006aa8:	e09b      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006aaa:	4b53      	ldr	r3, [pc, #332]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006aac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006aae:	e098      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ab0:	4b4f      	ldr	r3, [pc, #316]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006aba:	4b4d      	ldr	r3, [pc, #308]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d028      	beq.n	8006b18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ac6:	4b4a      	ldr	r3, [pc, #296]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	099b      	lsrs	r3, r3, #6
 8006acc:	2200      	movs	r2, #0
 8006ace:	623b      	str	r3, [r7, #32]
 8006ad0:	627a      	str	r2, [r7, #36]	; 0x24
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4b47      	ldr	r3, [pc, #284]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006adc:	fb03 f201 	mul.w	r2, r3, r1
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	fb00 f303 	mul.w	r3, r0, r3
 8006ae6:	4413      	add	r3, r2
 8006ae8:	4a43      	ldr	r2, [pc, #268]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006aea:	fba0 1202 	umull	r1, r2, r0, r2
 8006aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af0:	460a      	mov	r2, r1
 8006af2:	62ba      	str	r2, [r7, #40]	; 0x28
 8006af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af6:	4413      	add	r3, r2
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afc:	2200      	movs	r2, #0
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	61fa      	str	r2, [r7, #28]
 8006b02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006b0a:	f7fa f8c5 	bl	8000c98 <__aeabi_uldivmod>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4613      	mov	r3, r2
 8006b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b16:	e053      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b18:	4b35      	ldr	r3, [pc, #212]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	099b      	lsrs	r3, r3, #6
 8006b1e:	2200      	movs	r2, #0
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	617a      	str	r2, [r7, #20]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006b2a:	f04f 0b00 	mov.w	fp, #0
 8006b2e:	4652      	mov	r2, sl
 8006b30:	465b      	mov	r3, fp
 8006b32:	f04f 0000 	mov.w	r0, #0
 8006b36:	f04f 0100 	mov.w	r1, #0
 8006b3a:	0159      	lsls	r1, r3, #5
 8006b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b40:	0150      	lsls	r0, r2, #5
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	ebb2 080a 	subs.w	r8, r2, sl
 8006b4a:	eb63 090b 	sbc.w	r9, r3, fp
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b62:	ebb2 0408 	subs.w	r4, r2, r8
 8006b66:	eb63 0509 	sbc.w	r5, r3, r9
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	00eb      	lsls	r3, r5, #3
 8006b74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b78:	00e2      	lsls	r2, r4, #3
 8006b7a:	4614      	mov	r4, r2
 8006b7c:	461d      	mov	r5, r3
 8006b7e:	eb14 030a 	adds.w	r3, r4, sl
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	eb45 030b 	adc.w	r3, r5, fp
 8006b88:	607b      	str	r3, [r7, #4]
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	f04f 0300 	mov.w	r3, #0
 8006b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b96:	4629      	mov	r1, r5
 8006b98:	028b      	lsls	r3, r1, #10
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	028a      	lsls	r2, r1, #10
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006baa:	2200      	movs	r2, #0
 8006bac:	60bb      	str	r3, [r7, #8]
 8006bae:	60fa      	str	r2, [r7, #12]
 8006bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bb4:	f7fa f870 	bl	8000c98 <__aeabi_uldivmod>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	0c1b      	lsrs	r3, r3, #16
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	3301      	adds	r3, #1
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006bda:	e002      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006bde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3740      	adds	r7, #64	; 0x40
 8006be8:	46bd      	mov	sp, r7
 8006bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bee:	bf00      	nop
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	00f42400 	.word	0x00f42400
 8006bf8:	017d7840 	.word	0x017d7840

08006bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c00:	4b03      	ldr	r3, [pc, #12]	; (8006c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c02:	681b      	ldr	r3, [r3, #0]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	2000009c 	.word	0x2000009c

08006c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c18:	f7ff fff0 	bl	8006bfc <HAL_RCC_GetHCLKFreq>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	0a9b      	lsrs	r3, r3, #10
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	4903      	ldr	r1, [pc, #12]	; (8006c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c2a:	5ccb      	ldrb	r3, [r1, r3]
 8006c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	40023800 	.word	0x40023800
 8006c38:	0800b1a0 	.word	0x0800b1a0

08006c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c40:	f7ff ffdc 	bl	8006bfc <HAL_RCC_GetHCLKFreq>
 8006c44:	4602      	mov	r2, r0
 8006c46:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	0b5b      	lsrs	r3, r3, #13
 8006c4c:	f003 0307 	and.w	r3, r3, #7
 8006c50:	4903      	ldr	r1, [pc, #12]	; (8006c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c52:	5ccb      	ldrb	r3, [r1, r3]
 8006c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	0800b1a0 	.word	0x0800b1a0

08006c64 <HAL_TIM_Base_Init>:
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_TIM_Base_Init+0x12>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e041      	b.n	8006cfa <HAL_TIM_Base_Init+0x96>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <HAL_TIM_Base_Init+0x2c>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fb fca4 	bl	80025d8 <HAL_TIM_Base_MspInit>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f000 ff14 	bl	8007ad0 <TIM_Base_SetConfig>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <HAL_TIM_Base_Start_IT>:
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d001      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0x18>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e044      	b.n	8006da6 <HAL_TIM_Base_Start_IT+0xa2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	60da      	str	r2, [r3, #12]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1e      	ldr	r2, [pc, #120]	; (8006db4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x6c>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d46:	d013      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x6c>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1a      	ldr	r2, [pc, #104]	; (8006db8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x6c>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <HAL_TIM_Base_Start_IT+0xb8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x6c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a17      	ldr	r2, [pc, #92]	; (8006dc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x6c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a16      	ldr	r2, [pc, #88]	; (8006dc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d111      	bne.n	8006d94 <HAL_TIM_Base_Start_IT+0x90>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b06      	cmp	r3, #6
 8006d80:	d010      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0xa0>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0201 	orr.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	e007      	b.n	8006da4 <HAL_TIM_Base_Start_IT+0xa0>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	2300      	movs	r3, #0
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40000800 	.word	0x40000800
 8006dc0:	40000c00 	.word	0x40000c00
 8006dc4:	40014000 	.word	0x40014000

08006dc8 <HAL_TIM_Base_Stop_IT>:
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0201 	bic.w	r2, r2, #1
 8006dde:	60da      	str	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6a1a      	ldr	r2, [r3, #32]
 8006de6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10f      	bne.n	8006e10 <HAL_TIM_Base_Stop_IT+0x48>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6a1a      	ldr	r2, [r3, #32]
 8006df6:	f240 4344 	movw	r3, #1092	; 0x444
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d107      	bne.n	8006e10 <HAL_TIM_Base_Stop_IT+0x48>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0201 	bic.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e18:	2300      	movs	r3, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <HAL_TIM_PWM_Init>:
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_TIM_PWM_Init+0x12>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e041      	b.n	8006ebc <HAL_TIM_PWM_Init+0x96>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d106      	bne.n	8006e52 <HAL_TIM_PWM_Init+0x2c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7fb fc41 	bl	80026d4 <HAL_TIM_PWM_MspInit>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2202      	movs	r2, #2
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3304      	adds	r3, #4
 8006e62:	4619      	mov	r1, r3
 8006e64:	4610      	mov	r0, r2
 8006e66:	f000 fe33 	bl	8007ad0 <TIM_Base_SetConfig>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006eba:	2300      	movs	r3, #0
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_TIM_PWM_Start>:
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d109      	bne.n	8006ee8 <HAL_TIM_PWM_Start+0x24>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	bf14      	ite	ne
 8006ee0:	2301      	movne	r3, #1
 8006ee2:	2300      	moveq	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	e022      	b.n	8006f2e <HAL_TIM_PWM_Start+0x6a>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d109      	bne.n	8006f02 <HAL_TIM_PWM_Start+0x3e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	bf14      	ite	ne
 8006efa:	2301      	movne	r3, #1
 8006efc:	2300      	moveq	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	e015      	b.n	8006f2e <HAL_TIM_PWM_Start+0x6a>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d109      	bne.n	8006f1c <HAL_TIM_PWM_Start+0x58>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	bf14      	ite	ne
 8006f14:	2301      	movne	r3, #1
 8006f16:	2300      	moveq	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	e008      	b.n	8006f2e <HAL_TIM_PWM_Start+0x6a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	bf14      	ite	ne
 8006f28:	2301      	movne	r3, #1
 8006f2a:	2300      	moveq	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <HAL_TIM_PWM_Start+0x72>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e068      	b.n	8007008 <HAL_TIM_PWM_Start+0x144>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <HAL_TIM_PWM_Start+0x82>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f44:	e013      	b.n	8006f6e <HAL_TIM_PWM_Start+0xaa>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d104      	bne.n	8006f56 <HAL_TIM_PWM_Start+0x92>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f54:	e00b      	b.n	8006f6e <HAL_TIM_PWM_Start+0xaa>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d104      	bne.n	8006f66 <HAL_TIM_PWM_Start+0xa2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f64:	e003      	b.n	8006f6e <HAL_TIM_PWM_Start+0xaa>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2202      	movs	r2, #2
 8006f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2201      	movs	r2, #1
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 f9e5 	bl	8008346 <TIM_CCxChannelCmd>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a23      	ldr	r2, [pc, #140]	; (8007010 <HAL_TIM_PWM_Start+0x14c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d107      	bne.n	8006f96 <HAL_TIM_PWM_Start+0xd2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f94:	645a      	str	r2, [r3, #68]	; 0x44
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a1d      	ldr	r2, [pc, #116]	; (8007010 <HAL_TIM_PWM_Start+0x14c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d018      	beq.n	8006fd2 <HAL_TIM_PWM_Start+0x10e>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa8:	d013      	beq.n	8006fd2 <HAL_TIM_PWM_Start+0x10e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a19      	ldr	r2, [pc, #100]	; (8007014 <HAL_TIM_PWM_Start+0x150>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00e      	beq.n	8006fd2 <HAL_TIM_PWM_Start+0x10e>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a17      	ldr	r2, [pc, #92]	; (8007018 <HAL_TIM_PWM_Start+0x154>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d009      	beq.n	8006fd2 <HAL_TIM_PWM_Start+0x10e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a16      	ldr	r2, [pc, #88]	; (800701c <HAL_TIM_PWM_Start+0x158>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <HAL_TIM_PWM_Start+0x10e>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a14      	ldr	r2, [pc, #80]	; (8007020 <HAL_TIM_PWM_Start+0x15c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d111      	bne.n	8006ff6 <HAL_TIM_PWM_Start+0x132>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f003 0307 	and.w	r3, r3, #7
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b06      	cmp	r3, #6
 8006fe2:	d010      	beq.n	8007006 <HAL_TIM_PWM_Start+0x142>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0201 	orr.w	r2, r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	e007      	b.n	8007006 <HAL_TIM_PWM_Start+0x142>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0201 	orr.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	2300      	movs	r3, #0
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40010000 	.word	0x40010000
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800
 800701c:	40000c00 	.word	0x40000c00
 8007020:	40014000 	.word	0x40014000

08007024 <HAL_TIM_PWM_Stop>:
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2200      	movs	r2, #0
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	4618      	mov	r0, r3
 8007038:	f001 f985 	bl	8008346 <TIM_CCxChannelCmd>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a29      	ldr	r2, [pc, #164]	; (80070e8 <HAL_TIM_PWM_Stop+0xc4>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d117      	bne.n	8007076 <HAL_TIM_PWM_Stop+0x52>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6a1a      	ldr	r2, [r3, #32]
 800704c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007050:	4013      	ands	r3, r2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10f      	bne.n	8007076 <HAL_TIM_PWM_Stop+0x52>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6a1a      	ldr	r2, [r3, #32]
 800705c:	f240 4344 	movw	r3, #1092	; 0x444
 8007060:	4013      	ands	r3, r2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d107      	bne.n	8007076 <HAL_TIM_PWM_Stop+0x52>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007074:	645a      	str	r2, [r3, #68]	; 0x44
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10f      	bne.n	80070a6 <HAL_TIM_PWM_Stop+0x82>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6a1a      	ldr	r2, [r3, #32]
 800708c:	f240 4344 	movw	r3, #1092	; 0x444
 8007090:	4013      	ands	r3, r2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d107      	bne.n	80070a6 <HAL_TIM_PWM_Stop+0x82>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <HAL_TIM_PWM_Stop+0x92>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070b4:	e013      	b.n	80070de <HAL_TIM_PWM_Stop+0xba>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d104      	bne.n	80070c6 <HAL_TIM_PWM_Stop+0xa2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070c4:	e00b      	b.n	80070de <HAL_TIM_PWM_Stop+0xba>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d104      	bne.n	80070d6 <HAL_TIM_PWM_Stop+0xb2>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070d4:	e003      	b.n	80070de <HAL_TIM_PWM_Stop+0xba>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070de:	2300      	movs	r3, #0
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40010000 	.word	0x40010000

080070ec <HAL_TIM_IC_Init>:
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_TIM_IC_Init+0x12>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e041      	b.n	8007182 <HAL_TIM_IC_Init+0x96>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <HAL_TIM_IC_Init+0x2c>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fb fb1c 	bl	8002750 <HAL_TIM_IC_MspInit>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3304      	adds	r3, #4
 8007128:	4619      	mov	r1, r3
 800712a:	4610      	mov	r0, r2
 800712c:	f000 fcd0 	bl	8007ad0 <TIM_Base_SetConfig>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007180:	2300      	movs	r3, #0
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <HAL_TIM_IC_Start_IT>:
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
 8007196:	2300      	movs	r3, #0
 8007198:	73fb      	strb	r3, [r7, #15]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <HAL_TIM_IC_Start_IT+0x1e>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	e013      	b.n	80071d2 <HAL_TIM_IC_Start_IT+0x46>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d104      	bne.n	80071ba <HAL_TIM_IC_Start_IT+0x2e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	e00b      	b.n	80071d2 <HAL_TIM_IC_Start_IT+0x46>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d104      	bne.n	80071ca <HAL_TIM_IC_Start_IT+0x3e>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	e003      	b.n	80071d2 <HAL_TIM_IC_Start_IT+0x46>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	73bb      	strb	r3, [r7, #14]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d104      	bne.n	80071e4 <HAL_TIM_IC_Start_IT+0x58>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	e013      	b.n	800720c <HAL_TIM_IC_Start_IT+0x80>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d104      	bne.n	80071f4 <HAL_TIM_IC_Start_IT+0x68>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	e00b      	b.n	800720c <HAL_TIM_IC_Start_IT+0x80>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2b08      	cmp	r3, #8
 80071f8:	d104      	bne.n	8007204 <HAL_TIM_IC_Start_IT+0x78>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007200:	b2db      	uxtb	r3, r3
 8007202:	e003      	b.n	800720c <HAL_TIM_IC_Start_IT+0x80>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800720a:	b2db      	uxtb	r3, r3
 800720c:	737b      	strb	r3, [r7, #13]
 800720e:	7bbb      	ldrb	r3, [r7, #14]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d102      	bne.n	800721a <HAL_TIM_IC_Start_IT+0x8e>
 8007214:	7b7b      	ldrb	r3, [r7, #13]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d001      	beq.n	800721e <HAL_TIM_IC_Start_IT+0x92>
 800721a:	2301      	movs	r3, #1
 800721c:	e0c2      	b.n	80073a4 <HAL_TIM_IC_Start_IT+0x218>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d104      	bne.n	800722e <HAL_TIM_IC_Start_IT+0xa2>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800722c:	e013      	b.n	8007256 <HAL_TIM_IC_Start_IT+0xca>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b04      	cmp	r3, #4
 8007232:	d104      	bne.n	800723e <HAL_TIM_IC_Start_IT+0xb2>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800723c:	e00b      	b.n	8007256 <HAL_TIM_IC_Start_IT+0xca>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b08      	cmp	r3, #8
 8007242:	d104      	bne.n	800724e <HAL_TIM_IC_Start_IT+0xc2>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800724c:	e003      	b.n	8007256 <HAL_TIM_IC_Start_IT+0xca>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2202      	movs	r2, #2
 8007252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d104      	bne.n	8007266 <HAL_TIM_IC_Start_IT+0xda>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007264:	e013      	b.n	800728e <HAL_TIM_IC_Start_IT+0x102>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b04      	cmp	r3, #4
 800726a:	d104      	bne.n	8007276 <HAL_TIM_IC_Start_IT+0xea>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007274:	e00b      	b.n	800728e <HAL_TIM_IC_Start_IT+0x102>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b08      	cmp	r3, #8
 800727a:	d104      	bne.n	8007286 <HAL_TIM_IC_Start_IT+0xfa>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007284:	e003      	b.n	800728e <HAL_TIM_IC_Start_IT+0x102>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2202      	movs	r2, #2
 800728a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b0c      	cmp	r3, #12
 8007292:	d841      	bhi.n	8007318 <HAL_TIM_IC_Start_IT+0x18c>
 8007294:	a201      	add	r2, pc, #4	; (adr r2, 800729c <HAL_TIM_IC_Start_IT+0x110>)
 8007296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729a:	bf00      	nop
 800729c:	080072d1 	.word	0x080072d1
 80072a0:	08007319 	.word	0x08007319
 80072a4:	08007319 	.word	0x08007319
 80072a8:	08007319 	.word	0x08007319
 80072ac:	080072e3 	.word	0x080072e3
 80072b0:	08007319 	.word	0x08007319
 80072b4:	08007319 	.word	0x08007319
 80072b8:	08007319 	.word	0x08007319
 80072bc:	080072f5 	.word	0x080072f5
 80072c0:	08007319 	.word	0x08007319
 80072c4:	08007319 	.word	0x08007319
 80072c8:	08007319 	.word	0x08007319
 80072cc:	08007307 	.word	0x08007307
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0202 	orr.w	r2, r2, #2
 80072de:	60da      	str	r2, [r3, #12]
 80072e0:	e01d      	b.n	800731e <HAL_TIM_IC_Start_IT+0x192>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f042 0204 	orr.w	r2, r2, #4
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	e014      	b.n	800731e <HAL_TIM_IC_Start_IT+0x192>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0208 	orr.w	r2, r2, #8
 8007302:	60da      	str	r2, [r3, #12]
 8007304:	e00b      	b.n	800731e <HAL_TIM_IC_Start_IT+0x192>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f042 0210 	orr.w	r2, r2, #16
 8007314:	60da      	str	r2, [r3, #12]
 8007316:	e002      	b.n	800731e <HAL_TIM_IC_Start_IT+0x192>
 8007318:	2301      	movs	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
 800731c:	bf00      	nop
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d13e      	bne.n	80073a2 <HAL_TIM_IC_Start_IT+0x216>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2201      	movs	r2, #1
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f001 f80a 	bl	8008346 <TIM_CCxChannelCmd>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1d      	ldr	r2, [pc, #116]	; (80073ac <HAL_TIM_IC_Start_IT+0x220>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d018      	beq.n	800736e <HAL_TIM_IC_Start_IT+0x1e2>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007344:	d013      	beq.n	800736e <HAL_TIM_IC_Start_IT+0x1e2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a19      	ldr	r2, [pc, #100]	; (80073b0 <HAL_TIM_IC_Start_IT+0x224>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00e      	beq.n	800736e <HAL_TIM_IC_Start_IT+0x1e2>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a17      	ldr	r2, [pc, #92]	; (80073b4 <HAL_TIM_IC_Start_IT+0x228>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d009      	beq.n	800736e <HAL_TIM_IC_Start_IT+0x1e2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a16      	ldr	r2, [pc, #88]	; (80073b8 <HAL_TIM_IC_Start_IT+0x22c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d004      	beq.n	800736e <HAL_TIM_IC_Start_IT+0x1e2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a14      	ldr	r2, [pc, #80]	; (80073bc <HAL_TIM_IC_Start_IT+0x230>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d111      	bne.n	8007392 <HAL_TIM_IC_Start_IT+0x206>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b06      	cmp	r3, #6
 800737e:	d010      	beq.n	80073a2 <HAL_TIM_IC_Start_IT+0x216>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	e007      	b.n	80073a2 <HAL_TIM_IC_Start_IT+0x216>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0201 	orr.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800
 80073b8:	40000c00 	.word	0x40000c00
 80073bc:	40014000 	.word	0x40014000

080073c0 <HAL_TIM_IC_Stop_IT>:
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
 80073ca:	2300      	movs	r3, #0
 80073cc:	73fb      	strb	r3, [r7, #15]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b0c      	cmp	r3, #12
 80073d2:	d841      	bhi.n	8007458 <HAL_TIM_IC_Stop_IT+0x98>
 80073d4:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <HAL_TIM_IC_Stop_IT+0x1c>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	08007411 	.word	0x08007411
 80073e0:	08007459 	.word	0x08007459
 80073e4:	08007459 	.word	0x08007459
 80073e8:	08007459 	.word	0x08007459
 80073ec:	08007423 	.word	0x08007423
 80073f0:	08007459 	.word	0x08007459
 80073f4:	08007459 	.word	0x08007459
 80073f8:	08007459 	.word	0x08007459
 80073fc:	08007435 	.word	0x08007435
 8007400:	08007459 	.word	0x08007459
 8007404:	08007459 	.word	0x08007459
 8007408:	08007459 	.word	0x08007459
 800740c:	08007447 	.word	0x08007447
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0202 	bic.w	r2, r2, #2
 800741e:	60da      	str	r2, [r3, #12]
 8007420:	e01d      	b.n	800745e <HAL_TIM_IC_Stop_IT+0x9e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0204 	bic.w	r2, r2, #4
 8007430:	60da      	str	r2, [r3, #12]
 8007432:	e014      	b.n	800745e <HAL_TIM_IC_Stop_IT+0x9e>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0208 	bic.w	r2, r2, #8
 8007442:	60da      	str	r2, [r3, #12]
 8007444:	e00b      	b.n	800745e <HAL_TIM_IC_Stop_IT+0x9e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0210 	bic.w	r2, r2, #16
 8007454:	60da      	str	r2, [r3, #12]
 8007456:	e002      	b.n	800745e <HAL_TIM_IC_Stop_IT+0x9e>
 8007458:	2301      	movs	r3, #1
 800745a:	73fb      	strb	r3, [r7, #15]
 800745c:	bf00      	nop
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d156      	bne.n	8007512 <HAL_TIM_IC_Stop_IT+0x152>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2200      	movs	r2, #0
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 ff6a 	bl	8008346 <TIM_CCxChannelCmd>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6a1a      	ldr	r2, [r3, #32]
 8007478:	f241 1311 	movw	r3, #4369	; 0x1111
 800747c:	4013      	ands	r3, r2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10f      	bne.n	80074a2 <HAL_TIM_IC_Stop_IT+0xe2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6a1a      	ldr	r2, [r3, #32]
 8007488:	f240 4344 	movw	r3, #1092	; 0x444
 800748c:	4013      	ands	r3, r2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d107      	bne.n	80074a2 <HAL_TIM_IC_Stop_IT+0xe2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0201 	bic.w	r2, r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d104      	bne.n	80074b2 <HAL_TIM_IC_Stop_IT+0xf2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074b0:	e013      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x11a>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d104      	bne.n	80074c2 <HAL_TIM_IC_Stop_IT+0x102>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074c0:	e00b      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x11a>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d104      	bne.n	80074d2 <HAL_TIM_IC_Stop_IT+0x112>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d0:	e003      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x11a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <HAL_TIM_IC_Stop_IT+0x12a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074e8:	e013      	b.n	8007512 <HAL_TIM_IC_Stop_IT+0x152>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d104      	bne.n	80074fa <HAL_TIM_IC_Stop_IT+0x13a>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074f8:	e00b      	b.n	8007512 <HAL_TIM_IC_Stop_IT+0x152>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d104      	bne.n	800750a <HAL_TIM_IC_Stop_IT+0x14a>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007508:	e003      	b.n	8007512 <HAL_TIM_IC_Stop_IT+0x152>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_TIM_IRQHandler>:
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b02      	cmp	r3, #2
 8007530:	d122      	bne.n	8007578 <HAL_TIM_IRQHandler+0x5c>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b02      	cmp	r3, #2
 800753e:	d11b      	bne.n	8007578 <HAL_TIM_IRQHandler+0x5c>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0202 	mvn.w	r2, #2
 8007548:	611a      	str	r2, [r3, #16]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	771a      	strb	r2, [r3, #28]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_TIM_IRQHandler+0x4a>
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fa98 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 8007564:	e005      	b.n	8007572 <HAL_TIM_IRQHandler+0x56>
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fa8a 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fa9b 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	771a      	strb	r2, [r3, #28]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0304 	and.w	r3, r3, #4
 8007582:	2b04      	cmp	r3, #4
 8007584:	d122      	bne.n	80075cc <HAL_TIM_IRQHandler+0xb0>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b04      	cmp	r3, #4
 8007592:	d11b      	bne.n	80075cc <HAL_TIM_IRQHandler+0xb0>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0204 	mvn.w	r2, #4
 800759c:	611a      	str	r2, [r3, #16]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	771a      	strb	r2, [r3, #28]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_TIM_IRQHandler+0x9e>
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa6e 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 80075b8:	e005      	b.n	80075c6 <HAL_TIM_IRQHandler+0xaa>
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa60 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fa71 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	771a      	strb	r2, [r3, #28]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	d122      	bne.n	8007620 <HAL_TIM_IRQHandler+0x104>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d11b      	bne.n	8007620 <HAL_TIM_IRQHandler+0x104>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f06f 0208 	mvn.w	r2, #8
 80075f0:	611a      	str	r2, [r3, #16]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2204      	movs	r2, #4
 80075f6:	771a      	strb	r2, [r3, #28]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_TIM_IRQHandler+0xf2>
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa44 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 800760c:	e005      	b.n	800761a <HAL_TIM_IRQHandler+0xfe>
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa36 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa47 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	771a      	strb	r2, [r3, #28]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	2b10      	cmp	r3, #16
 800762c:	d122      	bne.n	8007674 <HAL_TIM_IRQHandler+0x158>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f003 0310 	and.w	r3, r3, #16
 8007638:	2b10      	cmp	r3, #16
 800763a:	d11b      	bne.n	8007674 <HAL_TIM_IRQHandler+0x158>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0210 	mvn.w	r2, #16
 8007644:	611a      	str	r2, [r3, #16]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2208      	movs	r2, #8
 800764a:	771a      	strb	r2, [r3, #28]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_TIM_IRQHandler+0x146>
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa1a 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 8007660:	e005      	b.n	800766e <HAL_TIM_IRQHandler+0x152>
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa0c 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fa1d 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	771a      	strb	r2, [r3, #28]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b01      	cmp	r3, #1
 8007680:	d10e      	bne.n	80076a0 <HAL_TIM_IRQHandler+0x184>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b01      	cmp	r3, #1
 800768e:	d107      	bne.n	80076a0 <HAL_TIM_IRQHandler+0x184>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0201 	mvn.w	r2, #1
 8007698:	611a      	str	r2, [r3, #16]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f9e6 	bl	8007a6c <HAL_TIM_PeriodElapsedCallback>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	2b80      	cmp	r3, #128	; 0x80
 80076ac:	d10e      	bne.n	80076cc <HAL_TIM_IRQHandler+0x1b0>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b8:	2b80      	cmp	r3, #128	; 0x80
 80076ba:	d107      	bne.n	80076cc <HAL_TIM_IRQHandler+0x1b0>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076c4:	611a      	str	r2, [r3, #16]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 f88e 	bl	80087e8 <HAL_TIMEx_BreakCallback>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	d10e      	bne.n	80076f8 <HAL_TIM_IRQHandler+0x1dc>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e4:	2b40      	cmp	r3, #64	; 0x40
 80076e6:	d107      	bne.n	80076f8 <HAL_TIM_IRQHandler+0x1dc>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076f0:	611a      	str	r2, [r3, #16]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f9e2 	bl	8007abc <HAL_TIM_TriggerCallback>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b20      	cmp	r3, #32
 8007704:	d10e      	bne.n	8007724 <HAL_TIM_IRQHandler+0x208>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b20      	cmp	r3, #32
 8007712:	d107      	bne.n	8007724 <HAL_TIM_IRQHandler+0x208>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f06f 0220 	mvn.w	r2, #32
 800771c:	611a      	str	r2, [r3, #16]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 f858 	bl	80087d4 <HAL_TIMEx_CommutCallback>
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_TIM_IC_ConfigChannel>:
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	2300      	movs	r3, #0
 800773a:	75fb      	strb	r3, [r7, #23]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007746:	2302      	movs	r3, #2
 8007748:	e088      	b.n	800785c <HAL_TIM_IC_ConfigChannel+0x130>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d11b      	bne.n	8007790 <HAL_TIM_IC_ConfigChannel+0x64>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6819      	ldr	r1, [r3, #0]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f000 fc50 	bl	800800c <TIM_TI1_SetConfig>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 020c 	bic.w	r2, r2, #12
 800777a:	619a      	str	r2, [r3, #24]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6999      	ldr	r1, [r3, #24]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	619a      	str	r2, [r3, #24]
 800778e:	e060      	b.n	8007852 <HAL_TIM_IC_ConfigChannel+0x126>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b04      	cmp	r3, #4
 8007794:	d11c      	bne.n	80077d0 <HAL_TIM_IC_ConfigChannel+0xa4>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6819      	ldr	r1, [r3, #0]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f000 fcc8 	bl	800813a <TIM_TI2_SetConfig>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	699a      	ldr	r2, [r3, #24]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80077b8:	619a      	str	r2, [r3, #24]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6999      	ldr	r1, [r3, #24]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	021a      	lsls	r2, r3, #8
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	619a      	str	r2, [r3, #24]
 80077ce:	e040      	b.n	8007852 <HAL_TIM_IC_ConfigChannel+0x126>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	d11b      	bne.n	800780e <HAL_TIM_IC_ConfigChannel+0xe2>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6818      	ldr	r0, [r3, #0]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	6819      	ldr	r1, [r3, #0]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f000 fd15 	bl	8008214 <TIM_TI3_SetConfig>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 020c 	bic.w	r2, r2, #12
 80077f8:	61da      	str	r2, [r3, #28]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69d9      	ldr	r1, [r3, #28]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	61da      	str	r2, [r3, #28]
 800780c:	e021      	b.n	8007852 <HAL_TIM_IC_ConfigChannel+0x126>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b0c      	cmp	r3, #12
 8007812:	d11c      	bne.n	800784e <HAL_TIM_IC_ConfigChannel+0x122>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6818      	ldr	r0, [r3, #0]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6819      	ldr	r1, [r3, #0]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f000 fd32 	bl	800828c <TIM_TI4_SetConfig>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69da      	ldr	r2, [r3, #28]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007836:	61da      	str	r2, [r3, #28]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69d9      	ldr	r1, [r3, #28]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	021a      	lsls	r2, r3, #8
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	61da      	str	r2, [r3, #28]
 800784c:	e001      	b.n	8007852 <HAL_TIM_IC_ConfigChannel+0x126>
 800784e:	2301      	movs	r3, #1
 8007850:	75fb      	strb	r3, [r7, #23]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_TIM_PWM_ConfigChannel>:
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	2300      	movs	r3, #0
 8007872:	75fb      	strb	r3, [r7, #23]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800787e:	2302      	movs	r3, #2
 8007880:	e0ae      	b.n	80079e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b0c      	cmp	r3, #12
 800788e:	f200 809f 	bhi.w	80079d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007892:	a201      	add	r2, pc, #4	; (adr r2, 8007898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007898:	080078cd 	.word	0x080078cd
 800789c:	080079d1 	.word	0x080079d1
 80078a0:	080079d1 	.word	0x080079d1
 80078a4:	080079d1 	.word	0x080079d1
 80078a8:	0800790d 	.word	0x0800790d
 80078ac:	080079d1 	.word	0x080079d1
 80078b0:	080079d1 	.word	0x080079d1
 80078b4:	080079d1 	.word	0x080079d1
 80078b8:	0800794f 	.word	0x0800794f
 80078bc:	080079d1 	.word	0x080079d1
 80078c0:	080079d1 	.word	0x080079d1
 80078c4:	080079d1 	.word	0x080079d1
 80078c8:	0800798f 	.word	0x0800798f
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 f97c 	bl	8007bd0 <TIM_OC1_SetConfig>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699a      	ldr	r2, [r3, #24]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0208 	orr.w	r2, r2, #8
 80078e6:	619a      	str	r2, [r3, #24]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 0204 	bic.w	r2, r2, #4
 80078f6:	619a      	str	r2, [r3, #24]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6999      	ldr	r1, [r3, #24]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	691a      	ldr	r2, [r3, #16]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	619a      	str	r2, [r3, #24]
 800790a:	e064      	b.n	80079d6 <HAL_TIM_PWM_ConfigChannel+0x172>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68b9      	ldr	r1, [r7, #8]
 8007912:	4618      	mov	r0, r3
 8007914:	f000 f9c2 	bl	8007c9c <TIM_OC2_SetConfig>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699a      	ldr	r2, [r3, #24]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007926:	619a      	str	r2, [r3, #24]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699a      	ldr	r2, [r3, #24]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007936:	619a      	str	r2, [r3, #24]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6999      	ldr	r1, [r3, #24]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	021a      	lsls	r2, r3, #8
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	619a      	str	r2, [r3, #24]
 800794c:	e043      	b.n	80079d6 <HAL_TIM_PWM_ConfigChannel+0x172>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68b9      	ldr	r1, [r7, #8]
 8007954:	4618      	mov	r0, r3
 8007956:	f000 fa0d 	bl	8007d74 <TIM_OC3_SetConfig>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69da      	ldr	r2, [r3, #28]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f042 0208 	orr.w	r2, r2, #8
 8007968:	61da      	str	r2, [r3, #28]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	69da      	ldr	r2, [r3, #28]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 0204 	bic.w	r2, r2, #4
 8007978:	61da      	str	r2, [r3, #28]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	69d9      	ldr	r1, [r3, #28]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	61da      	str	r2, [r3, #28]
 800798c:	e023      	b.n	80079d6 <HAL_TIM_PWM_ConfigChannel+0x172>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	4618      	mov	r0, r3
 8007996:	f000 fa57 	bl	8007e48 <TIM_OC4_SetConfig>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	69da      	ldr	r2, [r3, #28]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079a8:	61da      	str	r2, [r3, #28]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	69da      	ldr	r2, [r3, #28]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b8:	61da      	str	r2, [r3, #28]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	69d9      	ldr	r1, [r3, #28]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	021a      	lsls	r2, r3, #8
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	61da      	str	r2, [r3, #28]
 80079ce:	e002      	b.n	80079d6 <HAL_TIM_PWM_ConfigChannel+0x172>
 80079d0:	2301      	movs	r3, #1
 80079d2:	75fb      	strb	r3, [r7, #23]
 80079d4:	bf00      	nop
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_TIM_SlaveConfigSynchro>:
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_TIM_SlaveConfigSynchro+0x18>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e031      	b.n	8007a64 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa68 	bl	8007ee8 <TIM_SlaveTimer_SetConfig>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d009      	beq.n	8007a32 <HAL_TIM_SlaveConfigSynchro+0x4a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e018      	b.n	8007a64 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a40:	60da      	str	r2, [r3, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a50:	60da      	str	r2, [r3, #12]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a62:	2300      	movs	r3, #0
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <HAL_TIM_PeriodElapsedCallback>:
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_TIM_OC_DelayElapsedCallback>:
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_TIM_IC_CaptureCallback>:
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_TIM_TriggerCallback>:
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <TIM_Base_SetConfig>:
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a34      	ldr	r2, [pc, #208]	; (8007bb4 <TIM_Base_SetConfig+0xe4>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00f      	beq.n	8007b08 <TIM_Base_SetConfig+0x38>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aee:	d00b      	beq.n	8007b08 <TIM_Base_SetConfig+0x38>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a31      	ldr	r2, [pc, #196]	; (8007bb8 <TIM_Base_SetConfig+0xe8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d007      	beq.n	8007b08 <TIM_Base_SetConfig+0x38>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a30      	ldr	r2, [pc, #192]	; (8007bbc <TIM_Base_SetConfig+0xec>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d003      	beq.n	8007b08 <TIM_Base_SetConfig+0x38>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a2f      	ldr	r2, [pc, #188]	; (8007bc0 <TIM_Base_SetConfig+0xf0>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d108      	bne.n	8007b1a <TIM_Base_SetConfig+0x4a>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a25      	ldr	r2, [pc, #148]	; (8007bb4 <TIM_Base_SetConfig+0xe4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d01b      	beq.n	8007b5a <TIM_Base_SetConfig+0x8a>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b28:	d017      	beq.n	8007b5a <TIM_Base_SetConfig+0x8a>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a22      	ldr	r2, [pc, #136]	; (8007bb8 <TIM_Base_SetConfig+0xe8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d013      	beq.n	8007b5a <TIM_Base_SetConfig+0x8a>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a21      	ldr	r2, [pc, #132]	; (8007bbc <TIM_Base_SetConfig+0xec>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d00f      	beq.n	8007b5a <TIM_Base_SetConfig+0x8a>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a20      	ldr	r2, [pc, #128]	; (8007bc0 <TIM_Base_SetConfig+0xf0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00b      	beq.n	8007b5a <TIM_Base_SetConfig+0x8a>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a1f      	ldr	r2, [pc, #124]	; (8007bc4 <TIM_Base_SetConfig+0xf4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d007      	beq.n	8007b5a <TIM_Base_SetConfig+0x8a>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a1e      	ldr	r2, [pc, #120]	; (8007bc8 <TIM_Base_SetConfig+0xf8>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d003      	beq.n	8007b5a <TIM_Base_SetConfig+0x8a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a1d      	ldr	r2, [pc, #116]	; (8007bcc <TIM_Base_SetConfig+0xfc>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d108      	bne.n	8007b6c <TIM_Base_SetConfig+0x9c>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a08      	ldr	r2, [pc, #32]	; (8007bb4 <TIM_Base_SetConfig+0xe4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d103      	bne.n	8007ba0 <TIM_Base_SetConfig+0xd0>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	615a      	str	r2, [r3, #20]
 8007ba6:	bf00      	nop
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	40010000 	.word	0x40010000
 8007bb8:	40000400 	.word	0x40000400
 8007bbc:	40000800 	.word	0x40000800
 8007bc0:	40000c00 	.word	0x40000c00
 8007bc4:	40014000 	.word	0x40014000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800

08007bd0 <TIM_OC1_SetConfig>:
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	f023 0201 	bic.w	r2, r3, #1
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	621a      	str	r2, [r3, #32]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	613b      	str	r3, [r7, #16]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0303 	bic.w	r3, r3, #3
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f023 0302 	bic.w	r3, r3, #2
 8007c18:	617b      	str	r3, [r7, #20]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a1c      	ldr	r2, [pc, #112]	; (8007c98 <TIM_OC1_SetConfig+0xc8>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d10c      	bne.n	8007c46 <TIM_OC1_SetConfig+0x76>
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f023 0308 	bic.w	r3, r3, #8
 8007c32:	617b      	str	r3, [r7, #20]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f023 0304 	bic.w	r3, r3, #4
 8007c44:	617b      	str	r3, [r7, #20]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a13      	ldr	r2, [pc, #76]	; (8007c98 <TIM_OC1_SetConfig+0xc8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d111      	bne.n	8007c72 <TIM_OC1_SetConfig+0xa2>
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c5c:	613b      	str	r3, [r7, #16]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	613b      	str	r3, [r7, #16]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	605a      	str	r2, [r3, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	619a      	str	r2, [r3, #24]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	635a      	str	r2, [r3, #52]	; 0x34
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	621a      	str	r2, [r3, #32]
 8007c8c:	bf00      	nop
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	40010000 	.word	0x40010000

08007c9c <TIM_OC2_SetConfig>:
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	f023 0210 	bic.w	r2, r3, #16
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	621a      	str	r2, [r3, #32]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f023 0320 	bic.w	r3, r3, #32
 8007ce6:	617b      	str	r3, [r7, #20]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a1e      	ldr	r2, [pc, #120]	; (8007d70 <TIM_OC2_SetConfig+0xd4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d10d      	bne.n	8007d18 <TIM_OC2_SetConfig+0x7c>
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	011b      	lsls	r3, r3, #4
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d16:	617b      	str	r3, [r7, #20]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a15      	ldr	r2, [pc, #84]	; (8007d70 <TIM_OC2_SetConfig+0xd4>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d113      	bne.n	8007d48 <TIM_OC2_SetConfig+0xac>
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d26:	613b      	str	r3, [r7, #16]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	605a      	str	r2, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	619a      	str	r2, [r3, #24]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	621a      	str	r2, [r3, #32]
 8007d62:	bf00      	nop
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	40010000 	.word	0x40010000

08007d74 <TIM_OC3_SetConfig>:
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	621a      	str	r2, [r3, #32]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	60fb      	str	r3, [r7, #12]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0303 	bic.w	r3, r3, #3
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dbc:	617b      	str	r3, [r7, #20]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	021b      	lsls	r3, r3, #8
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a1d      	ldr	r2, [pc, #116]	; (8007e44 <TIM_OC3_SetConfig+0xd0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d10d      	bne.n	8007dee <TIM_OC3_SetConfig+0x7a>
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dd8:	617b      	str	r3, [r7, #20]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	021b      	lsls	r3, r3, #8
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a14      	ldr	r2, [pc, #80]	; (8007e44 <TIM_OC3_SetConfig+0xd0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d113      	bne.n	8007e1e <TIM_OC3_SetConfig+0xaa>
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dfc:	613b      	str	r3, [r7, #16]
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e04:	613b      	str	r3, [r7, #16]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	613b      	str	r3, [r7, #16]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	605a      	str	r2, [r3, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	61da      	str	r2, [r3, #28]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	63da      	str	r2, [r3, #60]	; 0x3c
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	621a      	str	r2, [r3, #32]
 8007e38:	bf00      	nop
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	40010000 	.word	0x40010000

08007e48 <TIM_OC4_SetConfig>:
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	621a      	str	r2, [r3, #32]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	613b      	str	r3, [r7, #16]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	021b      	lsls	r3, r3, #8
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e92:	613b      	str	r3, [r7, #16]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	031b      	lsls	r3, r3, #12
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a10      	ldr	r2, [pc, #64]	; (8007ee4 <TIM_OC4_SetConfig+0x9c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d109      	bne.n	8007ebc <TIM_OC4_SetConfig+0x74>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	019b      	lsls	r3, r3, #6
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	605a      	str	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	61da      	str	r2, [r3, #28]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	641a      	str	r2, [r3, #64]	; 0x40
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	621a      	str	r2, [r3, #32]
 8007ed6:	bf00      	nop
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40010000 	.word	0x40010000

08007ee8 <TIM_SlaveTimer_SetConfig>:
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	613b      	str	r3, [r7, #16]
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f04:	613b      	str	r3, [r7, #16]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	613b      	str	r3, [r7, #16]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f023 0307 	bic.w	r3, r3, #7
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	609a      	str	r2, [r3, #8]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	2b70      	cmp	r3, #112	; 0x70
 8007f30:	d01a      	beq.n	8007f68 <TIM_SlaveTimer_SetConfig+0x80>
 8007f32:	2b70      	cmp	r3, #112	; 0x70
 8007f34:	d860      	bhi.n	8007ff8 <TIM_SlaveTimer_SetConfig+0x110>
 8007f36:	2b60      	cmp	r3, #96	; 0x60
 8007f38:	d054      	beq.n	8007fe4 <TIM_SlaveTimer_SetConfig+0xfc>
 8007f3a:	2b60      	cmp	r3, #96	; 0x60
 8007f3c:	d85c      	bhi.n	8007ff8 <TIM_SlaveTimer_SetConfig+0x110>
 8007f3e:	2b50      	cmp	r3, #80	; 0x50
 8007f40:	d046      	beq.n	8007fd0 <TIM_SlaveTimer_SetConfig+0xe8>
 8007f42:	2b50      	cmp	r3, #80	; 0x50
 8007f44:	d858      	bhi.n	8007ff8 <TIM_SlaveTimer_SetConfig+0x110>
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	d019      	beq.n	8007f7e <TIM_SlaveTimer_SetConfig+0x96>
 8007f4a:	2b40      	cmp	r3, #64	; 0x40
 8007f4c:	d854      	bhi.n	8007ff8 <TIM_SlaveTimer_SetConfig+0x110>
 8007f4e:	2b30      	cmp	r3, #48	; 0x30
 8007f50:	d055      	beq.n	8007ffe <TIM_SlaveTimer_SetConfig+0x116>
 8007f52:	2b30      	cmp	r3, #48	; 0x30
 8007f54:	d850      	bhi.n	8007ff8 <TIM_SlaveTimer_SetConfig+0x110>
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d051      	beq.n	8007ffe <TIM_SlaveTimer_SetConfig+0x116>
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	d84c      	bhi.n	8007ff8 <TIM_SlaveTimer_SetConfig+0x110>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d04d      	beq.n	8007ffe <TIM_SlaveTimer_SetConfig+0x116>
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d04b      	beq.n	8007ffe <TIM_SlaveTimer_SetConfig+0x116>
 8007f66:	e047      	b.n	8007ff8 <TIM_SlaveTimer_SetConfig+0x110>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	68d9      	ldr	r1, [r3, #12]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	f000 f9c5 	bl	8008306 <TIM_ETR_SetConfig>
 8007f7c:	e040      	b.n	8008000 <TIM_SlaveTimer_SetConfig+0x118>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	d101      	bne.n	8007f8a <TIM_SlaveTimer_SetConfig+0xa2>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e03b      	b.n	8008002 <TIM_SlaveTimer_SetConfig+0x11a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6a1a      	ldr	r2, [r3, #32]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0201 	bic.w	r2, r2, #1
 8007fa0:	621a      	str	r2, [r3, #32]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	60bb      	str	r3, [r7, #8]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fb0:	60bb      	str	r3, [r7, #8]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60bb      	str	r3, [r7, #8]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	619a      	str	r2, [r3, #24]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	621a      	str	r2, [r3, #32]
 8007fce:	e017      	b.n	8008000 <TIM_SlaveTimer_SetConfig+0x118>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6818      	ldr	r0, [r3, #0]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	6899      	ldr	r1, [r3, #8]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f000 f87d 	bl	80080dc <TIM_TI1_ConfigInputStage>
 8007fe2:	e00d      	b.n	8008000 <TIM_SlaveTimer_SetConfig+0x118>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	6899      	ldr	r1, [r3, #8]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f000 f8df 	bl	80081b4 <TIM_TI2_ConfigInputStage>
 8007ff6:	e003      	b.n	8008000 <TIM_SlaveTimer_SetConfig+0x118>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	75fb      	strb	r3, [r7, #23]
 8007ffc:	e000      	b.n	8008000 <TIM_SlaveTimer_SetConfig+0x118>
 8007ffe:	bf00      	nop
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <TIM_TI1_SetConfig>:
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	f023 0201 	bic.w	r2, r3, #1
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	621a      	str	r2, [r3, #32]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4a24      	ldr	r2, [pc, #144]	; (80080c8 <TIM_TI1_SetConfig+0xbc>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <TIM_TI1_SetConfig+0x56>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008040:	d00f      	beq.n	8008062 <TIM_TI1_SetConfig+0x56>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4a21      	ldr	r2, [pc, #132]	; (80080cc <TIM_TI1_SetConfig+0xc0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00b      	beq.n	8008062 <TIM_TI1_SetConfig+0x56>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4a20      	ldr	r2, [pc, #128]	; (80080d0 <TIM_TI1_SetConfig+0xc4>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d007      	beq.n	8008062 <TIM_TI1_SetConfig+0x56>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4a1f      	ldr	r2, [pc, #124]	; (80080d4 <TIM_TI1_SetConfig+0xc8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d003      	beq.n	8008062 <TIM_TI1_SetConfig+0x56>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4a1e      	ldr	r2, [pc, #120]	; (80080d8 <TIM_TI1_SetConfig+0xcc>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d101      	bne.n	8008066 <TIM_TI1_SetConfig+0x5a>
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <TIM_TI1_SetConfig+0x5c>
 8008066:	2300      	movs	r3, #0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d008      	beq.n	800807e <TIM_TI1_SetConfig+0x72>
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f023 0303 	bic.w	r3, r3, #3
 8008072:	617b      	str	r3, [r7, #20]
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4313      	orrs	r3, r2
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	e003      	b.n	8008086 <TIM_TI1_SetConfig+0x7a>
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f043 0301 	orr.w	r3, r3, #1
 8008084:	617b      	str	r3, [r7, #20]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800808c:	617b      	str	r3, [r7, #20]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	011b      	lsls	r3, r3, #4
 8008092:	b2db      	uxtb	r3, r3
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f023 030a 	bic.w	r3, r3, #10
 80080a0:	613b      	str	r3, [r7, #16]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f003 030a 	and.w	r3, r3, #10
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	613b      	str	r3, [r7, #16]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	619a      	str	r2, [r3, #24]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	621a      	str	r2, [r3, #32]
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40010000 	.word	0x40010000
 80080cc:	40000400 	.word	0x40000400
 80080d0:	40000800 	.word	0x40000800
 80080d4:	40000c00 	.word	0x40000c00
 80080d8:	40014000 	.word	0x40014000

080080dc <TIM_TI1_ConfigInputStage>:
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0201 	bic.w	r2, r3, #1
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	621a      	str	r2, [r3, #32]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f023 030a 	bic.w	r3, r3, #10
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4313      	orrs	r3, r2
 8008120:	617b      	str	r3, [r7, #20]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	619a      	str	r2, [r3, #24]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	621a      	str	r2, [r3, #32]
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <TIM_TI2_SetConfig>:
 800813a:	b480      	push	{r7}
 800813c:	b087      	sub	sp, #28
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	607a      	str	r2, [r7, #4]
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	f023 0210 	bic.w	r2, r3, #16
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	621a      	str	r2, [r3, #32]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	613b      	str	r3, [r7, #16]
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	021b      	lsls	r3, r3, #8
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	031b      	lsls	r3, r3, #12
 800817e:	b29b      	uxth	r3, r3
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4313      	orrs	r3, r2
 800819a:	613b      	str	r3, [r7, #16]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	619a      	str	r2, [r3, #24]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	621a      	str	r2, [r3, #32]
 80081a8:	bf00      	nop
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <TIM_TI2_ConfigInputStage>:
 80081b4:	b480      	push	{r7}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	f023 0210 	bic.w	r2, r3, #16
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	621a      	str	r2, [r3, #32]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	613b      	str	r3, [r7, #16]
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	031b      	lsls	r3, r3, #12
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081f0:	613b      	str	r3, [r7, #16]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	011b      	lsls	r3, r3, #4
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	613b      	str	r3, [r7, #16]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	619a      	str	r2, [r3, #24]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	621a      	str	r2, [r3, #32]
 8008208:	bf00      	nop
 800820a:	371c      	adds	r7, #28
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <TIM_TI3_SetConfig>:
 8008214:	b480      	push	{r7}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	621a      	str	r2, [r3, #32]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f023 0303 	bic.w	r3, r3, #3
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4313      	orrs	r3, r2
 8008248:	617b      	str	r3, [r7, #20]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008250:	617b      	str	r3, [r7, #20]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	b2db      	uxtb	r3, r3
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008264:	613b      	str	r3, [r7, #16]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	4313      	orrs	r3, r2
 8008272:	613b      	str	r3, [r7, #16]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	61da      	str	r2, [r3, #28]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	621a      	str	r2, [r3, #32]
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <TIM_TI4_SetConfig>:
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	621a      	str	r2, [r3, #32]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	617b      	str	r3, [r7, #20]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	613b      	str	r3, [r7, #16]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	031b      	lsls	r3, r3, #12
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80082de:	613b      	str	r3, [r7, #16]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	031b      	lsls	r3, r3, #12
 80082e4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	61da      	str	r2, [r3, #28]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	621a      	str	r2, [r3, #32]
 80082fa:	bf00      	nop
 80082fc:	371c      	adds	r7, #28
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <TIM_ETR_SetConfig>:
 8008306:	b480      	push	{r7}
 8008308:	b087      	sub	sp, #28
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	607a      	str	r2, [r7, #4]
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008320:	617b      	str	r3, [r7, #20]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	021a      	lsls	r2, r3, #8
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	431a      	orrs	r2, r3
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4313      	orrs	r3, r2
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	609a      	str	r2, [r3, #8]
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <TIM_CCxChannelCmd>:
 8008346:	b480      	push	{r7}
 8008348:	b087      	sub	sp, #28
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	2201      	movs	r2, #1
 800835a:	fa02 f303 	lsl.w	r3, r2, r3
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6a1a      	ldr	r2, [r3, #32]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	43db      	mvns	r3, r3
 8008368:	401a      	ands	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	621a      	str	r2, [r3, #32]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6a1a      	ldr	r2, [r3, #32]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f003 031f 	and.w	r3, r3, #31
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	fa01 f303 	lsl.w	r3, r1, r3
 800837e:	431a      	orrs	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	621a      	str	r2, [r3, #32]
 8008384:	bf00      	nop
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIMEx_HallSensor_Init>:
 8008390:	b580      	push	{r7, lr}
 8008392:	b08a      	sub	sp, #40	; 0x28
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <HAL_TIMEx_HallSensor_Init+0x14>
 80083a0:	2301      	movs	r3, #1
 80083a2:	e09a      	b.n	80084da <HAL_TIMEx_HallSensor_Init+0x14a>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d106      	bne.n	80083be <HAL_TIMEx_HallSensor_Init+0x2e>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7fa f93d 	bl	8002638 <HAL_TIMEx_HallSensor_MspInit>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2202      	movs	r2, #2
 80083c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3304      	adds	r3, #4
 80083ce:	4619      	mov	r1, r3
 80083d0:	4610      	mov	r0, r2
 80083d2:	f7ff fb7d 	bl	8007ad0 <TIM_Base_SetConfig>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	6819      	ldr	r1, [r3, #0]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	2203      	movs	r2, #3
 80083e4:	f7ff fe12 	bl	800800c <TIM_TI1_SetConfig>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 020c 	bic.w	r2, r2, #12
 80083f6:	619a      	str	r2, [r3, #24]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6999      	ldr	r1, [r3, #24]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	619a      	str	r2, [r3, #24]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008418:	605a      	str	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008428:	609a      	str	r2, [r3, #8]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008438:	609a      	str	r2, [r3, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0207 	bic.w	r2, r2, #7
 8008448:	609a      	str	r2, [r3, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f042 0204 	orr.w	r2, r2, #4
 8008458:	609a      	str	r2, [r3, #8]
 800845a:	2300      	movs	r3, #0
 800845c:	61fb      	str	r3, [r7, #28]
 800845e:	2300      	movs	r3, #0
 8008460:	623b      	str	r3, [r7, #32]
 8008462:	2370      	movs	r3, #112	; 0x70
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	2300      	movs	r3, #0
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
 800846a:	2300      	movs	r3, #0
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	2300      	movs	r3, #0
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	613b      	str	r3, [r7, #16]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f107 020c 	add.w	r2, r7, #12
 8008480:	4611      	mov	r1, r2
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff fc0a 	bl	8007c9c <TIM_OC2_SetConfig>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008496:	605a      	str	r2, [r3, #4]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80084a6:	605a      	str	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80084d8:	2300      	movs	r3, #0
 80084da:	4618      	mov	r0, r3
 80084dc:	3728      	adds	r7, #40	; 0x28
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <HAL_TIMEx_HallSensor_Start>:
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084f2:	73fb      	strb	r3, [r7, #15]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084fa:	73bb      	strb	r3, [r7, #14]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008502:	737b      	strb	r3, [r7, #13]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800850a:	733b      	strb	r3, [r7, #12]
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d108      	bne.n	8008524 <HAL_TIMEx_HallSensor_Start+0x40>
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d105      	bne.n	8008524 <HAL_TIMEx_HallSensor_Start+0x40>
 8008518:	7b7b      	ldrb	r3, [r7, #13]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d102      	bne.n	8008524 <HAL_TIMEx_HallSensor_Start+0x40>
 800851e:	7b3b      	ldrb	r3, [r7, #12]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d001      	beq.n	8008528 <HAL_TIMEx_HallSensor_Start+0x44>
 8008524:	2301      	movs	r3, #1
 8008526:	e04f      	b.n	80085c8 <HAL_TIMEx_HallSensor_Start+0xe4>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2202      	movs	r2, #2
 800852c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2201      	movs	r2, #1
 800854e:	2100      	movs	r1, #0
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff fef8 	bl	8008346 <TIM_CCxChannelCmd>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a1d      	ldr	r2, [pc, #116]	; (80085d0 <HAL_TIMEx_HallSensor_Start+0xec>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d018      	beq.n	8008592 <HAL_TIMEx_HallSensor_Start+0xae>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008568:	d013      	beq.n	8008592 <HAL_TIMEx_HallSensor_Start+0xae>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a19      	ldr	r2, [pc, #100]	; (80085d4 <HAL_TIMEx_HallSensor_Start+0xf0>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d00e      	beq.n	8008592 <HAL_TIMEx_HallSensor_Start+0xae>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a17      	ldr	r2, [pc, #92]	; (80085d8 <HAL_TIMEx_HallSensor_Start+0xf4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d009      	beq.n	8008592 <HAL_TIMEx_HallSensor_Start+0xae>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a16      	ldr	r2, [pc, #88]	; (80085dc <HAL_TIMEx_HallSensor_Start+0xf8>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d004      	beq.n	8008592 <HAL_TIMEx_HallSensor_Start+0xae>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a14      	ldr	r2, [pc, #80]	; (80085e0 <HAL_TIMEx_HallSensor_Start+0xfc>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d111      	bne.n	80085b6 <HAL_TIMEx_HallSensor_Start+0xd2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	60bb      	str	r3, [r7, #8]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b06      	cmp	r3, #6
 80085a2:	d010      	beq.n	80085c6 <HAL_TIMEx_HallSensor_Start+0xe2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0201 	orr.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	e007      	b.n	80085c6 <HAL_TIMEx_HallSensor_Start+0xe2>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0201 	orr.w	r2, r2, #1
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	2300      	movs	r3, #0
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	40010000 	.word	0x40010000
 80085d4:	40000400 	.word	0x40000400
 80085d8:	40000800 	.word	0x40000800
 80085dc:	40000c00 	.word	0x40000c00
 80085e0:	40014000 	.word	0x40014000

080085e4 <HAL_TIMEx_HallSensor_Stop>:
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2200      	movs	r2, #0
 80085f2:	2100      	movs	r1, #0
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff fea6 	bl	8008346 <TIM_CCxChannelCmd>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6a1a      	ldr	r2, [r3, #32]
 8008600:	f241 1311 	movw	r3, #4369	; 0x1111
 8008604:	4013      	ands	r3, r2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10f      	bne.n	800862a <HAL_TIMEx_HallSensor_Stop+0x46>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6a1a      	ldr	r2, [r3, #32]
 8008610:	f240 4344 	movw	r3, #1092	; 0x444
 8008614:	4013      	ands	r3, r2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d107      	bne.n	800862a <HAL_TIMEx_HallSensor_Stop+0x46>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 0201 	bic.w	r2, r2, #1
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800864a:	2300      	movs	r3, #0
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_TIMEx_MasterConfigSynchronization>:
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008664:	2b01      	cmp	r3, #1
 8008666:	d101      	bne.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008668:	2302      	movs	r3, #2
 800866a:	e050      	b.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2202      	movs	r2, #2
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	60bb      	str	r3, [r7, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	4313      	orrs	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	605a      	str	r2, [r3, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a1c      	ldr	r2, [pc, #112]	; (800871c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d018      	beq.n	80086e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b8:	d013      	beq.n	80086e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a18      	ldr	r2, [pc, #96]	; (8008720 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d00e      	beq.n	80086e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a16      	ldr	r2, [pc, #88]	; (8008724 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d009      	beq.n	80086e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a15      	ldr	r2, [pc, #84]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d004      	beq.n	80086e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a13      	ldr	r2, [pc, #76]	; (800872c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d10c      	bne.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086e8:	60bb      	str	r3, [r7, #8]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	60bb      	str	r3, [r7, #8]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	609a      	str	r2, [r3, #8]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800870c:	2300      	movs	r3, #0
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	40010000 	.word	0x40010000
 8008720:	40000400 	.word	0x40000400
 8008724:	40000800 	.word	0x40000800
 8008728:	40000c00 	.word	0x40000c00
 800872c:	40014000 	.word	0x40014000

08008730 <HAL_TIMEx_ConfigBreakDeadTime>:
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008748:	2302      	movs	r3, #2
 800874a:	e03d      	b.n	80087c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	4313      	orrs	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	645a      	str	r2, [r3, #68]	; 0x44
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80087c6:	2300      	movs	r3, #0
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_TIMEx_CommutCallback>:
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <HAL_TIMEx_BreakCallback>:
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <__cvt>:
 80087fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008800:	ec55 4b10 	vmov	r4, r5, d0
 8008804:	2d00      	cmp	r5, #0
 8008806:	460e      	mov	r6, r1
 8008808:	4619      	mov	r1, r3
 800880a:	462b      	mov	r3, r5
 800880c:	bfbb      	ittet	lt
 800880e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008812:	461d      	movlt	r5, r3
 8008814:	2300      	movge	r3, #0
 8008816:	232d      	movlt	r3, #45	; 0x2d
 8008818:	700b      	strb	r3, [r1, #0]
 800881a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800881c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008820:	4691      	mov	r9, r2
 8008822:	f023 0820 	bic.w	r8, r3, #32
 8008826:	bfbc      	itt	lt
 8008828:	4622      	movlt	r2, r4
 800882a:	4614      	movlt	r4, r2
 800882c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008830:	d005      	beq.n	800883e <__cvt+0x42>
 8008832:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008836:	d100      	bne.n	800883a <__cvt+0x3e>
 8008838:	3601      	adds	r6, #1
 800883a:	2102      	movs	r1, #2
 800883c:	e000      	b.n	8008840 <__cvt+0x44>
 800883e:	2103      	movs	r1, #3
 8008840:	ab03      	add	r3, sp, #12
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	ab02      	add	r3, sp, #8
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	ec45 4b10 	vmov	d0, r4, r5
 800884c:	4653      	mov	r3, sl
 800884e:	4632      	mov	r2, r6
 8008850:	f000 fe4a 	bl	80094e8 <_dtoa_r>
 8008854:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008858:	4607      	mov	r7, r0
 800885a:	d102      	bne.n	8008862 <__cvt+0x66>
 800885c:	f019 0f01 	tst.w	r9, #1
 8008860:	d022      	beq.n	80088a8 <__cvt+0xac>
 8008862:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008866:	eb07 0906 	add.w	r9, r7, r6
 800886a:	d110      	bne.n	800888e <__cvt+0x92>
 800886c:	783b      	ldrb	r3, [r7, #0]
 800886e:	2b30      	cmp	r3, #48	; 0x30
 8008870:	d10a      	bne.n	8008888 <__cvt+0x8c>
 8008872:	2200      	movs	r2, #0
 8008874:	2300      	movs	r3, #0
 8008876:	4620      	mov	r0, r4
 8008878:	4629      	mov	r1, r5
 800887a:	f7f8 f92d 	bl	8000ad8 <__aeabi_dcmpeq>
 800887e:	b918      	cbnz	r0, 8008888 <__cvt+0x8c>
 8008880:	f1c6 0601 	rsb	r6, r6, #1
 8008884:	f8ca 6000 	str.w	r6, [sl]
 8008888:	f8da 3000 	ldr.w	r3, [sl]
 800888c:	4499      	add	r9, r3
 800888e:	2200      	movs	r2, #0
 8008890:	2300      	movs	r3, #0
 8008892:	4620      	mov	r0, r4
 8008894:	4629      	mov	r1, r5
 8008896:	f7f8 f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800889a:	b108      	cbz	r0, 80088a0 <__cvt+0xa4>
 800889c:	f8cd 900c 	str.w	r9, [sp, #12]
 80088a0:	2230      	movs	r2, #48	; 0x30
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	454b      	cmp	r3, r9
 80088a6:	d307      	bcc.n	80088b8 <__cvt+0xbc>
 80088a8:	9b03      	ldr	r3, [sp, #12]
 80088aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088ac:	1bdb      	subs	r3, r3, r7
 80088ae:	4638      	mov	r0, r7
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	b004      	add	sp, #16
 80088b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b8:	1c59      	adds	r1, r3, #1
 80088ba:	9103      	str	r1, [sp, #12]
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	e7f0      	b.n	80088a2 <__cvt+0xa6>

080088c0 <__exponent>:
 80088c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088c2:	4603      	mov	r3, r0
 80088c4:	2900      	cmp	r1, #0
 80088c6:	bfb8      	it	lt
 80088c8:	4249      	neglt	r1, r1
 80088ca:	f803 2b02 	strb.w	r2, [r3], #2
 80088ce:	bfb4      	ite	lt
 80088d0:	222d      	movlt	r2, #45	; 0x2d
 80088d2:	222b      	movge	r2, #43	; 0x2b
 80088d4:	2909      	cmp	r1, #9
 80088d6:	7042      	strb	r2, [r0, #1]
 80088d8:	dd2a      	ble.n	8008930 <__exponent+0x70>
 80088da:	f10d 0207 	add.w	r2, sp, #7
 80088de:	4617      	mov	r7, r2
 80088e0:	260a      	movs	r6, #10
 80088e2:	4694      	mov	ip, r2
 80088e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80088e8:	fb06 1415 	mls	r4, r6, r5, r1
 80088ec:	3430      	adds	r4, #48	; 0x30
 80088ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80088f2:	460c      	mov	r4, r1
 80088f4:	2c63      	cmp	r4, #99	; 0x63
 80088f6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80088fa:	4629      	mov	r1, r5
 80088fc:	dcf1      	bgt.n	80088e2 <__exponent+0x22>
 80088fe:	3130      	adds	r1, #48	; 0x30
 8008900:	f1ac 0402 	sub.w	r4, ip, #2
 8008904:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008908:	1c41      	adds	r1, r0, #1
 800890a:	4622      	mov	r2, r4
 800890c:	42ba      	cmp	r2, r7
 800890e:	d30a      	bcc.n	8008926 <__exponent+0x66>
 8008910:	f10d 0209 	add.w	r2, sp, #9
 8008914:	eba2 020c 	sub.w	r2, r2, ip
 8008918:	42bc      	cmp	r4, r7
 800891a:	bf88      	it	hi
 800891c:	2200      	movhi	r2, #0
 800891e:	4413      	add	r3, r2
 8008920:	1a18      	subs	r0, r3, r0
 8008922:	b003      	add	sp, #12
 8008924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008926:	f812 5b01 	ldrb.w	r5, [r2], #1
 800892a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800892e:	e7ed      	b.n	800890c <__exponent+0x4c>
 8008930:	2330      	movs	r3, #48	; 0x30
 8008932:	3130      	adds	r1, #48	; 0x30
 8008934:	7083      	strb	r3, [r0, #2]
 8008936:	70c1      	strb	r1, [r0, #3]
 8008938:	1d03      	adds	r3, r0, #4
 800893a:	e7f1      	b.n	8008920 <__exponent+0x60>

0800893c <_printf_float>:
 800893c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008940:	ed2d 8b02 	vpush	{d8}
 8008944:	b08d      	sub	sp, #52	; 0x34
 8008946:	460c      	mov	r4, r1
 8008948:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800894c:	4616      	mov	r6, r2
 800894e:	461f      	mov	r7, r3
 8008950:	4605      	mov	r5, r0
 8008952:	f000 fcc7 	bl	80092e4 <_localeconv_r>
 8008956:	f8d0 a000 	ldr.w	sl, [r0]
 800895a:	4650      	mov	r0, sl
 800895c:	f7f7 fc90 	bl	8000280 <strlen>
 8008960:	2300      	movs	r3, #0
 8008962:	930a      	str	r3, [sp, #40]	; 0x28
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	9305      	str	r3, [sp, #20]
 8008968:	f8d8 3000 	ldr.w	r3, [r8]
 800896c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008970:	3307      	adds	r3, #7
 8008972:	f023 0307 	bic.w	r3, r3, #7
 8008976:	f103 0208 	add.w	r2, r3, #8
 800897a:	f8c8 2000 	str.w	r2, [r8]
 800897e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008982:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008986:	9307      	str	r3, [sp, #28]
 8008988:	f8cd 8018 	str.w	r8, [sp, #24]
 800898c:	ee08 0a10 	vmov	s16, r0
 8008990:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008998:	4b9e      	ldr	r3, [pc, #632]	; (8008c14 <_printf_float+0x2d8>)
 800899a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800899e:	f7f8 f8cd 	bl	8000b3c <__aeabi_dcmpun>
 80089a2:	bb88      	cbnz	r0, 8008a08 <_printf_float+0xcc>
 80089a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089a8:	4b9a      	ldr	r3, [pc, #616]	; (8008c14 <_printf_float+0x2d8>)
 80089aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089ae:	f7f8 f8a7 	bl	8000b00 <__aeabi_dcmple>
 80089b2:	bb48      	cbnz	r0, 8008a08 <_printf_float+0xcc>
 80089b4:	2200      	movs	r2, #0
 80089b6:	2300      	movs	r3, #0
 80089b8:	4640      	mov	r0, r8
 80089ba:	4649      	mov	r1, r9
 80089bc:	f7f8 f896 	bl	8000aec <__aeabi_dcmplt>
 80089c0:	b110      	cbz	r0, 80089c8 <_printf_float+0x8c>
 80089c2:	232d      	movs	r3, #45	; 0x2d
 80089c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c8:	4a93      	ldr	r2, [pc, #588]	; (8008c18 <_printf_float+0x2dc>)
 80089ca:	4b94      	ldr	r3, [pc, #592]	; (8008c1c <_printf_float+0x2e0>)
 80089cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80089d0:	bf94      	ite	ls
 80089d2:	4690      	movls	r8, r2
 80089d4:	4698      	movhi	r8, r3
 80089d6:	2303      	movs	r3, #3
 80089d8:	6123      	str	r3, [r4, #16]
 80089da:	9b05      	ldr	r3, [sp, #20]
 80089dc:	f023 0304 	bic.w	r3, r3, #4
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	f04f 0900 	mov.w	r9, #0
 80089e6:	9700      	str	r7, [sp, #0]
 80089e8:	4633      	mov	r3, r6
 80089ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80089ec:	4621      	mov	r1, r4
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f9da 	bl	8008da8 <_printf_common>
 80089f4:	3001      	adds	r0, #1
 80089f6:	f040 8090 	bne.w	8008b1a <_printf_float+0x1de>
 80089fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089fe:	b00d      	add	sp, #52	; 0x34
 8008a00:	ecbd 8b02 	vpop	{d8}
 8008a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a08:	4642      	mov	r2, r8
 8008a0a:	464b      	mov	r3, r9
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	4649      	mov	r1, r9
 8008a10:	f7f8 f894 	bl	8000b3c <__aeabi_dcmpun>
 8008a14:	b140      	cbz	r0, 8008a28 <_printf_float+0xec>
 8008a16:	464b      	mov	r3, r9
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfbc      	itt	lt
 8008a1c:	232d      	movlt	r3, #45	; 0x2d
 8008a1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a22:	4a7f      	ldr	r2, [pc, #508]	; (8008c20 <_printf_float+0x2e4>)
 8008a24:	4b7f      	ldr	r3, [pc, #508]	; (8008c24 <_printf_float+0x2e8>)
 8008a26:	e7d1      	b.n	80089cc <_printf_float+0x90>
 8008a28:	6863      	ldr	r3, [r4, #4]
 8008a2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008a2e:	9206      	str	r2, [sp, #24]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	d13f      	bne.n	8008ab4 <_printf_float+0x178>
 8008a34:	2306      	movs	r3, #6
 8008a36:	6063      	str	r3, [r4, #4]
 8008a38:	9b05      	ldr	r3, [sp, #20]
 8008a3a:	6861      	ldr	r1, [r4, #4]
 8008a3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a40:	2300      	movs	r3, #0
 8008a42:	9303      	str	r3, [sp, #12]
 8008a44:	ab0a      	add	r3, sp, #40	; 0x28
 8008a46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a4a:	ab09      	add	r3, sp, #36	; 0x24
 8008a4c:	ec49 8b10 	vmov	d0, r8, r9
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	6022      	str	r2, [r4, #0]
 8008a54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f7ff fecf 	bl	80087fc <__cvt>
 8008a5e:	9b06      	ldr	r3, [sp, #24]
 8008a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a62:	2b47      	cmp	r3, #71	; 0x47
 8008a64:	4680      	mov	r8, r0
 8008a66:	d108      	bne.n	8008a7a <_printf_float+0x13e>
 8008a68:	1cc8      	adds	r0, r1, #3
 8008a6a:	db02      	blt.n	8008a72 <_printf_float+0x136>
 8008a6c:	6863      	ldr	r3, [r4, #4]
 8008a6e:	4299      	cmp	r1, r3
 8008a70:	dd41      	ble.n	8008af6 <_printf_float+0x1ba>
 8008a72:	f1ab 0302 	sub.w	r3, fp, #2
 8008a76:	fa5f fb83 	uxtb.w	fp, r3
 8008a7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a7e:	d820      	bhi.n	8008ac2 <_printf_float+0x186>
 8008a80:	3901      	subs	r1, #1
 8008a82:	465a      	mov	r2, fp
 8008a84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a88:	9109      	str	r1, [sp, #36]	; 0x24
 8008a8a:	f7ff ff19 	bl	80088c0 <__exponent>
 8008a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a90:	1813      	adds	r3, r2, r0
 8008a92:	2a01      	cmp	r2, #1
 8008a94:	4681      	mov	r9, r0
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	dc02      	bgt.n	8008aa0 <_printf_float+0x164>
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	07d2      	lsls	r2, r2, #31
 8008a9e:	d501      	bpl.n	8008aa4 <_printf_float+0x168>
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	6123      	str	r3, [r4, #16]
 8008aa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d09c      	beq.n	80089e6 <_printf_float+0xaa>
 8008aac:	232d      	movs	r3, #45	; 0x2d
 8008aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ab2:	e798      	b.n	80089e6 <_printf_float+0xaa>
 8008ab4:	9a06      	ldr	r2, [sp, #24]
 8008ab6:	2a47      	cmp	r2, #71	; 0x47
 8008ab8:	d1be      	bne.n	8008a38 <_printf_float+0xfc>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1bc      	bne.n	8008a38 <_printf_float+0xfc>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e7b9      	b.n	8008a36 <_printf_float+0xfa>
 8008ac2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008ac6:	d118      	bne.n	8008afa <_printf_float+0x1be>
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	6863      	ldr	r3, [r4, #4]
 8008acc:	dd0b      	ble.n	8008ae6 <_printf_float+0x1aa>
 8008ace:	6121      	str	r1, [r4, #16]
 8008ad0:	b913      	cbnz	r3, 8008ad8 <_printf_float+0x19c>
 8008ad2:	6822      	ldr	r2, [r4, #0]
 8008ad4:	07d0      	lsls	r0, r2, #31
 8008ad6:	d502      	bpl.n	8008ade <_printf_float+0x1a2>
 8008ad8:	3301      	adds	r3, #1
 8008ada:	440b      	add	r3, r1
 8008adc:	6123      	str	r3, [r4, #16]
 8008ade:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ae0:	f04f 0900 	mov.w	r9, #0
 8008ae4:	e7de      	b.n	8008aa4 <_printf_float+0x168>
 8008ae6:	b913      	cbnz	r3, 8008aee <_printf_float+0x1b2>
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	07d2      	lsls	r2, r2, #31
 8008aec:	d501      	bpl.n	8008af2 <_printf_float+0x1b6>
 8008aee:	3302      	adds	r3, #2
 8008af0:	e7f4      	b.n	8008adc <_printf_float+0x1a0>
 8008af2:	2301      	movs	r3, #1
 8008af4:	e7f2      	b.n	8008adc <_printf_float+0x1a0>
 8008af6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afc:	4299      	cmp	r1, r3
 8008afe:	db05      	blt.n	8008b0c <_printf_float+0x1d0>
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	6121      	str	r1, [r4, #16]
 8008b04:	07d8      	lsls	r0, r3, #31
 8008b06:	d5ea      	bpl.n	8008ade <_printf_float+0x1a2>
 8008b08:	1c4b      	adds	r3, r1, #1
 8008b0a:	e7e7      	b.n	8008adc <_printf_float+0x1a0>
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	bfd4      	ite	le
 8008b10:	f1c1 0202 	rsble	r2, r1, #2
 8008b14:	2201      	movgt	r2, #1
 8008b16:	4413      	add	r3, r2
 8008b18:	e7e0      	b.n	8008adc <_printf_float+0x1a0>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	055a      	lsls	r2, r3, #21
 8008b1e:	d407      	bmi.n	8008b30 <_printf_float+0x1f4>
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	4642      	mov	r2, r8
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d12c      	bne.n	8008b88 <_printf_float+0x24c>
 8008b2e:	e764      	b.n	80089fa <_printf_float+0xbe>
 8008b30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b34:	f240 80e0 	bls.w	8008cf8 <_printf_float+0x3bc>
 8008b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f7f7 ffca 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d034      	beq.n	8008bb2 <_printf_float+0x276>
 8008b48:	4a37      	ldr	r2, [pc, #220]	; (8008c28 <_printf_float+0x2ec>)
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	f43f af51 	beq.w	80089fa <_printf_float+0xbe>
 8008b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	db02      	blt.n	8008b66 <_printf_float+0x22a>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	07d8      	lsls	r0, r3, #31
 8008b64:	d510      	bpl.n	8008b88 <_printf_float+0x24c>
 8008b66:	ee18 3a10 	vmov	r3, s16
 8008b6a:	4652      	mov	r2, sl
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	4628      	mov	r0, r5
 8008b70:	47b8      	blx	r7
 8008b72:	3001      	adds	r0, #1
 8008b74:	f43f af41 	beq.w	80089fa <_printf_float+0xbe>
 8008b78:	f04f 0800 	mov.w	r8, #0
 8008b7c:	f104 091a 	add.w	r9, r4, #26
 8008b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b82:	3b01      	subs	r3, #1
 8008b84:	4543      	cmp	r3, r8
 8008b86:	dc09      	bgt.n	8008b9c <_printf_float+0x260>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	079b      	lsls	r3, r3, #30
 8008b8c:	f100 8107 	bmi.w	8008d9e <_printf_float+0x462>
 8008b90:	68e0      	ldr	r0, [r4, #12]
 8008b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b94:	4298      	cmp	r0, r3
 8008b96:	bfb8      	it	lt
 8008b98:	4618      	movlt	r0, r3
 8008b9a:	e730      	b.n	80089fe <_printf_float+0xc2>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	464a      	mov	r2, r9
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	47b8      	blx	r7
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	f43f af27 	beq.w	80089fa <_printf_float+0xbe>
 8008bac:	f108 0801 	add.w	r8, r8, #1
 8008bb0:	e7e6      	b.n	8008b80 <_printf_float+0x244>
 8008bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dc39      	bgt.n	8008c2c <_printf_float+0x2f0>
 8008bb8:	4a1b      	ldr	r2, [pc, #108]	; (8008c28 <_printf_float+0x2ec>)
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	47b8      	blx	r7
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	f43f af19 	beq.w	80089fa <_printf_float+0xbe>
 8008bc8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	d102      	bne.n	8008bd6 <_printf_float+0x29a>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	07d9      	lsls	r1, r3, #31
 8008bd4:	d5d8      	bpl.n	8008b88 <_printf_float+0x24c>
 8008bd6:	ee18 3a10 	vmov	r3, s16
 8008bda:	4652      	mov	r2, sl
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f af09 	beq.w	80089fa <_printf_float+0xbe>
 8008be8:	f04f 0900 	mov.w	r9, #0
 8008bec:	f104 0a1a 	add.w	sl, r4, #26
 8008bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf2:	425b      	negs	r3, r3
 8008bf4:	454b      	cmp	r3, r9
 8008bf6:	dc01      	bgt.n	8008bfc <_printf_float+0x2c0>
 8008bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfa:	e792      	b.n	8008b22 <_printf_float+0x1e6>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4652      	mov	r2, sl
 8008c00:	4631      	mov	r1, r6
 8008c02:	4628      	mov	r0, r5
 8008c04:	47b8      	blx	r7
 8008c06:	3001      	adds	r0, #1
 8008c08:	f43f aef7 	beq.w	80089fa <_printf_float+0xbe>
 8008c0c:	f109 0901 	add.w	r9, r9, #1
 8008c10:	e7ee      	b.n	8008bf0 <_printf_float+0x2b4>
 8008c12:	bf00      	nop
 8008c14:	7fefffff 	.word	0x7fefffff
 8008c18:	0800b1a8 	.word	0x0800b1a8
 8008c1c:	0800b1ac 	.word	0x0800b1ac
 8008c20:	0800b1b0 	.word	0x0800b1b0
 8008c24:	0800b1b4 	.word	0x0800b1b4
 8008c28:	0800b1b8 	.word	0x0800b1b8
 8008c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c30:	429a      	cmp	r2, r3
 8008c32:	bfa8      	it	ge
 8008c34:	461a      	movge	r2, r3
 8008c36:	2a00      	cmp	r2, #0
 8008c38:	4691      	mov	r9, r2
 8008c3a:	dc37      	bgt.n	8008cac <_printf_float+0x370>
 8008c3c:	f04f 0b00 	mov.w	fp, #0
 8008c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c44:	f104 021a 	add.w	r2, r4, #26
 8008c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c4a:	9305      	str	r3, [sp, #20]
 8008c4c:	eba3 0309 	sub.w	r3, r3, r9
 8008c50:	455b      	cmp	r3, fp
 8008c52:	dc33      	bgt.n	8008cbc <_printf_float+0x380>
 8008c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	db3b      	blt.n	8008cd4 <_printf_float+0x398>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	07da      	lsls	r2, r3, #31
 8008c60:	d438      	bmi.n	8008cd4 <_printf_float+0x398>
 8008c62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008c66:	eba2 0903 	sub.w	r9, r2, r3
 8008c6a:	9b05      	ldr	r3, [sp, #20]
 8008c6c:	1ad2      	subs	r2, r2, r3
 8008c6e:	4591      	cmp	r9, r2
 8008c70:	bfa8      	it	ge
 8008c72:	4691      	movge	r9, r2
 8008c74:	f1b9 0f00 	cmp.w	r9, #0
 8008c78:	dc35      	bgt.n	8008ce6 <_printf_float+0x3aa>
 8008c7a:	f04f 0800 	mov.w	r8, #0
 8008c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c82:	f104 0a1a 	add.w	sl, r4, #26
 8008c86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	eba3 0309 	sub.w	r3, r3, r9
 8008c90:	4543      	cmp	r3, r8
 8008c92:	f77f af79 	ble.w	8008b88 <_printf_float+0x24c>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4652      	mov	r2, sl
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	47b8      	blx	r7
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	f43f aeaa 	beq.w	80089fa <_printf_float+0xbe>
 8008ca6:	f108 0801 	add.w	r8, r8, #1
 8008caa:	e7ec      	b.n	8008c86 <_printf_float+0x34a>
 8008cac:	4613      	mov	r3, r2
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4642      	mov	r2, r8
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	47b8      	blx	r7
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d1c0      	bne.n	8008c3c <_printf_float+0x300>
 8008cba:	e69e      	b.n	80089fa <_printf_float+0xbe>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	9205      	str	r2, [sp, #20]
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	f43f ae97 	beq.w	80089fa <_printf_float+0xbe>
 8008ccc:	9a05      	ldr	r2, [sp, #20]
 8008cce:	f10b 0b01 	add.w	fp, fp, #1
 8008cd2:	e7b9      	b.n	8008c48 <_printf_float+0x30c>
 8008cd4:	ee18 3a10 	vmov	r3, s16
 8008cd8:	4652      	mov	r2, sl
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4628      	mov	r0, r5
 8008cde:	47b8      	blx	r7
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d1be      	bne.n	8008c62 <_printf_float+0x326>
 8008ce4:	e689      	b.n	80089fa <_printf_float+0xbe>
 8008ce6:	9a05      	ldr	r2, [sp, #20]
 8008ce8:	464b      	mov	r3, r9
 8008cea:	4442      	add	r2, r8
 8008cec:	4631      	mov	r1, r6
 8008cee:	4628      	mov	r0, r5
 8008cf0:	47b8      	blx	r7
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	d1c1      	bne.n	8008c7a <_printf_float+0x33e>
 8008cf6:	e680      	b.n	80089fa <_printf_float+0xbe>
 8008cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cfa:	2a01      	cmp	r2, #1
 8008cfc:	dc01      	bgt.n	8008d02 <_printf_float+0x3c6>
 8008cfe:	07db      	lsls	r3, r3, #31
 8008d00:	d53a      	bpl.n	8008d78 <_printf_float+0x43c>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4642      	mov	r2, r8
 8008d06:	4631      	mov	r1, r6
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b8      	blx	r7
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	f43f ae74 	beq.w	80089fa <_printf_float+0xbe>
 8008d12:	ee18 3a10 	vmov	r3, s16
 8008d16:	4652      	mov	r2, sl
 8008d18:	4631      	mov	r1, r6
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	47b8      	blx	r7
 8008d1e:	3001      	adds	r0, #1
 8008d20:	f43f ae6b 	beq.w	80089fa <_printf_float+0xbe>
 8008d24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008d30:	f7f7 fed2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d34:	b9d8      	cbnz	r0, 8008d6e <_printf_float+0x432>
 8008d36:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008d3a:	f108 0201 	add.w	r2, r8, #1
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	47b8      	blx	r7
 8008d44:	3001      	adds	r0, #1
 8008d46:	d10e      	bne.n	8008d66 <_printf_float+0x42a>
 8008d48:	e657      	b.n	80089fa <_printf_float+0xbe>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4652      	mov	r2, sl
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4628      	mov	r0, r5
 8008d52:	47b8      	blx	r7
 8008d54:	3001      	adds	r0, #1
 8008d56:	f43f ae50 	beq.w	80089fa <_printf_float+0xbe>
 8008d5a:	f108 0801 	add.w	r8, r8, #1
 8008d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d60:	3b01      	subs	r3, #1
 8008d62:	4543      	cmp	r3, r8
 8008d64:	dcf1      	bgt.n	8008d4a <_printf_float+0x40e>
 8008d66:	464b      	mov	r3, r9
 8008d68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d6c:	e6da      	b.n	8008b24 <_printf_float+0x1e8>
 8008d6e:	f04f 0800 	mov.w	r8, #0
 8008d72:	f104 0a1a 	add.w	sl, r4, #26
 8008d76:	e7f2      	b.n	8008d5e <_printf_float+0x422>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	4642      	mov	r2, r8
 8008d7c:	e7df      	b.n	8008d3e <_printf_float+0x402>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	464a      	mov	r2, r9
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	f43f ae36 	beq.w	80089fa <_printf_float+0xbe>
 8008d8e:	f108 0801 	add.w	r8, r8, #1
 8008d92:	68e3      	ldr	r3, [r4, #12]
 8008d94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d96:	1a5b      	subs	r3, r3, r1
 8008d98:	4543      	cmp	r3, r8
 8008d9a:	dcf0      	bgt.n	8008d7e <_printf_float+0x442>
 8008d9c:	e6f8      	b.n	8008b90 <_printf_float+0x254>
 8008d9e:	f04f 0800 	mov.w	r8, #0
 8008da2:	f104 0919 	add.w	r9, r4, #25
 8008da6:	e7f4      	b.n	8008d92 <_printf_float+0x456>

08008da8 <_printf_common>:
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	4616      	mov	r6, r2
 8008dae:	4699      	mov	r9, r3
 8008db0:	688a      	ldr	r2, [r1, #8]
 8008db2:	690b      	ldr	r3, [r1, #16]
 8008db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008db8:	4293      	cmp	r3, r2
 8008dba:	bfb8      	it	lt
 8008dbc:	4613      	movlt	r3, r2
 8008dbe:	6033      	str	r3, [r6, #0]
 8008dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	b10a      	cbz	r2, 8008dce <_printf_common+0x26>
 8008dca:	3301      	adds	r3, #1
 8008dcc:	6033      	str	r3, [r6, #0]
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	0699      	lsls	r1, r3, #26
 8008dd2:	bf42      	ittt	mi
 8008dd4:	6833      	ldrmi	r3, [r6, #0]
 8008dd6:	3302      	addmi	r3, #2
 8008dd8:	6033      	strmi	r3, [r6, #0]
 8008dda:	6825      	ldr	r5, [r4, #0]
 8008ddc:	f015 0506 	ands.w	r5, r5, #6
 8008de0:	d106      	bne.n	8008df0 <_printf_common+0x48>
 8008de2:	f104 0a19 	add.w	sl, r4, #25
 8008de6:	68e3      	ldr	r3, [r4, #12]
 8008de8:	6832      	ldr	r2, [r6, #0]
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	dc26      	bgt.n	8008e3e <_printf_common+0x96>
 8008df0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008df4:	1e13      	subs	r3, r2, #0
 8008df6:	6822      	ldr	r2, [r4, #0]
 8008df8:	bf18      	it	ne
 8008dfa:	2301      	movne	r3, #1
 8008dfc:	0692      	lsls	r2, r2, #26
 8008dfe:	d42b      	bmi.n	8008e58 <_printf_common+0xb0>
 8008e00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e04:	4649      	mov	r1, r9
 8008e06:	4638      	mov	r0, r7
 8008e08:	47c0      	blx	r8
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d01e      	beq.n	8008e4c <_printf_common+0xa4>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	6922      	ldr	r2, [r4, #16]
 8008e12:	f003 0306 	and.w	r3, r3, #6
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	bf02      	ittt	eq
 8008e1a:	68e5      	ldreq	r5, [r4, #12]
 8008e1c:	6833      	ldreq	r3, [r6, #0]
 8008e1e:	1aed      	subeq	r5, r5, r3
 8008e20:	68a3      	ldr	r3, [r4, #8]
 8008e22:	bf0c      	ite	eq
 8008e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e28:	2500      	movne	r5, #0
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	bfc4      	itt	gt
 8008e2e:	1a9b      	subgt	r3, r3, r2
 8008e30:	18ed      	addgt	r5, r5, r3
 8008e32:	2600      	movs	r6, #0
 8008e34:	341a      	adds	r4, #26
 8008e36:	42b5      	cmp	r5, r6
 8008e38:	d11a      	bne.n	8008e70 <_printf_common+0xc8>
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	e008      	b.n	8008e50 <_printf_common+0xa8>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	4652      	mov	r2, sl
 8008e42:	4649      	mov	r1, r9
 8008e44:	4638      	mov	r0, r7
 8008e46:	47c0      	blx	r8
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d103      	bne.n	8008e54 <_printf_common+0xac>
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e54:	3501      	adds	r5, #1
 8008e56:	e7c6      	b.n	8008de6 <_printf_common+0x3e>
 8008e58:	18e1      	adds	r1, r4, r3
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	2030      	movs	r0, #48	; 0x30
 8008e5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e62:	4422      	add	r2, r4
 8008e64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	e7c7      	b.n	8008e00 <_printf_common+0x58>
 8008e70:	2301      	movs	r3, #1
 8008e72:	4622      	mov	r2, r4
 8008e74:	4649      	mov	r1, r9
 8008e76:	4638      	mov	r0, r7
 8008e78:	47c0      	blx	r8
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d0e6      	beq.n	8008e4c <_printf_common+0xa4>
 8008e7e:	3601      	adds	r6, #1
 8008e80:	e7d9      	b.n	8008e36 <_printf_common+0x8e>
	...

08008e84 <_printf_i>:
 8008e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e88:	7e0f      	ldrb	r7, [r1, #24]
 8008e8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e8c:	2f78      	cmp	r7, #120	; 0x78
 8008e8e:	4691      	mov	r9, r2
 8008e90:	4680      	mov	r8, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	469a      	mov	sl, r3
 8008e96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e9a:	d807      	bhi.n	8008eac <_printf_i+0x28>
 8008e9c:	2f62      	cmp	r7, #98	; 0x62
 8008e9e:	d80a      	bhi.n	8008eb6 <_printf_i+0x32>
 8008ea0:	2f00      	cmp	r7, #0
 8008ea2:	f000 80d4 	beq.w	800904e <_printf_i+0x1ca>
 8008ea6:	2f58      	cmp	r7, #88	; 0x58
 8008ea8:	f000 80c0 	beq.w	800902c <_printf_i+0x1a8>
 8008eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008eb4:	e03a      	b.n	8008f2c <_printf_i+0xa8>
 8008eb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eba:	2b15      	cmp	r3, #21
 8008ebc:	d8f6      	bhi.n	8008eac <_printf_i+0x28>
 8008ebe:	a101      	add	r1, pc, #4	; (adr r1, 8008ec4 <_printf_i+0x40>)
 8008ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ec4:	08008f1d 	.word	0x08008f1d
 8008ec8:	08008f31 	.word	0x08008f31
 8008ecc:	08008ead 	.word	0x08008ead
 8008ed0:	08008ead 	.word	0x08008ead
 8008ed4:	08008ead 	.word	0x08008ead
 8008ed8:	08008ead 	.word	0x08008ead
 8008edc:	08008f31 	.word	0x08008f31
 8008ee0:	08008ead 	.word	0x08008ead
 8008ee4:	08008ead 	.word	0x08008ead
 8008ee8:	08008ead 	.word	0x08008ead
 8008eec:	08008ead 	.word	0x08008ead
 8008ef0:	08009035 	.word	0x08009035
 8008ef4:	08008f5d 	.word	0x08008f5d
 8008ef8:	08008fef 	.word	0x08008fef
 8008efc:	08008ead 	.word	0x08008ead
 8008f00:	08008ead 	.word	0x08008ead
 8008f04:	08009057 	.word	0x08009057
 8008f08:	08008ead 	.word	0x08008ead
 8008f0c:	08008f5d 	.word	0x08008f5d
 8008f10:	08008ead 	.word	0x08008ead
 8008f14:	08008ead 	.word	0x08008ead
 8008f18:	08008ff7 	.word	0x08008ff7
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	1d1a      	adds	r2, r3, #4
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	602a      	str	r2, [r5, #0]
 8008f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e09f      	b.n	8009070 <_printf_i+0x1ec>
 8008f30:	6820      	ldr	r0, [r4, #0]
 8008f32:	682b      	ldr	r3, [r5, #0]
 8008f34:	0607      	lsls	r7, r0, #24
 8008f36:	f103 0104 	add.w	r1, r3, #4
 8008f3a:	6029      	str	r1, [r5, #0]
 8008f3c:	d501      	bpl.n	8008f42 <_printf_i+0xbe>
 8008f3e:	681e      	ldr	r6, [r3, #0]
 8008f40:	e003      	b.n	8008f4a <_printf_i+0xc6>
 8008f42:	0646      	lsls	r6, r0, #25
 8008f44:	d5fb      	bpl.n	8008f3e <_printf_i+0xba>
 8008f46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f4a:	2e00      	cmp	r6, #0
 8008f4c:	da03      	bge.n	8008f56 <_printf_i+0xd2>
 8008f4e:	232d      	movs	r3, #45	; 0x2d
 8008f50:	4276      	negs	r6, r6
 8008f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f56:	485a      	ldr	r0, [pc, #360]	; (80090c0 <_printf_i+0x23c>)
 8008f58:	230a      	movs	r3, #10
 8008f5a:	e012      	b.n	8008f82 <_printf_i+0xfe>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	6820      	ldr	r0, [r4, #0]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	6029      	str	r1, [r5, #0]
 8008f64:	0605      	lsls	r5, r0, #24
 8008f66:	d501      	bpl.n	8008f6c <_printf_i+0xe8>
 8008f68:	681e      	ldr	r6, [r3, #0]
 8008f6a:	e002      	b.n	8008f72 <_printf_i+0xee>
 8008f6c:	0641      	lsls	r1, r0, #25
 8008f6e:	d5fb      	bpl.n	8008f68 <_printf_i+0xe4>
 8008f70:	881e      	ldrh	r6, [r3, #0]
 8008f72:	4853      	ldr	r0, [pc, #332]	; (80090c0 <_printf_i+0x23c>)
 8008f74:	2f6f      	cmp	r7, #111	; 0x6f
 8008f76:	bf0c      	ite	eq
 8008f78:	2308      	moveq	r3, #8
 8008f7a:	230a      	movne	r3, #10
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f82:	6865      	ldr	r5, [r4, #4]
 8008f84:	60a5      	str	r5, [r4, #8]
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	bfa2      	ittt	ge
 8008f8a:	6821      	ldrge	r1, [r4, #0]
 8008f8c:	f021 0104 	bicge.w	r1, r1, #4
 8008f90:	6021      	strge	r1, [r4, #0]
 8008f92:	b90e      	cbnz	r6, 8008f98 <_printf_i+0x114>
 8008f94:	2d00      	cmp	r5, #0
 8008f96:	d04b      	beq.n	8009030 <_printf_i+0x1ac>
 8008f98:	4615      	mov	r5, r2
 8008f9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f9e:	fb03 6711 	mls	r7, r3, r1, r6
 8008fa2:	5dc7      	ldrb	r7, [r0, r7]
 8008fa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fa8:	4637      	mov	r7, r6
 8008faa:	42bb      	cmp	r3, r7
 8008fac:	460e      	mov	r6, r1
 8008fae:	d9f4      	bls.n	8008f9a <_printf_i+0x116>
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d10b      	bne.n	8008fcc <_printf_i+0x148>
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	07de      	lsls	r6, r3, #31
 8008fb8:	d508      	bpl.n	8008fcc <_printf_i+0x148>
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	6861      	ldr	r1, [r4, #4]
 8008fbe:	4299      	cmp	r1, r3
 8008fc0:	bfde      	ittt	le
 8008fc2:	2330      	movle	r3, #48	; 0x30
 8008fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008fcc:	1b52      	subs	r2, r2, r5
 8008fce:	6122      	str	r2, [r4, #16]
 8008fd0:	f8cd a000 	str.w	sl, [sp]
 8008fd4:	464b      	mov	r3, r9
 8008fd6:	aa03      	add	r2, sp, #12
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f7ff fee4 	bl	8008da8 <_printf_common>
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d14a      	bne.n	800907a <_printf_i+0x1f6>
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fe8:	b004      	add	sp, #16
 8008fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	f043 0320 	orr.w	r3, r3, #32
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	4833      	ldr	r0, [pc, #204]	; (80090c4 <_printf_i+0x240>)
 8008ff8:	2778      	movs	r7, #120	; 0x78
 8008ffa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	6829      	ldr	r1, [r5, #0]
 8009002:	061f      	lsls	r7, r3, #24
 8009004:	f851 6b04 	ldr.w	r6, [r1], #4
 8009008:	d402      	bmi.n	8009010 <_printf_i+0x18c>
 800900a:	065f      	lsls	r7, r3, #25
 800900c:	bf48      	it	mi
 800900e:	b2b6      	uxthmi	r6, r6
 8009010:	07df      	lsls	r7, r3, #31
 8009012:	bf48      	it	mi
 8009014:	f043 0320 	orrmi.w	r3, r3, #32
 8009018:	6029      	str	r1, [r5, #0]
 800901a:	bf48      	it	mi
 800901c:	6023      	strmi	r3, [r4, #0]
 800901e:	b91e      	cbnz	r6, 8009028 <_printf_i+0x1a4>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	f023 0320 	bic.w	r3, r3, #32
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	2310      	movs	r3, #16
 800902a:	e7a7      	b.n	8008f7c <_printf_i+0xf8>
 800902c:	4824      	ldr	r0, [pc, #144]	; (80090c0 <_printf_i+0x23c>)
 800902e:	e7e4      	b.n	8008ffa <_printf_i+0x176>
 8009030:	4615      	mov	r5, r2
 8009032:	e7bd      	b.n	8008fb0 <_printf_i+0x12c>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	6826      	ldr	r6, [r4, #0]
 8009038:	6961      	ldr	r1, [r4, #20]
 800903a:	1d18      	adds	r0, r3, #4
 800903c:	6028      	str	r0, [r5, #0]
 800903e:	0635      	lsls	r5, r6, #24
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	d501      	bpl.n	8009048 <_printf_i+0x1c4>
 8009044:	6019      	str	r1, [r3, #0]
 8009046:	e002      	b.n	800904e <_printf_i+0x1ca>
 8009048:	0670      	lsls	r0, r6, #25
 800904a:	d5fb      	bpl.n	8009044 <_printf_i+0x1c0>
 800904c:	8019      	strh	r1, [r3, #0]
 800904e:	2300      	movs	r3, #0
 8009050:	6123      	str	r3, [r4, #16]
 8009052:	4615      	mov	r5, r2
 8009054:	e7bc      	b.n	8008fd0 <_printf_i+0x14c>
 8009056:	682b      	ldr	r3, [r5, #0]
 8009058:	1d1a      	adds	r2, r3, #4
 800905a:	602a      	str	r2, [r5, #0]
 800905c:	681d      	ldr	r5, [r3, #0]
 800905e:	6862      	ldr	r2, [r4, #4]
 8009060:	2100      	movs	r1, #0
 8009062:	4628      	mov	r0, r5
 8009064:	f7f7 f8bc 	bl	80001e0 <memchr>
 8009068:	b108      	cbz	r0, 800906e <_printf_i+0x1ea>
 800906a:	1b40      	subs	r0, r0, r5
 800906c:	6060      	str	r0, [r4, #4]
 800906e:	6863      	ldr	r3, [r4, #4]
 8009070:	6123      	str	r3, [r4, #16]
 8009072:	2300      	movs	r3, #0
 8009074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009078:	e7aa      	b.n	8008fd0 <_printf_i+0x14c>
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	462a      	mov	r2, r5
 800907e:	4649      	mov	r1, r9
 8009080:	4640      	mov	r0, r8
 8009082:	47d0      	blx	sl
 8009084:	3001      	adds	r0, #1
 8009086:	d0ad      	beq.n	8008fe4 <_printf_i+0x160>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	079b      	lsls	r3, r3, #30
 800908c:	d413      	bmi.n	80090b6 <_printf_i+0x232>
 800908e:	68e0      	ldr	r0, [r4, #12]
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	4298      	cmp	r0, r3
 8009094:	bfb8      	it	lt
 8009096:	4618      	movlt	r0, r3
 8009098:	e7a6      	b.n	8008fe8 <_printf_i+0x164>
 800909a:	2301      	movs	r3, #1
 800909c:	4632      	mov	r2, r6
 800909e:	4649      	mov	r1, r9
 80090a0:	4640      	mov	r0, r8
 80090a2:	47d0      	blx	sl
 80090a4:	3001      	adds	r0, #1
 80090a6:	d09d      	beq.n	8008fe4 <_printf_i+0x160>
 80090a8:	3501      	adds	r5, #1
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	9903      	ldr	r1, [sp, #12]
 80090ae:	1a5b      	subs	r3, r3, r1
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	dcf2      	bgt.n	800909a <_printf_i+0x216>
 80090b4:	e7eb      	b.n	800908e <_printf_i+0x20a>
 80090b6:	2500      	movs	r5, #0
 80090b8:	f104 0619 	add.w	r6, r4, #25
 80090bc:	e7f5      	b.n	80090aa <_printf_i+0x226>
 80090be:	bf00      	nop
 80090c0:	0800b1ba 	.word	0x0800b1ba
 80090c4:	0800b1cb 	.word	0x0800b1cb

080090c8 <std>:
 80090c8:	2300      	movs	r3, #0
 80090ca:	b510      	push	{r4, lr}
 80090cc:	4604      	mov	r4, r0
 80090ce:	e9c0 3300 	strd	r3, r3, [r0]
 80090d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090d6:	6083      	str	r3, [r0, #8]
 80090d8:	8181      	strh	r1, [r0, #12]
 80090da:	6643      	str	r3, [r0, #100]	; 0x64
 80090dc:	81c2      	strh	r2, [r0, #14]
 80090de:	6183      	str	r3, [r0, #24]
 80090e0:	4619      	mov	r1, r3
 80090e2:	2208      	movs	r2, #8
 80090e4:	305c      	adds	r0, #92	; 0x5c
 80090e6:	f000 f8f4 	bl	80092d2 <memset>
 80090ea:	4b0d      	ldr	r3, [pc, #52]	; (8009120 <std+0x58>)
 80090ec:	6263      	str	r3, [r4, #36]	; 0x24
 80090ee:	4b0d      	ldr	r3, [pc, #52]	; (8009124 <std+0x5c>)
 80090f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090f2:	4b0d      	ldr	r3, [pc, #52]	; (8009128 <std+0x60>)
 80090f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090f6:	4b0d      	ldr	r3, [pc, #52]	; (800912c <std+0x64>)
 80090f8:	6323      	str	r3, [r4, #48]	; 0x30
 80090fa:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <std+0x68>)
 80090fc:	6224      	str	r4, [r4, #32]
 80090fe:	429c      	cmp	r4, r3
 8009100:	d006      	beq.n	8009110 <std+0x48>
 8009102:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009106:	4294      	cmp	r4, r2
 8009108:	d002      	beq.n	8009110 <std+0x48>
 800910a:	33d0      	adds	r3, #208	; 0xd0
 800910c:	429c      	cmp	r4, r3
 800910e:	d105      	bne.n	800911c <std+0x54>
 8009110:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009118:	f000 b958 	b.w	80093cc <__retarget_lock_init_recursive>
 800911c:	bd10      	pop	{r4, pc}
 800911e:	bf00      	nop
 8009120:	0800924d 	.word	0x0800924d
 8009124:	0800926f 	.word	0x0800926f
 8009128:	080092a7 	.word	0x080092a7
 800912c:	080092cb 	.word	0x080092cb
 8009130:	20010674 	.word	0x20010674

08009134 <stdio_exit_handler>:
 8009134:	4a02      	ldr	r2, [pc, #8]	; (8009140 <stdio_exit_handler+0xc>)
 8009136:	4903      	ldr	r1, [pc, #12]	; (8009144 <stdio_exit_handler+0x10>)
 8009138:	4803      	ldr	r0, [pc, #12]	; (8009148 <stdio_exit_handler+0x14>)
 800913a:	f000 b869 	b.w	8009210 <_fwalk_sglue>
 800913e:	bf00      	nop
 8009140:	200000a8 	.word	0x200000a8
 8009144:	0800aad1 	.word	0x0800aad1
 8009148:	200000b4 	.word	0x200000b4

0800914c <cleanup_stdio>:
 800914c:	6841      	ldr	r1, [r0, #4]
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <cleanup_stdio+0x34>)
 8009150:	4299      	cmp	r1, r3
 8009152:	b510      	push	{r4, lr}
 8009154:	4604      	mov	r4, r0
 8009156:	d001      	beq.n	800915c <cleanup_stdio+0x10>
 8009158:	f001 fcba 	bl	800aad0 <_fflush_r>
 800915c:	68a1      	ldr	r1, [r4, #8]
 800915e:	4b09      	ldr	r3, [pc, #36]	; (8009184 <cleanup_stdio+0x38>)
 8009160:	4299      	cmp	r1, r3
 8009162:	d002      	beq.n	800916a <cleanup_stdio+0x1e>
 8009164:	4620      	mov	r0, r4
 8009166:	f001 fcb3 	bl	800aad0 <_fflush_r>
 800916a:	68e1      	ldr	r1, [r4, #12]
 800916c:	4b06      	ldr	r3, [pc, #24]	; (8009188 <cleanup_stdio+0x3c>)
 800916e:	4299      	cmp	r1, r3
 8009170:	d004      	beq.n	800917c <cleanup_stdio+0x30>
 8009172:	4620      	mov	r0, r4
 8009174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009178:	f001 bcaa 	b.w	800aad0 <_fflush_r>
 800917c:	bd10      	pop	{r4, pc}
 800917e:	bf00      	nop
 8009180:	20010674 	.word	0x20010674
 8009184:	200106dc 	.word	0x200106dc
 8009188:	20010744 	.word	0x20010744

0800918c <global_stdio_init.part.0>:
 800918c:	b510      	push	{r4, lr}
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <global_stdio_init.part.0+0x30>)
 8009190:	4c0b      	ldr	r4, [pc, #44]	; (80091c0 <global_stdio_init.part.0+0x34>)
 8009192:	4a0c      	ldr	r2, [pc, #48]	; (80091c4 <global_stdio_init.part.0+0x38>)
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	4620      	mov	r0, r4
 8009198:	2200      	movs	r2, #0
 800919a:	2104      	movs	r1, #4
 800919c:	f7ff ff94 	bl	80090c8 <std>
 80091a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80091a4:	2201      	movs	r2, #1
 80091a6:	2109      	movs	r1, #9
 80091a8:	f7ff ff8e 	bl	80090c8 <std>
 80091ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80091b0:	2202      	movs	r2, #2
 80091b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b6:	2112      	movs	r1, #18
 80091b8:	f7ff bf86 	b.w	80090c8 <std>
 80091bc:	200107ac 	.word	0x200107ac
 80091c0:	20010674 	.word	0x20010674
 80091c4:	08009135 	.word	0x08009135

080091c8 <__sfp_lock_acquire>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__sfp_lock_acquire+0x8>)
 80091ca:	f000 b900 	b.w	80093ce <__retarget_lock_acquire_recursive>
 80091ce:	bf00      	nop
 80091d0:	200107b5 	.word	0x200107b5

080091d4 <__sfp_lock_release>:
 80091d4:	4801      	ldr	r0, [pc, #4]	; (80091dc <__sfp_lock_release+0x8>)
 80091d6:	f000 b8fb 	b.w	80093d0 <__retarget_lock_release_recursive>
 80091da:	bf00      	nop
 80091dc:	200107b5 	.word	0x200107b5

080091e0 <__sinit>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	4604      	mov	r4, r0
 80091e4:	f7ff fff0 	bl	80091c8 <__sfp_lock_acquire>
 80091e8:	6a23      	ldr	r3, [r4, #32]
 80091ea:	b11b      	cbz	r3, 80091f4 <__sinit+0x14>
 80091ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f0:	f7ff bff0 	b.w	80091d4 <__sfp_lock_release>
 80091f4:	4b04      	ldr	r3, [pc, #16]	; (8009208 <__sinit+0x28>)
 80091f6:	6223      	str	r3, [r4, #32]
 80091f8:	4b04      	ldr	r3, [pc, #16]	; (800920c <__sinit+0x2c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1f5      	bne.n	80091ec <__sinit+0xc>
 8009200:	f7ff ffc4 	bl	800918c <global_stdio_init.part.0>
 8009204:	e7f2      	b.n	80091ec <__sinit+0xc>
 8009206:	bf00      	nop
 8009208:	0800914d 	.word	0x0800914d
 800920c:	200107ac 	.word	0x200107ac

08009210 <_fwalk_sglue>:
 8009210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009214:	4607      	mov	r7, r0
 8009216:	4688      	mov	r8, r1
 8009218:	4614      	mov	r4, r2
 800921a:	2600      	movs	r6, #0
 800921c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009220:	f1b9 0901 	subs.w	r9, r9, #1
 8009224:	d505      	bpl.n	8009232 <_fwalk_sglue+0x22>
 8009226:	6824      	ldr	r4, [r4, #0]
 8009228:	2c00      	cmp	r4, #0
 800922a:	d1f7      	bne.n	800921c <_fwalk_sglue+0xc>
 800922c:	4630      	mov	r0, r6
 800922e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d907      	bls.n	8009248 <_fwalk_sglue+0x38>
 8009238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800923c:	3301      	adds	r3, #1
 800923e:	d003      	beq.n	8009248 <_fwalk_sglue+0x38>
 8009240:	4629      	mov	r1, r5
 8009242:	4638      	mov	r0, r7
 8009244:	47c0      	blx	r8
 8009246:	4306      	orrs	r6, r0
 8009248:	3568      	adds	r5, #104	; 0x68
 800924a:	e7e9      	b.n	8009220 <_fwalk_sglue+0x10>

0800924c <__sread>:
 800924c:	b510      	push	{r4, lr}
 800924e:	460c      	mov	r4, r1
 8009250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009254:	f000 f86c 	bl	8009330 <_read_r>
 8009258:	2800      	cmp	r0, #0
 800925a:	bfab      	itete	ge
 800925c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800925e:	89a3      	ldrhlt	r3, [r4, #12]
 8009260:	181b      	addge	r3, r3, r0
 8009262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009266:	bfac      	ite	ge
 8009268:	6563      	strge	r3, [r4, #84]	; 0x54
 800926a:	81a3      	strhlt	r3, [r4, #12]
 800926c:	bd10      	pop	{r4, pc}

0800926e <__swrite>:
 800926e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009272:	461f      	mov	r7, r3
 8009274:	898b      	ldrh	r3, [r1, #12]
 8009276:	05db      	lsls	r3, r3, #23
 8009278:	4605      	mov	r5, r0
 800927a:	460c      	mov	r4, r1
 800927c:	4616      	mov	r6, r2
 800927e:	d505      	bpl.n	800928c <__swrite+0x1e>
 8009280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009284:	2302      	movs	r3, #2
 8009286:	2200      	movs	r2, #0
 8009288:	f000 f840 	bl	800930c <_lseek_r>
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	4632      	mov	r2, r6
 800929a:	463b      	mov	r3, r7
 800929c:	4628      	mov	r0, r5
 800929e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092a2:	f000 b857 	b.w	8009354 <_write_r>

080092a6 <__sseek>:
 80092a6:	b510      	push	{r4, lr}
 80092a8:	460c      	mov	r4, r1
 80092aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ae:	f000 f82d 	bl	800930c <_lseek_r>
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	bf15      	itete	ne
 80092b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80092ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092c2:	81a3      	strheq	r3, [r4, #12]
 80092c4:	bf18      	it	ne
 80092c6:	81a3      	strhne	r3, [r4, #12]
 80092c8:	bd10      	pop	{r4, pc}

080092ca <__sclose>:
 80092ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ce:	f000 b80d 	b.w	80092ec <_close_r>

080092d2 <memset>:
 80092d2:	4402      	add	r2, r0
 80092d4:	4603      	mov	r3, r0
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d100      	bne.n	80092dc <memset+0xa>
 80092da:	4770      	bx	lr
 80092dc:	f803 1b01 	strb.w	r1, [r3], #1
 80092e0:	e7f9      	b.n	80092d6 <memset+0x4>
	...

080092e4 <_localeconv_r>:
 80092e4:	4800      	ldr	r0, [pc, #0]	; (80092e8 <_localeconv_r+0x4>)
 80092e6:	4770      	bx	lr
 80092e8:	200001f4 	.word	0x200001f4

080092ec <_close_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d06      	ldr	r5, [pc, #24]	; (8009308 <_close_r+0x1c>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	602b      	str	r3, [r5, #0]
 80092f8:	f7f8 feab 	bl	8002052 <_close>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_close_r+0x1a>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_close_r+0x1a>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	200107b0 	.word	0x200107b0

0800930c <_lseek_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4d07      	ldr	r5, [pc, #28]	; (800932c <_lseek_r+0x20>)
 8009310:	4604      	mov	r4, r0
 8009312:	4608      	mov	r0, r1
 8009314:	4611      	mov	r1, r2
 8009316:	2200      	movs	r2, #0
 8009318:	602a      	str	r2, [r5, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	f7f8 fec0 	bl	80020a0 <_lseek>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d102      	bne.n	800932a <_lseek_r+0x1e>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	b103      	cbz	r3, 800932a <_lseek_r+0x1e>
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	bd38      	pop	{r3, r4, r5, pc}
 800932c:	200107b0 	.word	0x200107b0

08009330 <_read_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d07      	ldr	r5, [pc, #28]	; (8009350 <_read_r+0x20>)
 8009334:	4604      	mov	r4, r0
 8009336:	4608      	mov	r0, r1
 8009338:	4611      	mov	r1, r2
 800933a:	2200      	movs	r2, #0
 800933c:	602a      	str	r2, [r5, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	f7f8 fe4e 	bl	8001fe0 <_read>
 8009344:	1c43      	adds	r3, r0, #1
 8009346:	d102      	bne.n	800934e <_read_r+0x1e>
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	b103      	cbz	r3, 800934e <_read_r+0x1e>
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	200107b0 	.word	0x200107b0

08009354 <_write_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4d07      	ldr	r5, [pc, #28]	; (8009374 <_write_r+0x20>)
 8009358:	4604      	mov	r4, r0
 800935a:	4608      	mov	r0, r1
 800935c:	4611      	mov	r1, r2
 800935e:	2200      	movs	r2, #0
 8009360:	602a      	str	r2, [r5, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	f7f8 fe59 	bl	800201a <_write>
 8009368:	1c43      	adds	r3, r0, #1
 800936a:	d102      	bne.n	8009372 <_write_r+0x1e>
 800936c:	682b      	ldr	r3, [r5, #0]
 800936e:	b103      	cbz	r3, 8009372 <_write_r+0x1e>
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	bd38      	pop	{r3, r4, r5, pc}
 8009374:	200107b0 	.word	0x200107b0

08009378 <__errno>:
 8009378:	4b01      	ldr	r3, [pc, #4]	; (8009380 <__errno+0x8>)
 800937a:	6818      	ldr	r0, [r3, #0]
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	20000100 	.word	0x20000100

08009384 <__libc_init_array>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	4d0d      	ldr	r5, [pc, #52]	; (80093bc <__libc_init_array+0x38>)
 8009388:	4c0d      	ldr	r4, [pc, #52]	; (80093c0 <__libc_init_array+0x3c>)
 800938a:	1b64      	subs	r4, r4, r5
 800938c:	10a4      	asrs	r4, r4, #2
 800938e:	2600      	movs	r6, #0
 8009390:	42a6      	cmp	r6, r4
 8009392:	d109      	bne.n	80093a8 <__libc_init_array+0x24>
 8009394:	4d0b      	ldr	r5, [pc, #44]	; (80093c4 <__libc_init_array+0x40>)
 8009396:	4c0c      	ldr	r4, [pc, #48]	; (80093c8 <__libc_init_array+0x44>)
 8009398:	f001 feee 	bl	800b178 <_init>
 800939c:	1b64      	subs	r4, r4, r5
 800939e:	10a4      	asrs	r4, r4, #2
 80093a0:	2600      	movs	r6, #0
 80093a2:	42a6      	cmp	r6, r4
 80093a4:	d105      	bne.n	80093b2 <__libc_init_array+0x2e>
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
 80093a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ac:	4798      	blx	r3
 80093ae:	3601      	adds	r6, #1
 80093b0:	e7ee      	b.n	8009390 <__libc_init_array+0xc>
 80093b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b6:	4798      	blx	r3
 80093b8:	3601      	adds	r6, #1
 80093ba:	e7f2      	b.n	80093a2 <__libc_init_array+0x1e>
 80093bc:	0800b524 	.word	0x0800b524
 80093c0:	0800b524 	.word	0x0800b524
 80093c4:	0800b524 	.word	0x0800b524
 80093c8:	0800b528 	.word	0x0800b528

080093cc <__retarget_lock_init_recursive>:
 80093cc:	4770      	bx	lr

080093ce <__retarget_lock_acquire_recursive>:
 80093ce:	4770      	bx	lr

080093d0 <__retarget_lock_release_recursive>:
 80093d0:	4770      	bx	lr

080093d2 <quorem>:
 80093d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d6:	6903      	ldr	r3, [r0, #16]
 80093d8:	690c      	ldr	r4, [r1, #16]
 80093da:	42a3      	cmp	r3, r4
 80093dc:	4607      	mov	r7, r0
 80093de:	db7e      	blt.n	80094de <quorem+0x10c>
 80093e0:	3c01      	subs	r4, #1
 80093e2:	f101 0814 	add.w	r8, r1, #20
 80093e6:	f100 0514 	add.w	r5, r0, #20
 80093ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093f8:	3301      	adds	r3, #1
 80093fa:	429a      	cmp	r2, r3
 80093fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009400:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009404:	fbb2 f6f3 	udiv	r6, r2, r3
 8009408:	d331      	bcc.n	800946e <quorem+0x9c>
 800940a:	f04f 0e00 	mov.w	lr, #0
 800940e:	4640      	mov	r0, r8
 8009410:	46ac      	mov	ip, r5
 8009412:	46f2      	mov	sl, lr
 8009414:	f850 2b04 	ldr.w	r2, [r0], #4
 8009418:	b293      	uxth	r3, r2
 800941a:	fb06 e303 	mla	r3, r6, r3, lr
 800941e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009422:	0c1a      	lsrs	r2, r3, #16
 8009424:	b29b      	uxth	r3, r3
 8009426:	ebaa 0303 	sub.w	r3, sl, r3
 800942a:	f8dc a000 	ldr.w	sl, [ip]
 800942e:	fa13 f38a 	uxtah	r3, r3, sl
 8009432:	fb06 220e 	mla	r2, r6, lr, r2
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	9b00      	ldr	r3, [sp, #0]
 800943a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800943e:	b292      	uxth	r2, r2
 8009440:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009444:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009448:	f8bd 3000 	ldrh.w	r3, [sp]
 800944c:	4581      	cmp	r9, r0
 800944e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009452:	f84c 3b04 	str.w	r3, [ip], #4
 8009456:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800945a:	d2db      	bcs.n	8009414 <quorem+0x42>
 800945c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009460:	b92b      	cbnz	r3, 800946e <quorem+0x9c>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	3b04      	subs	r3, #4
 8009466:	429d      	cmp	r5, r3
 8009468:	461a      	mov	r2, r3
 800946a:	d32c      	bcc.n	80094c6 <quorem+0xf4>
 800946c:	613c      	str	r4, [r7, #16]
 800946e:	4638      	mov	r0, r7
 8009470:	f001 f9a8 	bl	800a7c4 <__mcmp>
 8009474:	2800      	cmp	r0, #0
 8009476:	db22      	blt.n	80094be <quorem+0xec>
 8009478:	3601      	adds	r6, #1
 800947a:	4629      	mov	r1, r5
 800947c:	2000      	movs	r0, #0
 800947e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009482:	f8d1 c000 	ldr.w	ip, [r1]
 8009486:	b293      	uxth	r3, r2
 8009488:	1ac3      	subs	r3, r0, r3
 800948a:	0c12      	lsrs	r2, r2, #16
 800948c:	fa13 f38c 	uxtah	r3, r3, ip
 8009490:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009498:	b29b      	uxth	r3, r3
 800949a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800949e:	45c1      	cmp	r9, r8
 80094a0:	f841 3b04 	str.w	r3, [r1], #4
 80094a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094a8:	d2e9      	bcs.n	800947e <quorem+0xac>
 80094aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094b2:	b922      	cbnz	r2, 80094be <quorem+0xec>
 80094b4:	3b04      	subs	r3, #4
 80094b6:	429d      	cmp	r5, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	d30a      	bcc.n	80094d2 <quorem+0x100>
 80094bc:	613c      	str	r4, [r7, #16]
 80094be:	4630      	mov	r0, r6
 80094c0:	b003      	add	sp, #12
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	6812      	ldr	r2, [r2, #0]
 80094c8:	3b04      	subs	r3, #4
 80094ca:	2a00      	cmp	r2, #0
 80094cc:	d1ce      	bne.n	800946c <quorem+0x9a>
 80094ce:	3c01      	subs	r4, #1
 80094d0:	e7c9      	b.n	8009466 <quorem+0x94>
 80094d2:	6812      	ldr	r2, [r2, #0]
 80094d4:	3b04      	subs	r3, #4
 80094d6:	2a00      	cmp	r2, #0
 80094d8:	d1f0      	bne.n	80094bc <quorem+0xea>
 80094da:	3c01      	subs	r4, #1
 80094dc:	e7eb      	b.n	80094b6 <quorem+0xe4>
 80094de:	2000      	movs	r0, #0
 80094e0:	e7ee      	b.n	80094c0 <quorem+0xee>
 80094e2:	0000      	movs	r0, r0
 80094e4:	0000      	movs	r0, r0
	...

080094e8 <_dtoa_r>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	ed2d 8b04 	vpush	{d8-d9}
 80094f0:	69c5      	ldr	r5, [r0, #28]
 80094f2:	b093      	sub	sp, #76	; 0x4c
 80094f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80094f8:	ec57 6b10 	vmov	r6, r7, d0
 80094fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009500:	9107      	str	r1, [sp, #28]
 8009502:	4604      	mov	r4, r0
 8009504:	920a      	str	r2, [sp, #40]	; 0x28
 8009506:	930d      	str	r3, [sp, #52]	; 0x34
 8009508:	b975      	cbnz	r5, 8009528 <_dtoa_r+0x40>
 800950a:	2010      	movs	r0, #16
 800950c:	f000 fe2a 	bl	800a164 <malloc>
 8009510:	4602      	mov	r2, r0
 8009512:	61e0      	str	r0, [r4, #28]
 8009514:	b920      	cbnz	r0, 8009520 <_dtoa_r+0x38>
 8009516:	4bae      	ldr	r3, [pc, #696]	; (80097d0 <_dtoa_r+0x2e8>)
 8009518:	21ef      	movs	r1, #239	; 0xef
 800951a:	48ae      	ldr	r0, [pc, #696]	; (80097d4 <_dtoa_r+0x2ec>)
 800951c:	f001 fb1e 	bl	800ab5c <__assert_func>
 8009520:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009524:	6005      	str	r5, [r0, #0]
 8009526:	60c5      	str	r5, [r0, #12]
 8009528:	69e3      	ldr	r3, [r4, #28]
 800952a:	6819      	ldr	r1, [r3, #0]
 800952c:	b151      	cbz	r1, 8009544 <_dtoa_r+0x5c>
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	604a      	str	r2, [r1, #4]
 8009532:	2301      	movs	r3, #1
 8009534:	4093      	lsls	r3, r2
 8009536:	608b      	str	r3, [r1, #8]
 8009538:	4620      	mov	r0, r4
 800953a:	f000 ff07 	bl	800a34c <_Bfree>
 800953e:	69e3      	ldr	r3, [r4, #28]
 8009540:	2200      	movs	r2, #0
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	1e3b      	subs	r3, r7, #0
 8009546:	bfbb      	ittet	lt
 8009548:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800954c:	9303      	strlt	r3, [sp, #12]
 800954e:	2300      	movge	r3, #0
 8009550:	2201      	movlt	r2, #1
 8009552:	bfac      	ite	ge
 8009554:	f8c8 3000 	strge.w	r3, [r8]
 8009558:	f8c8 2000 	strlt.w	r2, [r8]
 800955c:	4b9e      	ldr	r3, [pc, #632]	; (80097d8 <_dtoa_r+0x2f0>)
 800955e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009562:	ea33 0308 	bics.w	r3, r3, r8
 8009566:	d11b      	bne.n	80095a0 <_dtoa_r+0xb8>
 8009568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800956a:	f242 730f 	movw	r3, #9999	; 0x270f
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009574:	4333      	orrs	r3, r6
 8009576:	f000 8593 	beq.w	800a0a0 <_dtoa_r+0xbb8>
 800957a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800957c:	b963      	cbnz	r3, 8009598 <_dtoa_r+0xb0>
 800957e:	4b97      	ldr	r3, [pc, #604]	; (80097dc <_dtoa_r+0x2f4>)
 8009580:	e027      	b.n	80095d2 <_dtoa_r+0xea>
 8009582:	4b97      	ldr	r3, [pc, #604]	; (80097e0 <_dtoa_r+0x2f8>)
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	3308      	adds	r3, #8
 8009588:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	9800      	ldr	r0, [sp, #0]
 800958e:	b013      	add	sp, #76	; 0x4c
 8009590:	ecbd 8b04 	vpop	{d8-d9}
 8009594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009598:	4b90      	ldr	r3, [pc, #576]	; (80097dc <_dtoa_r+0x2f4>)
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	3303      	adds	r3, #3
 800959e:	e7f3      	b.n	8009588 <_dtoa_r+0xa0>
 80095a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095a4:	2200      	movs	r2, #0
 80095a6:	ec51 0b17 	vmov	r0, r1, d7
 80095aa:	eeb0 8a47 	vmov.f32	s16, s14
 80095ae:	eef0 8a67 	vmov.f32	s17, s15
 80095b2:	2300      	movs	r3, #0
 80095b4:	f7f7 fa90 	bl	8000ad8 <__aeabi_dcmpeq>
 80095b8:	4681      	mov	r9, r0
 80095ba:	b160      	cbz	r0, 80095d6 <_dtoa_r+0xee>
 80095bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095be:	2301      	movs	r3, #1
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 8568 	beq.w	800a09a <_dtoa_r+0xbb2>
 80095ca:	4b86      	ldr	r3, [pc, #536]	; (80097e4 <_dtoa_r+0x2fc>)
 80095cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	e7da      	b.n	800958c <_dtoa_r+0xa4>
 80095d6:	aa10      	add	r2, sp, #64	; 0x40
 80095d8:	a911      	add	r1, sp, #68	; 0x44
 80095da:	4620      	mov	r0, r4
 80095dc:	eeb0 0a48 	vmov.f32	s0, s16
 80095e0:	eef0 0a68 	vmov.f32	s1, s17
 80095e4:	f001 f994 	bl	800a910 <__d2b>
 80095e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80095ec:	4682      	mov	sl, r0
 80095ee:	2d00      	cmp	r5, #0
 80095f0:	d07f      	beq.n	80096f2 <_dtoa_r+0x20a>
 80095f2:	ee18 3a90 	vmov	r3, s17
 80095f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80095fe:	ec51 0b18 	vmov	r0, r1, d8
 8009602:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800960a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800960e:	4619      	mov	r1, r3
 8009610:	2200      	movs	r2, #0
 8009612:	4b75      	ldr	r3, [pc, #468]	; (80097e8 <_dtoa_r+0x300>)
 8009614:	f7f6 fe40 	bl	8000298 <__aeabi_dsub>
 8009618:	a367      	add	r3, pc, #412	; (adr r3, 80097b8 <_dtoa_r+0x2d0>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f7f6 fff3 	bl	8000608 <__aeabi_dmul>
 8009622:	a367      	add	r3, pc, #412	; (adr r3, 80097c0 <_dtoa_r+0x2d8>)
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	f7f6 fe38 	bl	800029c <__adddf3>
 800962c:	4606      	mov	r6, r0
 800962e:	4628      	mov	r0, r5
 8009630:	460f      	mov	r7, r1
 8009632:	f7f6 ff7f 	bl	8000534 <__aeabi_i2d>
 8009636:	a364      	add	r3, pc, #400	; (adr r3, 80097c8 <_dtoa_r+0x2e0>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f6 ffe4 	bl	8000608 <__aeabi_dmul>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4630      	mov	r0, r6
 8009646:	4639      	mov	r1, r7
 8009648:	f7f6 fe28 	bl	800029c <__adddf3>
 800964c:	4606      	mov	r6, r0
 800964e:	460f      	mov	r7, r1
 8009650:	f7f7 fa8a 	bl	8000b68 <__aeabi_d2iz>
 8009654:	2200      	movs	r2, #0
 8009656:	4683      	mov	fp, r0
 8009658:	2300      	movs	r3, #0
 800965a:	4630      	mov	r0, r6
 800965c:	4639      	mov	r1, r7
 800965e:	f7f7 fa45 	bl	8000aec <__aeabi_dcmplt>
 8009662:	b148      	cbz	r0, 8009678 <_dtoa_r+0x190>
 8009664:	4658      	mov	r0, fp
 8009666:	f7f6 ff65 	bl	8000534 <__aeabi_i2d>
 800966a:	4632      	mov	r2, r6
 800966c:	463b      	mov	r3, r7
 800966e:	f7f7 fa33 	bl	8000ad8 <__aeabi_dcmpeq>
 8009672:	b908      	cbnz	r0, 8009678 <_dtoa_r+0x190>
 8009674:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009678:	f1bb 0f16 	cmp.w	fp, #22
 800967c:	d857      	bhi.n	800972e <_dtoa_r+0x246>
 800967e:	4b5b      	ldr	r3, [pc, #364]	; (80097ec <_dtoa_r+0x304>)
 8009680:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	ec51 0b18 	vmov	r0, r1, d8
 800968c:	f7f7 fa2e 	bl	8000aec <__aeabi_dcmplt>
 8009690:	2800      	cmp	r0, #0
 8009692:	d04e      	beq.n	8009732 <_dtoa_r+0x24a>
 8009694:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009698:	2300      	movs	r3, #0
 800969a:	930c      	str	r3, [sp, #48]	; 0x30
 800969c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800969e:	1b5b      	subs	r3, r3, r5
 80096a0:	1e5a      	subs	r2, r3, #1
 80096a2:	bf45      	ittet	mi
 80096a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80096a8:	9305      	strmi	r3, [sp, #20]
 80096aa:	2300      	movpl	r3, #0
 80096ac:	2300      	movmi	r3, #0
 80096ae:	9206      	str	r2, [sp, #24]
 80096b0:	bf54      	ite	pl
 80096b2:	9305      	strpl	r3, [sp, #20]
 80096b4:	9306      	strmi	r3, [sp, #24]
 80096b6:	f1bb 0f00 	cmp.w	fp, #0
 80096ba:	db3c      	blt.n	8009736 <_dtoa_r+0x24e>
 80096bc:	9b06      	ldr	r3, [sp, #24]
 80096be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80096c2:	445b      	add	r3, fp
 80096c4:	9306      	str	r3, [sp, #24]
 80096c6:	2300      	movs	r3, #0
 80096c8:	9308      	str	r3, [sp, #32]
 80096ca:	9b07      	ldr	r3, [sp, #28]
 80096cc:	2b09      	cmp	r3, #9
 80096ce:	d868      	bhi.n	80097a2 <_dtoa_r+0x2ba>
 80096d0:	2b05      	cmp	r3, #5
 80096d2:	bfc4      	itt	gt
 80096d4:	3b04      	subgt	r3, #4
 80096d6:	9307      	strgt	r3, [sp, #28]
 80096d8:	9b07      	ldr	r3, [sp, #28]
 80096da:	f1a3 0302 	sub.w	r3, r3, #2
 80096de:	bfcc      	ite	gt
 80096e0:	2500      	movgt	r5, #0
 80096e2:	2501      	movle	r5, #1
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	f200 8085 	bhi.w	80097f4 <_dtoa_r+0x30c>
 80096ea:	e8df f003 	tbb	[pc, r3]
 80096ee:	3b2e      	.short	0x3b2e
 80096f0:	5839      	.short	0x5839
 80096f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80096f6:	441d      	add	r5, r3
 80096f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	bfc1      	itttt	gt
 8009700:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009704:	fa08 f803 	lslgt.w	r8, r8, r3
 8009708:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800970c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009710:	bfd6      	itet	le
 8009712:	f1c3 0320 	rsble	r3, r3, #32
 8009716:	ea48 0003 	orrgt.w	r0, r8, r3
 800971a:	fa06 f003 	lslle.w	r0, r6, r3
 800971e:	f7f6 fef9 	bl	8000514 <__aeabi_ui2d>
 8009722:	2201      	movs	r2, #1
 8009724:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009728:	3d01      	subs	r5, #1
 800972a:	920e      	str	r2, [sp, #56]	; 0x38
 800972c:	e76f      	b.n	800960e <_dtoa_r+0x126>
 800972e:	2301      	movs	r3, #1
 8009730:	e7b3      	b.n	800969a <_dtoa_r+0x1b2>
 8009732:	900c      	str	r0, [sp, #48]	; 0x30
 8009734:	e7b2      	b.n	800969c <_dtoa_r+0x1b4>
 8009736:	9b05      	ldr	r3, [sp, #20]
 8009738:	eba3 030b 	sub.w	r3, r3, fp
 800973c:	9305      	str	r3, [sp, #20]
 800973e:	f1cb 0300 	rsb	r3, fp, #0
 8009742:	9308      	str	r3, [sp, #32]
 8009744:	2300      	movs	r3, #0
 8009746:	930b      	str	r3, [sp, #44]	; 0x2c
 8009748:	e7bf      	b.n	80096ca <_dtoa_r+0x1e2>
 800974a:	2300      	movs	r3, #0
 800974c:	9309      	str	r3, [sp, #36]	; 0x24
 800974e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009750:	2b00      	cmp	r3, #0
 8009752:	dc52      	bgt.n	80097fa <_dtoa_r+0x312>
 8009754:	2301      	movs	r3, #1
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	9304      	str	r3, [sp, #16]
 800975a:	461a      	mov	r2, r3
 800975c:	920a      	str	r2, [sp, #40]	; 0x28
 800975e:	e00b      	b.n	8009778 <_dtoa_r+0x290>
 8009760:	2301      	movs	r3, #1
 8009762:	e7f3      	b.n	800974c <_dtoa_r+0x264>
 8009764:	2300      	movs	r3, #0
 8009766:	9309      	str	r3, [sp, #36]	; 0x24
 8009768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976a:	445b      	add	r3, fp
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	3301      	adds	r3, #1
 8009770:	2b01      	cmp	r3, #1
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	bfb8      	it	lt
 8009776:	2301      	movlt	r3, #1
 8009778:	69e0      	ldr	r0, [r4, #28]
 800977a:	2100      	movs	r1, #0
 800977c:	2204      	movs	r2, #4
 800977e:	f102 0614 	add.w	r6, r2, #20
 8009782:	429e      	cmp	r6, r3
 8009784:	d93d      	bls.n	8009802 <_dtoa_r+0x31a>
 8009786:	6041      	str	r1, [r0, #4]
 8009788:	4620      	mov	r0, r4
 800978a:	f000 fd9f 	bl	800a2cc <_Balloc>
 800978e:	9000      	str	r0, [sp, #0]
 8009790:	2800      	cmp	r0, #0
 8009792:	d139      	bne.n	8009808 <_dtoa_r+0x320>
 8009794:	4b16      	ldr	r3, [pc, #88]	; (80097f0 <_dtoa_r+0x308>)
 8009796:	4602      	mov	r2, r0
 8009798:	f240 11af 	movw	r1, #431	; 0x1af
 800979c:	e6bd      	b.n	800951a <_dtoa_r+0x32>
 800979e:	2301      	movs	r3, #1
 80097a0:	e7e1      	b.n	8009766 <_dtoa_r+0x27e>
 80097a2:	2501      	movs	r5, #1
 80097a4:	2300      	movs	r3, #0
 80097a6:	9307      	str	r3, [sp, #28]
 80097a8:	9509      	str	r5, [sp, #36]	; 0x24
 80097aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097ae:	9301      	str	r3, [sp, #4]
 80097b0:	9304      	str	r3, [sp, #16]
 80097b2:	2200      	movs	r2, #0
 80097b4:	2312      	movs	r3, #18
 80097b6:	e7d1      	b.n	800975c <_dtoa_r+0x274>
 80097b8:	636f4361 	.word	0x636f4361
 80097bc:	3fd287a7 	.word	0x3fd287a7
 80097c0:	8b60c8b3 	.word	0x8b60c8b3
 80097c4:	3fc68a28 	.word	0x3fc68a28
 80097c8:	509f79fb 	.word	0x509f79fb
 80097cc:	3fd34413 	.word	0x3fd34413
 80097d0:	0800b1e9 	.word	0x0800b1e9
 80097d4:	0800b200 	.word	0x0800b200
 80097d8:	7ff00000 	.word	0x7ff00000
 80097dc:	0800b1e5 	.word	0x0800b1e5
 80097e0:	0800b1dc 	.word	0x0800b1dc
 80097e4:	0800b1b9 	.word	0x0800b1b9
 80097e8:	3ff80000 	.word	0x3ff80000
 80097ec:	0800b2f0 	.word	0x0800b2f0
 80097f0:	0800b258 	.word	0x0800b258
 80097f4:	2301      	movs	r3, #1
 80097f6:	9309      	str	r3, [sp, #36]	; 0x24
 80097f8:	e7d7      	b.n	80097aa <_dtoa_r+0x2c2>
 80097fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	e7ba      	b.n	8009778 <_dtoa_r+0x290>
 8009802:	3101      	adds	r1, #1
 8009804:	0052      	lsls	r2, r2, #1
 8009806:	e7ba      	b.n	800977e <_dtoa_r+0x296>
 8009808:	69e3      	ldr	r3, [r4, #28]
 800980a:	9a00      	ldr	r2, [sp, #0]
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	9b04      	ldr	r3, [sp, #16]
 8009810:	2b0e      	cmp	r3, #14
 8009812:	f200 80a8 	bhi.w	8009966 <_dtoa_r+0x47e>
 8009816:	2d00      	cmp	r5, #0
 8009818:	f000 80a5 	beq.w	8009966 <_dtoa_r+0x47e>
 800981c:	f1bb 0f00 	cmp.w	fp, #0
 8009820:	dd38      	ble.n	8009894 <_dtoa_r+0x3ac>
 8009822:	4bc0      	ldr	r3, [pc, #768]	; (8009b24 <_dtoa_r+0x63c>)
 8009824:	f00b 020f 	and.w	r2, fp, #15
 8009828:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800982c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009830:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009834:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009838:	d019      	beq.n	800986e <_dtoa_r+0x386>
 800983a:	4bbb      	ldr	r3, [pc, #748]	; (8009b28 <_dtoa_r+0x640>)
 800983c:	ec51 0b18 	vmov	r0, r1, d8
 8009840:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009844:	f7f7 f80a 	bl	800085c <__aeabi_ddiv>
 8009848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800984c:	f008 080f 	and.w	r8, r8, #15
 8009850:	2503      	movs	r5, #3
 8009852:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009b28 <_dtoa_r+0x640>
 8009856:	f1b8 0f00 	cmp.w	r8, #0
 800985a:	d10a      	bne.n	8009872 <_dtoa_r+0x38a>
 800985c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009860:	4632      	mov	r2, r6
 8009862:	463b      	mov	r3, r7
 8009864:	f7f6 fffa 	bl	800085c <__aeabi_ddiv>
 8009868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800986c:	e02b      	b.n	80098c6 <_dtoa_r+0x3de>
 800986e:	2502      	movs	r5, #2
 8009870:	e7ef      	b.n	8009852 <_dtoa_r+0x36a>
 8009872:	f018 0f01 	tst.w	r8, #1
 8009876:	d008      	beq.n	800988a <_dtoa_r+0x3a2>
 8009878:	4630      	mov	r0, r6
 800987a:	4639      	mov	r1, r7
 800987c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009880:	f7f6 fec2 	bl	8000608 <__aeabi_dmul>
 8009884:	3501      	adds	r5, #1
 8009886:	4606      	mov	r6, r0
 8009888:	460f      	mov	r7, r1
 800988a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800988e:	f109 0908 	add.w	r9, r9, #8
 8009892:	e7e0      	b.n	8009856 <_dtoa_r+0x36e>
 8009894:	f000 809f 	beq.w	80099d6 <_dtoa_r+0x4ee>
 8009898:	f1cb 0600 	rsb	r6, fp, #0
 800989c:	4ba1      	ldr	r3, [pc, #644]	; (8009b24 <_dtoa_r+0x63c>)
 800989e:	4fa2      	ldr	r7, [pc, #648]	; (8009b28 <_dtoa_r+0x640>)
 80098a0:	f006 020f 	and.w	r2, r6, #15
 80098a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	ec51 0b18 	vmov	r0, r1, d8
 80098b0:	f7f6 feaa 	bl	8000608 <__aeabi_dmul>
 80098b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098b8:	1136      	asrs	r6, r6, #4
 80098ba:	2300      	movs	r3, #0
 80098bc:	2502      	movs	r5, #2
 80098be:	2e00      	cmp	r6, #0
 80098c0:	d17e      	bne.n	80099c0 <_dtoa_r+0x4d8>
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1d0      	bne.n	8009868 <_dtoa_r+0x380>
 80098c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 8084 	beq.w	80099da <_dtoa_r+0x4f2>
 80098d2:	4b96      	ldr	r3, [pc, #600]	; (8009b2c <_dtoa_r+0x644>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	4640      	mov	r0, r8
 80098d8:	4649      	mov	r1, r9
 80098da:	f7f7 f907 	bl	8000aec <__aeabi_dcmplt>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d07b      	beq.n	80099da <_dtoa_r+0x4f2>
 80098e2:	9b04      	ldr	r3, [sp, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d078      	beq.n	80099da <_dtoa_r+0x4f2>
 80098e8:	9b01      	ldr	r3, [sp, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	dd39      	ble.n	8009962 <_dtoa_r+0x47a>
 80098ee:	4b90      	ldr	r3, [pc, #576]	; (8009b30 <_dtoa_r+0x648>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	4640      	mov	r0, r8
 80098f4:	4649      	mov	r1, r9
 80098f6:	f7f6 fe87 	bl	8000608 <__aeabi_dmul>
 80098fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098fe:	9e01      	ldr	r6, [sp, #4]
 8009900:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8009904:	3501      	adds	r5, #1
 8009906:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800990a:	4628      	mov	r0, r5
 800990c:	f7f6 fe12 	bl	8000534 <__aeabi_i2d>
 8009910:	4642      	mov	r2, r8
 8009912:	464b      	mov	r3, r9
 8009914:	f7f6 fe78 	bl	8000608 <__aeabi_dmul>
 8009918:	4b86      	ldr	r3, [pc, #536]	; (8009b34 <_dtoa_r+0x64c>)
 800991a:	2200      	movs	r2, #0
 800991c:	f7f6 fcbe 	bl	800029c <__adddf3>
 8009920:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009928:	9303      	str	r3, [sp, #12]
 800992a:	2e00      	cmp	r6, #0
 800992c:	d158      	bne.n	80099e0 <_dtoa_r+0x4f8>
 800992e:	4b82      	ldr	r3, [pc, #520]	; (8009b38 <_dtoa_r+0x650>)
 8009930:	2200      	movs	r2, #0
 8009932:	4640      	mov	r0, r8
 8009934:	4649      	mov	r1, r9
 8009936:	f7f6 fcaf 	bl	8000298 <__aeabi_dsub>
 800993a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800993e:	4680      	mov	r8, r0
 8009940:	4689      	mov	r9, r1
 8009942:	f7f7 f8f1 	bl	8000b28 <__aeabi_dcmpgt>
 8009946:	2800      	cmp	r0, #0
 8009948:	f040 8296 	bne.w	8009e78 <_dtoa_r+0x990>
 800994c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009950:	4640      	mov	r0, r8
 8009952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009956:	4649      	mov	r1, r9
 8009958:	f7f7 f8c8 	bl	8000aec <__aeabi_dcmplt>
 800995c:	2800      	cmp	r0, #0
 800995e:	f040 8289 	bne.w	8009e74 <_dtoa_r+0x98c>
 8009962:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009966:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009968:	2b00      	cmp	r3, #0
 800996a:	f2c0 814e 	blt.w	8009c0a <_dtoa_r+0x722>
 800996e:	f1bb 0f0e 	cmp.w	fp, #14
 8009972:	f300 814a 	bgt.w	8009c0a <_dtoa_r+0x722>
 8009976:	4b6b      	ldr	r3, [pc, #428]	; (8009b24 <_dtoa_r+0x63c>)
 8009978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800997c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009982:	2b00      	cmp	r3, #0
 8009984:	f280 80dc 	bge.w	8009b40 <_dtoa_r+0x658>
 8009988:	9b04      	ldr	r3, [sp, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	f300 80d8 	bgt.w	8009b40 <_dtoa_r+0x658>
 8009990:	f040 826f 	bne.w	8009e72 <_dtoa_r+0x98a>
 8009994:	4b68      	ldr	r3, [pc, #416]	; (8009b38 <_dtoa_r+0x650>)
 8009996:	2200      	movs	r2, #0
 8009998:	4640      	mov	r0, r8
 800999a:	4649      	mov	r1, r9
 800999c:	f7f6 fe34 	bl	8000608 <__aeabi_dmul>
 80099a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099a4:	f7f7 f8b6 	bl	8000b14 <__aeabi_dcmpge>
 80099a8:	9e04      	ldr	r6, [sp, #16]
 80099aa:	4637      	mov	r7, r6
 80099ac:	2800      	cmp	r0, #0
 80099ae:	f040 8245 	bne.w	8009e3c <_dtoa_r+0x954>
 80099b2:	9d00      	ldr	r5, [sp, #0]
 80099b4:	2331      	movs	r3, #49	; 0x31
 80099b6:	f805 3b01 	strb.w	r3, [r5], #1
 80099ba:	f10b 0b01 	add.w	fp, fp, #1
 80099be:	e241      	b.n	8009e44 <_dtoa_r+0x95c>
 80099c0:	07f2      	lsls	r2, r6, #31
 80099c2:	d505      	bpl.n	80099d0 <_dtoa_r+0x4e8>
 80099c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099c8:	f7f6 fe1e 	bl	8000608 <__aeabi_dmul>
 80099cc:	3501      	adds	r5, #1
 80099ce:	2301      	movs	r3, #1
 80099d0:	1076      	asrs	r6, r6, #1
 80099d2:	3708      	adds	r7, #8
 80099d4:	e773      	b.n	80098be <_dtoa_r+0x3d6>
 80099d6:	2502      	movs	r5, #2
 80099d8:	e775      	b.n	80098c6 <_dtoa_r+0x3de>
 80099da:	9e04      	ldr	r6, [sp, #16]
 80099dc:	465f      	mov	r7, fp
 80099de:	e792      	b.n	8009906 <_dtoa_r+0x41e>
 80099e0:	9900      	ldr	r1, [sp, #0]
 80099e2:	4b50      	ldr	r3, [pc, #320]	; (8009b24 <_dtoa_r+0x63c>)
 80099e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099e8:	4431      	add	r1, r6
 80099ea:	9102      	str	r1, [sp, #8]
 80099ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099ee:	eeb0 9a47 	vmov.f32	s18, s14
 80099f2:	eef0 9a67 	vmov.f32	s19, s15
 80099f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80099fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099fe:	2900      	cmp	r1, #0
 8009a00:	d044      	beq.n	8009a8c <_dtoa_r+0x5a4>
 8009a02:	494e      	ldr	r1, [pc, #312]	; (8009b3c <_dtoa_r+0x654>)
 8009a04:	2000      	movs	r0, #0
 8009a06:	f7f6 ff29 	bl	800085c <__aeabi_ddiv>
 8009a0a:	ec53 2b19 	vmov	r2, r3, d9
 8009a0e:	f7f6 fc43 	bl	8000298 <__aeabi_dsub>
 8009a12:	9d00      	ldr	r5, [sp, #0]
 8009a14:	ec41 0b19 	vmov	d9, r0, r1
 8009a18:	4649      	mov	r1, r9
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	f7f7 f8a4 	bl	8000b68 <__aeabi_d2iz>
 8009a20:	4606      	mov	r6, r0
 8009a22:	f7f6 fd87 	bl	8000534 <__aeabi_i2d>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	f7f6 fc33 	bl	8000298 <__aeabi_dsub>
 8009a32:	3630      	adds	r6, #48	; 0x30
 8009a34:	f805 6b01 	strb.w	r6, [r5], #1
 8009a38:	ec53 2b19 	vmov	r2, r3, d9
 8009a3c:	4680      	mov	r8, r0
 8009a3e:	4689      	mov	r9, r1
 8009a40:	f7f7 f854 	bl	8000aec <__aeabi_dcmplt>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d164      	bne.n	8009b12 <_dtoa_r+0x62a>
 8009a48:	4642      	mov	r2, r8
 8009a4a:	464b      	mov	r3, r9
 8009a4c:	4937      	ldr	r1, [pc, #220]	; (8009b2c <_dtoa_r+0x644>)
 8009a4e:	2000      	movs	r0, #0
 8009a50:	f7f6 fc22 	bl	8000298 <__aeabi_dsub>
 8009a54:	ec53 2b19 	vmov	r2, r3, d9
 8009a58:	f7f7 f848 	bl	8000aec <__aeabi_dcmplt>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	f040 80b6 	bne.w	8009bce <_dtoa_r+0x6e6>
 8009a62:	9b02      	ldr	r3, [sp, #8]
 8009a64:	429d      	cmp	r5, r3
 8009a66:	f43f af7c 	beq.w	8009962 <_dtoa_r+0x47a>
 8009a6a:	4b31      	ldr	r3, [pc, #196]	; (8009b30 <_dtoa_r+0x648>)
 8009a6c:	ec51 0b19 	vmov	r0, r1, d9
 8009a70:	2200      	movs	r2, #0
 8009a72:	f7f6 fdc9 	bl	8000608 <__aeabi_dmul>
 8009a76:	4b2e      	ldr	r3, [pc, #184]	; (8009b30 <_dtoa_r+0x648>)
 8009a78:	ec41 0b19 	vmov	d9, r0, r1
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	4640      	mov	r0, r8
 8009a80:	4649      	mov	r1, r9
 8009a82:	f7f6 fdc1 	bl	8000608 <__aeabi_dmul>
 8009a86:	4680      	mov	r8, r0
 8009a88:	4689      	mov	r9, r1
 8009a8a:	e7c5      	b.n	8009a18 <_dtoa_r+0x530>
 8009a8c:	ec51 0b17 	vmov	r0, r1, d7
 8009a90:	f7f6 fdba 	bl	8000608 <__aeabi_dmul>
 8009a94:	9b02      	ldr	r3, [sp, #8]
 8009a96:	9d00      	ldr	r5, [sp, #0]
 8009a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a9a:	ec41 0b19 	vmov	d9, r0, r1
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	f7f7 f861 	bl	8000b68 <__aeabi_d2iz>
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	f7f6 fd44 	bl	8000534 <__aeabi_i2d>
 8009aac:	3630      	adds	r6, #48	; 0x30
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	f7f6 fbef 	bl	8000298 <__aeabi_dsub>
 8009aba:	f805 6b01 	strb.w	r6, [r5], #1
 8009abe:	9b02      	ldr	r3, [sp, #8]
 8009ac0:	429d      	cmp	r5, r3
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	4689      	mov	r9, r1
 8009ac6:	f04f 0200 	mov.w	r2, #0
 8009aca:	d124      	bne.n	8009b16 <_dtoa_r+0x62e>
 8009acc:	4b1b      	ldr	r3, [pc, #108]	; (8009b3c <_dtoa_r+0x654>)
 8009ace:	ec51 0b19 	vmov	r0, r1, d9
 8009ad2:	f7f6 fbe3 	bl	800029c <__adddf3>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f7 f823 	bl	8000b28 <__aeabi_dcmpgt>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d173      	bne.n	8009bce <_dtoa_r+0x6e6>
 8009ae6:	ec53 2b19 	vmov	r2, r3, d9
 8009aea:	4914      	ldr	r1, [pc, #80]	; (8009b3c <_dtoa_r+0x654>)
 8009aec:	2000      	movs	r0, #0
 8009aee:	f7f6 fbd3 	bl	8000298 <__aeabi_dsub>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4640      	mov	r0, r8
 8009af8:	4649      	mov	r1, r9
 8009afa:	f7f6 fff7 	bl	8000aec <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f43f af2f 	beq.w	8009962 <_dtoa_r+0x47a>
 8009b04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b06:	1e6b      	subs	r3, r5, #1
 8009b08:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b0e:	2b30      	cmp	r3, #48	; 0x30
 8009b10:	d0f8      	beq.n	8009b04 <_dtoa_r+0x61c>
 8009b12:	46bb      	mov	fp, r7
 8009b14:	e04a      	b.n	8009bac <_dtoa_r+0x6c4>
 8009b16:	4b06      	ldr	r3, [pc, #24]	; (8009b30 <_dtoa_r+0x648>)
 8009b18:	f7f6 fd76 	bl	8000608 <__aeabi_dmul>
 8009b1c:	4680      	mov	r8, r0
 8009b1e:	4689      	mov	r9, r1
 8009b20:	e7bd      	b.n	8009a9e <_dtoa_r+0x5b6>
 8009b22:	bf00      	nop
 8009b24:	0800b2f0 	.word	0x0800b2f0
 8009b28:	0800b2c8 	.word	0x0800b2c8
 8009b2c:	3ff00000 	.word	0x3ff00000
 8009b30:	40240000 	.word	0x40240000
 8009b34:	401c0000 	.word	0x401c0000
 8009b38:	40140000 	.word	0x40140000
 8009b3c:	3fe00000 	.word	0x3fe00000
 8009b40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b44:	9d00      	ldr	r5, [sp, #0]
 8009b46:	4642      	mov	r2, r8
 8009b48:	464b      	mov	r3, r9
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	4639      	mov	r1, r7
 8009b4e:	f7f6 fe85 	bl	800085c <__aeabi_ddiv>
 8009b52:	f7f7 f809 	bl	8000b68 <__aeabi_d2iz>
 8009b56:	9001      	str	r0, [sp, #4]
 8009b58:	f7f6 fcec 	bl	8000534 <__aeabi_i2d>
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	464b      	mov	r3, r9
 8009b60:	f7f6 fd52 	bl	8000608 <__aeabi_dmul>
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f6 fb94 	bl	8000298 <__aeabi_dsub>
 8009b70:	9e01      	ldr	r6, [sp, #4]
 8009b72:	9f04      	ldr	r7, [sp, #16]
 8009b74:	3630      	adds	r6, #48	; 0x30
 8009b76:	f805 6b01 	strb.w	r6, [r5], #1
 8009b7a:	9e00      	ldr	r6, [sp, #0]
 8009b7c:	1bae      	subs	r6, r5, r6
 8009b7e:	42b7      	cmp	r7, r6
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	d134      	bne.n	8009bf0 <_dtoa_r+0x708>
 8009b86:	f7f6 fb89 	bl	800029c <__adddf3>
 8009b8a:	4642      	mov	r2, r8
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	4606      	mov	r6, r0
 8009b90:	460f      	mov	r7, r1
 8009b92:	f7f6 ffc9 	bl	8000b28 <__aeabi_dcmpgt>
 8009b96:	b9c8      	cbnz	r0, 8009bcc <_dtoa_r+0x6e4>
 8009b98:	4642      	mov	r2, r8
 8009b9a:	464b      	mov	r3, r9
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	f7f6 ff9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ba4:	b110      	cbz	r0, 8009bac <_dtoa_r+0x6c4>
 8009ba6:	9b01      	ldr	r3, [sp, #4]
 8009ba8:	07db      	lsls	r3, r3, #31
 8009baa:	d40f      	bmi.n	8009bcc <_dtoa_r+0x6e4>
 8009bac:	4651      	mov	r1, sl
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 fbcc 	bl	800a34c <_Bfree>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bb8:	702b      	strb	r3, [r5, #0]
 8009bba:	f10b 0301 	add.w	r3, fp, #1
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f43f ace2 	beq.w	800958c <_dtoa_r+0xa4>
 8009bc8:	601d      	str	r5, [r3, #0]
 8009bca:	e4df      	b.n	800958c <_dtoa_r+0xa4>
 8009bcc:	465f      	mov	r7, fp
 8009bce:	462b      	mov	r3, r5
 8009bd0:	461d      	mov	r5, r3
 8009bd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bd6:	2a39      	cmp	r2, #57	; 0x39
 8009bd8:	d106      	bne.n	8009be8 <_dtoa_r+0x700>
 8009bda:	9a00      	ldr	r2, [sp, #0]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d1f7      	bne.n	8009bd0 <_dtoa_r+0x6e8>
 8009be0:	9900      	ldr	r1, [sp, #0]
 8009be2:	2230      	movs	r2, #48	; 0x30
 8009be4:	3701      	adds	r7, #1
 8009be6:	700a      	strb	r2, [r1, #0]
 8009be8:	781a      	ldrb	r2, [r3, #0]
 8009bea:	3201      	adds	r2, #1
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	e790      	b.n	8009b12 <_dtoa_r+0x62a>
 8009bf0:	4ba3      	ldr	r3, [pc, #652]	; (8009e80 <_dtoa_r+0x998>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f7f6 fd08 	bl	8000608 <__aeabi_dmul>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	4606      	mov	r6, r0
 8009bfe:	460f      	mov	r7, r1
 8009c00:	f7f6 ff6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d09e      	beq.n	8009b46 <_dtoa_r+0x65e>
 8009c08:	e7d0      	b.n	8009bac <_dtoa_r+0x6c4>
 8009c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c0c:	2a00      	cmp	r2, #0
 8009c0e:	f000 80ca 	beq.w	8009da6 <_dtoa_r+0x8be>
 8009c12:	9a07      	ldr	r2, [sp, #28]
 8009c14:	2a01      	cmp	r2, #1
 8009c16:	f300 80ad 	bgt.w	8009d74 <_dtoa_r+0x88c>
 8009c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	f000 80a5 	beq.w	8009d6c <_dtoa_r+0x884>
 8009c22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c26:	9e08      	ldr	r6, [sp, #32]
 8009c28:	9d05      	ldr	r5, [sp, #20]
 8009c2a:	9a05      	ldr	r2, [sp, #20]
 8009c2c:	441a      	add	r2, r3
 8009c2e:	9205      	str	r2, [sp, #20]
 8009c30:	9a06      	ldr	r2, [sp, #24]
 8009c32:	2101      	movs	r1, #1
 8009c34:	441a      	add	r2, r3
 8009c36:	4620      	mov	r0, r4
 8009c38:	9206      	str	r2, [sp, #24]
 8009c3a:	f000 fc3d 	bl	800a4b8 <__i2b>
 8009c3e:	4607      	mov	r7, r0
 8009c40:	b165      	cbz	r5, 8009c5c <_dtoa_r+0x774>
 8009c42:	9b06      	ldr	r3, [sp, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	dd09      	ble.n	8009c5c <_dtoa_r+0x774>
 8009c48:	42ab      	cmp	r3, r5
 8009c4a:	9a05      	ldr	r2, [sp, #20]
 8009c4c:	bfa8      	it	ge
 8009c4e:	462b      	movge	r3, r5
 8009c50:	1ad2      	subs	r2, r2, r3
 8009c52:	9205      	str	r2, [sp, #20]
 8009c54:	9a06      	ldr	r2, [sp, #24]
 8009c56:	1aed      	subs	r5, r5, r3
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	9306      	str	r3, [sp, #24]
 8009c5c:	9b08      	ldr	r3, [sp, #32]
 8009c5e:	b1f3      	cbz	r3, 8009c9e <_dtoa_r+0x7b6>
 8009c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f000 80a3 	beq.w	8009dae <_dtoa_r+0x8c6>
 8009c68:	2e00      	cmp	r6, #0
 8009c6a:	dd10      	ble.n	8009c8e <_dtoa_r+0x7a6>
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	4632      	mov	r2, r6
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 fce1 	bl	800a638 <__pow5mult>
 8009c76:	4652      	mov	r2, sl
 8009c78:	4601      	mov	r1, r0
 8009c7a:	4607      	mov	r7, r0
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 fc31 	bl	800a4e4 <__multiply>
 8009c82:	4651      	mov	r1, sl
 8009c84:	4680      	mov	r8, r0
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 fb60 	bl	800a34c <_Bfree>
 8009c8c:	46c2      	mov	sl, r8
 8009c8e:	9b08      	ldr	r3, [sp, #32]
 8009c90:	1b9a      	subs	r2, r3, r6
 8009c92:	d004      	beq.n	8009c9e <_dtoa_r+0x7b6>
 8009c94:	4651      	mov	r1, sl
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 fcce 	bl	800a638 <__pow5mult>
 8009c9c:	4682      	mov	sl, r0
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f000 fc09 	bl	800a4b8 <__i2b>
 8009ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	4606      	mov	r6, r0
 8009cac:	f340 8081 	ble.w	8009db2 <_dtoa_r+0x8ca>
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 fcbf 	bl	800a638 <__pow5mult>
 8009cba:	9b07      	ldr	r3, [sp, #28]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	dd7a      	ble.n	8009db8 <_dtoa_r+0x8d0>
 8009cc2:	f04f 0800 	mov.w	r8, #0
 8009cc6:	6933      	ldr	r3, [r6, #16]
 8009cc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ccc:	6918      	ldr	r0, [r3, #16]
 8009cce:	f000 fba5 	bl	800a41c <__hi0bits>
 8009cd2:	f1c0 0020 	rsb	r0, r0, #32
 8009cd6:	9b06      	ldr	r3, [sp, #24]
 8009cd8:	4418      	add	r0, r3
 8009cda:	f010 001f 	ands.w	r0, r0, #31
 8009cde:	f000 8094 	beq.w	8009e0a <_dtoa_r+0x922>
 8009ce2:	f1c0 0320 	rsb	r3, r0, #32
 8009ce6:	2b04      	cmp	r3, #4
 8009ce8:	f340 8085 	ble.w	8009df6 <_dtoa_r+0x90e>
 8009cec:	9b05      	ldr	r3, [sp, #20]
 8009cee:	f1c0 001c 	rsb	r0, r0, #28
 8009cf2:	4403      	add	r3, r0
 8009cf4:	9305      	str	r3, [sp, #20]
 8009cf6:	9b06      	ldr	r3, [sp, #24]
 8009cf8:	4403      	add	r3, r0
 8009cfa:	4405      	add	r5, r0
 8009cfc:	9306      	str	r3, [sp, #24]
 8009cfe:	9b05      	ldr	r3, [sp, #20]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	dd05      	ble.n	8009d10 <_dtoa_r+0x828>
 8009d04:	4651      	mov	r1, sl
 8009d06:	461a      	mov	r2, r3
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f000 fcef 	bl	800a6ec <__lshift>
 8009d0e:	4682      	mov	sl, r0
 8009d10:	9b06      	ldr	r3, [sp, #24]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	dd05      	ble.n	8009d22 <_dtoa_r+0x83a>
 8009d16:	4631      	mov	r1, r6
 8009d18:	461a      	mov	r2, r3
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f000 fce6 	bl	800a6ec <__lshift>
 8009d20:	4606      	mov	r6, r0
 8009d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d072      	beq.n	8009e0e <_dtoa_r+0x926>
 8009d28:	4631      	mov	r1, r6
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	f000 fd4a 	bl	800a7c4 <__mcmp>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	da6c      	bge.n	8009e0e <_dtoa_r+0x926>
 8009d34:	2300      	movs	r3, #0
 8009d36:	4651      	mov	r1, sl
 8009d38:	220a      	movs	r2, #10
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 fb28 	bl	800a390 <__multadd>
 8009d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d42:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009d46:	4682      	mov	sl, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 81b0 	beq.w	800a0ae <_dtoa_r+0xbc6>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	4639      	mov	r1, r7
 8009d52:	220a      	movs	r2, #10
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 fb1b 	bl	800a390 <__multadd>
 8009d5a:	9b01      	ldr	r3, [sp, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	4607      	mov	r7, r0
 8009d60:	f300 8096 	bgt.w	8009e90 <_dtoa_r+0x9a8>
 8009d64:	9b07      	ldr	r3, [sp, #28]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	dc59      	bgt.n	8009e1e <_dtoa_r+0x936>
 8009d6a:	e091      	b.n	8009e90 <_dtoa_r+0x9a8>
 8009d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d72:	e758      	b.n	8009c26 <_dtoa_r+0x73e>
 8009d74:	9b04      	ldr	r3, [sp, #16]
 8009d76:	1e5e      	subs	r6, r3, #1
 8009d78:	9b08      	ldr	r3, [sp, #32]
 8009d7a:	42b3      	cmp	r3, r6
 8009d7c:	bfbf      	itttt	lt
 8009d7e:	9b08      	ldrlt	r3, [sp, #32]
 8009d80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009d82:	9608      	strlt	r6, [sp, #32]
 8009d84:	1af3      	sublt	r3, r6, r3
 8009d86:	bfb4      	ite	lt
 8009d88:	18d2      	addlt	r2, r2, r3
 8009d8a:	1b9e      	subge	r6, r3, r6
 8009d8c:	9b04      	ldr	r3, [sp, #16]
 8009d8e:	bfbc      	itt	lt
 8009d90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009d92:	2600      	movlt	r6, #0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	bfb7      	itett	lt
 8009d98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009d9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009da0:	1a9d      	sublt	r5, r3, r2
 8009da2:	2300      	movlt	r3, #0
 8009da4:	e741      	b.n	8009c2a <_dtoa_r+0x742>
 8009da6:	9e08      	ldr	r6, [sp, #32]
 8009da8:	9d05      	ldr	r5, [sp, #20]
 8009daa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009dac:	e748      	b.n	8009c40 <_dtoa_r+0x758>
 8009dae:	9a08      	ldr	r2, [sp, #32]
 8009db0:	e770      	b.n	8009c94 <_dtoa_r+0x7ac>
 8009db2:	9b07      	ldr	r3, [sp, #28]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	dc19      	bgt.n	8009dec <_dtoa_r+0x904>
 8009db8:	9b02      	ldr	r3, [sp, #8]
 8009dba:	b9bb      	cbnz	r3, 8009dec <_dtoa_r+0x904>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dc2:	b99b      	cbnz	r3, 8009dec <_dtoa_r+0x904>
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dca:	0d1b      	lsrs	r3, r3, #20
 8009dcc:	051b      	lsls	r3, r3, #20
 8009dce:	b183      	cbz	r3, 8009df2 <_dtoa_r+0x90a>
 8009dd0:	9b05      	ldr	r3, [sp, #20]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	9305      	str	r3, [sp, #20]
 8009dd6:	9b06      	ldr	r3, [sp, #24]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	9306      	str	r3, [sp, #24]
 8009ddc:	f04f 0801 	mov.w	r8, #1
 8009de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f47f af6f 	bne.w	8009cc6 <_dtoa_r+0x7de>
 8009de8:	2001      	movs	r0, #1
 8009dea:	e774      	b.n	8009cd6 <_dtoa_r+0x7ee>
 8009dec:	f04f 0800 	mov.w	r8, #0
 8009df0:	e7f6      	b.n	8009de0 <_dtoa_r+0x8f8>
 8009df2:	4698      	mov	r8, r3
 8009df4:	e7f4      	b.n	8009de0 <_dtoa_r+0x8f8>
 8009df6:	d082      	beq.n	8009cfe <_dtoa_r+0x816>
 8009df8:	9a05      	ldr	r2, [sp, #20]
 8009dfa:	331c      	adds	r3, #28
 8009dfc:	441a      	add	r2, r3
 8009dfe:	9205      	str	r2, [sp, #20]
 8009e00:	9a06      	ldr	r2, [sp, #24]
 8009e02:	441a      	add	r2, r3
 8009e04:	441d      	add	r5, r3
 8009e06:	9206      	str	r2, [sp, #24]
 8009e08:	e779      	b.n	8009cfe <_dtoa_r+0x816>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	e7f4      	b.n	8009df8 <_dtoa_r+0x910>
 8009e0e:	9b04      	ldr	r3, [sp, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	dc37      	bgt.n	8009e84 <_dtoa_r+0x99c>
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	dd34      	ble.n	8009e84 <_dtoa_r+0x99c>
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	9b01      	ldr	r3, [sp, #4]
 8009e20:	b963      	cbnz	r3, 8009e3c <_dtoa_r+0x954>
 8009e22:	4631      	mov	r1, r6
 8009e24:	2205      	movs	r2, #5
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 fab2 	bl	800a390 <__multadd>
 8009e2c:	4601      	mov	r1, r0
 8009e2e:	4606      	mov	r6, r0
 8009e30:	4650      	mov	r0, sl
 8009e32:	f000 fcc7 	bl	800a7c4 <__mcmp>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	f73f adbb 	bgt.w	80099b2 <_dtoa_r+0x4ca>
 8009e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e3e:	9d00      	ldr	r5, [sp, #0]
 8009e40:	ea6f 0b03 	mvn.w	fp, r3
 8009e44:	f04f 0800 	mov.w	r8, #0
 8009e48:	4631      	mov	r1, r6
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 fa7e 	bl	800a34c <_Bfree>
 8009e50:	2f00      	cmp	r7, #0
 8009e52:	f43f aeab 	beq.w	8009bac <_dtoa_r+0x6c4>
 8009e56:	f1b8 0f00 	cmp.w	r8, #0
 8009e5a:	d005      	beq.n	8009e68 <_dtoa_r+0x980>
 8009e5c:	45b8      	cmp	r8, r7
 8009e5e:	d003      	beq.n	8009e68 <_dtoa_r+0x980>
 8009e60:	4641      	mov	r1, r8
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 fa72 	bl	800a34c <_Bfree>
 8009e68:	4639      	mov	r1, r7
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 fa6e 	bl	800a34c <_Bfree>
 8009e70:	e69c      	b.n	8009bac <_dtoa_r+0x6c4>
 8009e72:	2600      	movs	r6, #0
 8009e74:	4637      	mov	r7, r6
 8009e76:	e7e1      	b.n	8009e3c <_dtoa_r+0x954>
 8009e78:	46bb      	mov	fp, r7
 8009e7a:	4637      	mov	r7, r6
 8009e7c:	e599      	b.n	80099b2 <_dtoa_r+0x4ca>
 8009e7e:	bf00      	nop
 8009e80:	40240000 	.word	0x40240000
 8009e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 80c8 	beq.w	800a01c <_dtoa_r+0xb34>
 8009e8c:	9b04      	ldr	r3, [sp, #16]
 8009e8e:	9301      	str	r3, [sp, #4]
 8009e90:	2d00      	cmp	r5, #0
 8009e92:	dd05      	ble.n	8009ea0 <_dtoa_r+0x9b8>
 8009e94:	4639      	mov	r1, r7
 8009e96:	462a      	mov	r2, r5
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f000 fc27 	bl	800a6ec <__lshift>
 8009e9e:	4607      	mov	r7, r0
 8009ea0:	f1b8 0f00 	cmp.w	r8, #0
 8009ea4:	d05b      	beq.n	8009f5e <_dtoa_r+0xa76>
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 fa0f 	bl	800a2cc <_Balloc>
 8009eae:	4605      	mov	r5, r0
 8009eb0:	b928      	cbnz	r0, 8009ebe <_dtoa_r+0x9d6>
 8009eb2:	4b83      	ldr	r3, [pc, #524]	; (800a0c0 <_dtoa_r+0xbd8>)
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009eba:	f7ff bb2e 	b.w	800951a <_dtoa_r+0x32>
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	3202      	adds	r2, #2
 8009ec2:	0092      	lsls	r2, r2, #2
 8009ec4:	f107 010c 	add.w	r1, r7, #12
 8009ec8:	300c      	adds	r0, #12
 8009eca:	f000 fe39 	bl	800ab40 <memcpy>
 8009ece:	2201      	movs	r2, #1
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f000 fc0a 	bl	800a6ec <__lshift>
 8009ed8:	9b00      	ldr	r3, [sp, #0]
 8009eda:	3301      	adds	r3, #1
 8009edc:	9304      	str	r3, [sp, #16]
 8009ede:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	9308      	str	r3, [sp, #32]
 8009ee6:	9b02      	ldr	r3, [sp, #8]
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	46b8      	mov	r8, r7
 8009eee:	9306      	str	r3, [sp, #24]
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	9b04      	ldr	r3, [sp, #16]
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	4650      	mov	r0, sl
 8009efa:	9301      	str	r3, [sp, #4]
 8009efc:	f7ff fa69 	bl	80093d2 <quorem>
 8009f00:	4641      	mov	r1, r8
 8009f02:	9002      	str	r0, [sp, #8]
 8009f04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f08:	4650      	mov	r0, sl
 8009f0a:	f000 fc5b 	bl	800a7c4 <__mcmp>
 8009f0e:	463a      	mov	r2, r7
 8009f10:	9005      	str	r0, [sp, #20]
 8009f12:	4631      	mov	r1, r6
 8009f14:	4620      	mov	r0, r4
 8009f16:	f000 fc71 	bl	800a7fc <__mdiff>
 8009f1a:	68c2      	ldr	r2, [r0, #12]
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	bb02      	cbnz	r2, 8009f62 <_dtoa_r+0xa7a>
 8009f20:	4601      	mov	r1, r0
 8009f22:	4650      	mov	r0, sl
 8009f24:	f000 fc4e 	bl	800a7c4 <__mcmp>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f30:	f000 fa0c 	bl	800a34c <_Bfree>
 8009f34:	9b07      	ldr	r3, [sp, #28]
 8009f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f38:	9d04      	ldr	r5, [sp, #16]
 8009f3a:	ea43 0102 	orr.w	r1, r3, r2
 8009f3e:	9b06      	ldr	r3, [sp, #24]
 8009f40:	4319      	orrs	r1, r3
 8009f42:	d110      	bne.n	8009f66 <_dtoa_r+0xa7e>
 8009f44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f48:	d029      	beq.n	8009f9e <_dtoa_r+0xab6>
 8009f4a:	9b05      	ldr	r3, [sp, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dd02      	ble.n	8009f56 <_dtoa_r+0xa6e>
 8009f50:	9b02      	ldr	r3, [sp, #8]
 8009f52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009f56:	9b01      	ldr	r3, [sp, #4]
 8009f58:	f883 9000 	strb.w	r9, [r3]
 8009f5c:	e774      	b.n	8009e48 <_dtoa_r+0x960>
 8009f5e:	4638      	mov	r0, r7
 8009f60:	e7ba      	b.n	8009ed8 <_dtoa_r+0x9f0>
 8009f62:	2201      	movs	r2, #1
 8009f64:	e7e1      	b.n	8009f2a <_dtoa_r+0xa42>
 8009f66:	9b05      	ldr	r3, [sp, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	db04      	blt.n	8009f76 <_dtoa_r+0xa8e>
 8009f6c:	9907      	ldr	r1, [sp, #28]
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	9906      	ldr	r1, [sp, #24]
 8009f72:	430b      	orrs	r3, r1
 8009f74:	d120      	bne.n	8009fb8 <_dtoa_r+0xad0>
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	dded      	ble.n	8009f56 <_dtoa_r+0xa6e>
 8009f7a:	4651      	mov	r1, sl
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 fbb4 	bl	800a6ec <__lshift>
 8009f84:	4631      	mov	r1, r6
 8009f86:	4682      	mov	sl, r0
 8009f88:	f000 fc1c 	bl	800a7c4 <__mcmp>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	dc03      	bgt.n	8009f98 <_dtoa_r+0xab0>
 8009f90:	d1e1      	bne.n	8009f56 <_dtoa_r+0xa6e>
 8009f92:	f019 0f01 	tst.w	r9, #1
 8009f96:	d0de      	beq.n	8009f56 <_dtoa_r+0xa6e>
 8009f98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f9c:	d1d8      	bne.n	8009f50 <_dtoa_r+0xa68>
 8009f9e:	9a01      	ldr	r2, [sp, #4]
 8009fa0:	2339      	movs	r3, #57	; 0x39
 8009fa2:	7013      	strb	r3, [r2, #0]
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	461d      	mov	r5, r3
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fae:	2a39      	cmp	r2, #57	; 0x39
 8009fb0:	d06c      	beq.n	800a08c <_dtoa_r+0xba4>
 8009fb2:	3201      	adds	r2, #1
 8009fb4:	701a      	strb	r2, [r3, #0]
 8009fb6:	e747      	b.n	8009e48 <_dtoa_r+0x960>
 8009fb8:	2a00      	cmp	r2, #0
 8009fba:	dd07      	ble.n	8009fcc <_dtoa_r+0xae4>
 8009fbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fc0:	d0ed      	beq.n	8009f9e <_dtoa_r+0xab6>
 8009fc2:	9a01      	ldr	r2, [sp, #4]
 8009fc4:	f109 0301 	add.w	r3, r9, #1
 8009fc8:	7013      	strb	r3, [r2, #0]
 8009fca:	e73d      	b.n	8009e48 <_dtoa_r+0x960>
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	9a08      	ldr	r2, [sp, #32]
 8009fd0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d043      	beq.n	800a060 <_dtoa_r+0xb78>
 8009fd8:	4651      	mov	r1, sl
 8009fda:	2300      	movs	r3, #0
 8009fdc:	220a      	movs	r2, #10
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 f9d6 	bl	800a390 <__multadd>
 8009fe4:	45b8      	cmp	r8, r7
 8009fe6:	4682      	mov	sl, r0
 8009fe8:	f04f 0300 	mov.w	r3, #0
 8009fec:	f04f 020a 	mov.w	r2, #10
 8009ff0:	4641      	mov	r1, r8
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	d107      	bne.n	800a006 <_dtoa_r+0xb1e>
 8009ff6:	f000 f9cb 	bl	800a390 <__multadd>
 8009ffa:	4680      	mov	r8, r0
 8009ffc:	4607      	mov	r7, r0
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	3301      	adds	r3, #1
 800a002:	9304      	str	r3, [sp, #16]
 800a004:	e775      	b.n	8009ef2 <_dtoa_r+0xa0a>
 800a006:	f000 f9c3 	bl	800a390 <__multadd>
 800a00a:	4639      	mov	r1, r7
 800a00c:	4680      	mov	r8, r0
 800a00e:	2300      	movs	r3, #0
 800a010:	220a      	movs	r2, #10
 800a012:	4620      	mov	r0, r4
 800a014:	f000 f9bc 	bl	800a390 <__multadd>
 800a018:	4607      	mov	r7, r0
 800a01a:	e7f0      	b.n	8009ffe <_dtoa_r+0xb16>
 800a01c:	9b04      	ldr	r3, [sp, #16]
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	9d00      	ldr	r5, [sp, #0]
 800a022:	4631      	mov	r1, r6
 800a024:	4650      	mov	r0, sl
 800a026:	f7ff f9d4 	bl	80093d2 <quorem>
 800a02a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a02e:	9b00      	ldr	r3, [sp, #0]
 800a030:	f805 9b01 	strb.w	r9, [r5], #1
 800a034:	1aea      	subs	r2, r5, r3
 800a036:	9b01      	ldr	r3, [sp, #4]
 800a038:	4293      	cmp	r3, r2
 800a03a:	dd07      	ble.n	800a04c <_dtoa_r+0xb64>
 800a03c:	4651      	mov	r1, sl
 800a03e:	2300      	movs	r3, #0
 800a040:	220a      	movs	r2, #10
 800a042:	4620      	mov	r0, r4
 800a044:	f000 f9a4 	bl	800a390 <__multadd>
 800a048:	4682      	mov	sl, r0
 800a04a:	e7ea      	b.n	800a022 <_dtoa_r+0xb3a>
 800a04c:	9b01      	ldr	r3, [sp, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	bfc8      	it	gt
 800a052:	461d      	movgt	r5, r3
 800a054:	9b00      	ldr	r3, [sp, #0]
 800a056:	bfd8      	it	le
 800a058:	2501      	movle	r5, #1
 800a05a:	441d      	add	r5, r3
 800a05c:	f04f 0800 	mov.w	r8, #0
 800a060:	4651      	mov	r1, sl
 800a062:	2201      	movs	r2, #1
 800a064:	4620      	mov	r0, r4
 800a066:	f000 fb41 	bl	800a6ec <__lshift>
 800a06a:	4631      	mov	r1, r6
 800a06c:	4682      	mov	sl, r0
 800a06e:	f000 fba9 	bl	800a7c4 <__mcmp>
 800a072:	2800      	cmp	r0, #0
 800a074:	dc96      	bgt.n	8009fa4 <_dtoa_r+0xabc>
 800a076:	d102      	bne.n	800a07e <_dtoa_r+0xb96>
 800a078:	f019 0f01 	tst.w	r9, #1
 800a07c:	d192      	bne.n	8009fa4 <_dtoa_r+0xabc>
 800a07e:	462b      	mov	r3, r5
 800a080:	461d      	mov	r5, r3
 800a082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a086:	2a30      	cmp	r2, #48	; 0x30
 800a088:	d0fa      	beq.n	800a080 <_dtoa_r+0xb98>
 800a08a:	e6dd      	b.n	8009e48 <_dtoa_r+0x960>
 800a08c:	9a00      	ldr	r2, [sp, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d189      	bne.n	8009fa6 <_dtoa_r+0xabe>
 800a092:	f10b 0b01 	add.w	fp, fp, #1
 800a096:	2331      	movs	r3, #49	; 0x31
 800a098:	e796      	b.n	8009fc8 <_dtoa_r+0xae0>
 800a09a:	4b0a      	ldr	r3, [pc, #40]	; (800a0c4 <_dtoa_r+0xbdc>)
 800a09c:	f7ff ba99 	b.w	80095d2 <_dtoa_r+0xea>
 800a0a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f47f aa6d 	bne.w	8009582 <_dtoa_r+0x9a>
 800a0a8:	4b07      	ldr	r3, [pc, #28]	; (800a0c8 <_dtoa_r+0xbe0>)
 800a0aa:	f7ff ba92 	b.w	80095d2 <_dtoa_r+0xea>
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dcb5      	bgt.n	800a020 <_dtoa_r+0xb38>
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	f73f aeb1 	bgt.w	8009e1e <_dtoa_r+0x936>
 800a0bc:	e7b0      	b.n	800a020 <_dtoa_r+0xb38>
 800a0be:	bf00      	nop
 800a0c0:	0800b258 	.word	0x0800b258
 800a0c4:	0800b1b8 	.word	0x0800b1b8
 800a0c8:	0800b1dc 	.word	0x0800b1dc

0800a0cc <_free_r>:
 800a0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	d044      	beq.n	800a15c <_free_r+0x90>
 800a0d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0d6:	9001      	str	r0, [sp, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f1a1 0404 	sub.w	r4, r1, #4
 800a0de:	bfb8      	it	lt
 800a0e0:	18e4      	addlt	r4, r4, r3
 800a0e2:	f000 f8e7 	bl	800a2b4 <__malloc_lock>
 800a0e6:	4a1e      	ldr	r2, [pc, #120]	; (800a160 <_free_r+0x94>)
 800a0e8:	9801      	ldr	r0, [sp, #4]
 800a0ea:	6813      	ldr	r3, [r2, #0]
 800a0ec:	b933      	cbnz	r3, 800a0fc <_free_r+0x30>
 800a0ee:	6063      	str	r3, [r4, #4]
 800a0f0:	6014      	str	r4, [r2, #0]
 800a0f2:	b003      	add	sp, #12
 800a0f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0f8:	f000 b8e2 	b.w	800a2c0 <__malloc_unlock>
 800a0fc:	42a3      	cmp	r3, r4
 800a0fe:	d908      	bls.n	800a112 <_free_r+0x46>
 800a100:	6825      	ldr	r5, [r4, #0]
 800a102:	1961      	adds	r1, r4, r5
 800a104:	428b      	cmp	r3, r1
 800a106:	bf01      	itttt	eq
 800a108:	6819      	ldreq	r1, [r3, #0]
 800a10a:	685b      	ldreq	r3, [r3, #4]
 800a10c:	1949      	addeq	r1, r1, r5
 800a10e:	6021      	streq	r1, [r4, #0]
 800a110:	e7ed      	b.n	800a0ee <_free_r+0x22>
 800a112:	461a      	mov	r2, r3
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	b10b      	cbz	r3, 800a11c <_free_r+0x50>
 800a118:	42a3      	cmp	r3, r4
 800a11a:	d9fa      	bls.n	800a112 <_free_r+0x46>
 800a11c:	6811      	ldr	r1, [r2, #0]
 800a11e:	1855      	adds	r5, r2, r1
 800a120:	42a5      	cmp	r5, r4
 800a122:	d10b      	bne.n	800a13c <_free_r+0x70>
 800a124:	6824      	ldr	r4, [r4, #0]
 800a126:	4421      	add	r1, r4
 800a128:	1854      	adds	r4, r2, r1
 800a12a:	42a3      	cmp	r3, r4
 800a12c:	6011      	str	r1, [r2, #0]
 800a12e:	d1e0      	bne.n	800a0f2 <_free_r+0x26>
 800a130:	681c      	ldr	r4, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	6053      	str	r3, [r2, #4]
 800a136:	440c      	add	r4, r1
 800a138:	6014      	str	r4, [r2, #0]
 800a13a:	e7da      	b.n	800a0f2 <_free_r+0x26>
 800a13c:	d902      	bls.n	800a144 <_free_r+0x78>
 800a13e:	230c      	movs	r3, #12
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	e7d6      	b.n	800a0f2 <_free_r+0x26>
 800a144:	6825      	ldr	r5, [r4, #0]
 800a146:	1961      	adds	r1, r4, r5
 800a148:	428b      	cmp	r3, r1
 800a14a:	bf04      	itt	eq
 800a14c:	6819      	ldreq	r1, [r3, #0]
 800a14e:	685b      	ldreq	r3, [r3, #4]
 800a150:	6063      	str	r3, [r4, #4]
 800a152:	bf04      	itt	eq
 800a154:	1949      	addeq	r1, r1, r5
 800a156:	6021      	streq	r1, [r4, #0]
 800a158:	6054      	str	r4, [r2, #4]
 800a15a:	e7ca      	b.n	800a0f2 <_free_r+0x26>
 800a15c:	b003      	add	sp, #12
 800a15e:	bd30      	pop	{r4, r5, pc}
 800a160:	200107b8 	.word	0x200107b8

0800a164 <malloc>:
 800a164:	4b02      	ldr	r3, [pc, #8]	; (800a170 <malloc+0xc>)
 800a166:	4601      	mov	r1, r0
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	f000 b823 	b.w	800a1b4 <_malloc_r>
 800a16e:	bf00      	nop
 800a170:	20000100 	.word	0x20000100

0800a174 <sbrk_aligned>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	4e0e      	ldr	r6, [pc, #56]	; (800a1b0 <sbrk_aligned+0x3c>)
 800a178:	460c      	mov	r4, r1
 800a17a:	6831      	ldr	r1, [r6, #0]
 800a17c:	4605      	mov	r5, r0
 800a17e:	b911      	cbnz	r1, 800a186 <sbrk_aligned+0x12>
 800a180:	f000 fcce 	bl	800ab20 <_sbrk_r>
 800a184:	6030      	str	r0, [r6, #0]
 800a186:	4621      	mov	r1, r4
 800a188:	4628      	mov	r0, r5
 800a18a:	f000 fcc9 	bl	800ab20 <_sbrk_r>
 800a18e:	1c43      	adds	r3, r0, #1
 800a190:	d00a      	beq.n	800a1a8 <sbrk_aligned+0x34>
 800a192:	1cc4      	adds	r4, r0, #3
 800a194:	f024 0403 	bic.w	r4, r4, #3
 800a198:	42a0      	cmp	r0, r4
 800a19a:	d007      	beq.n	800a1ac <sbrk_aligned+0x38>
 800a19c:	1a21      	subs	r1, r4, r0
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f000 fcbe 	bl	800ab20 <_sbrk_r>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d101      	bne.n	800a1ac <sbrk_aligned+0x38>
 800a1a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	200107bc 	.word	0x200107bc

0800a1b4 <_malloc_r>:
 800a1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1b8:	1ccd      	adds	r5, r1, #3
 800a1ba:	f025 0503 	bic.w	r5, r5, #3
 800a1be:	3508      	adds	r5, #8
 800a1c0:	2d0c      	cmp	r5, #12
 800a1c2:	bf38      	it	cc
 800a1c4:	250c      	movcc	r5, #12
 800a1c6:	2d00      	cmp	r5, #0
 800a1c8:	4607      	mov	r7, r0
 800a1ca:	db01      	blt.n	800a1d0 <_malloc_r+0x1c>
 800a1cc:	42a9      	cmp	r1, r5
 800a1ce:	d905      	bls.n	800a1dc <_malloc_r+0x28>
 800a1d0:	230c      	movs	r3, #12
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	2600      	movs	r6, #0
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2b0 <_malloc_r+0xfc>
 800a1e0:	f000 f868 	bl	800a2b4 <__malloc_lock>
 800a1e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1e8:	461c      	mov	r4, r3
 800a1ea:	bb5c      	cbnz	r4, 800a244 <_malloc_r+0x90>
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	f7ff ffc0 	bl	800a174 <sbrk_aligned>
 800a1f4:	1c43      	adds	r3, r0, #1
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	d155      	bne.n	800a2a6 <_malloc_r+0xf2>
 800a1fa:	f8d8 4000 	ldr.w	r4, [r8]
 800a1fe:	4626      	mov	r6, r4
 800a200:	2e00      	cmp	r6, #0
 800a202:	d145      	bne.n	800a290 <_malloc_r+0xdc>
 800a204:	2c00      	cmp	r4, #0
 800a206:	d048      	beq.n	800a29a <_malloc_r+0xe6>
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	4631      	mov	r1, r6
 800a20c:	4638      	mov	r0, r7
 800a20e:	eb04 0903 	add.w	r9, r4, r3
 800a212:	f000 fc85 	bl	800ab20 <_sbrk_r>
 800a216:	4581      	cmp	r9, r0
 800a218:	d13f      	bne.n	800a29a <_malloc_r+0xe6>
 800a21a:	6821      	ldr	r1, [r4, #0]
 800a21c:	1a6d      	subs	r5, r5, r1
 800a21e:	4629      	mov	r1, r5
 800a220:	4638      	mov	r0, r7
 800a222:	f7ff ffa7 	bl	800a174 <sbrk_aligned>
 800a226:	3001      	adds	r0, #1
 800a228:	d037      	beq.n	800a29a <_malloc_r+0xe6>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	442b      	add	r3, r5
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	f8d8 3000 	ldr.w	r3, [r8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d038      	beq.n	800a2aa <_malloc_r+0xf6>
 800a238:	685a      	ldr	r2, [r3, #4]
 800a23a:	42a2      	cmp	r2, r4
 800a23c:	d12b      	bne.n	800a296 <_malloc_r+0xe2>
 800a23e:	2200      	movs	r2, #0
 800a240:	605a      	str	r2, [r3, #4]
 800a242:	e00f      	b.n	800a264 <_malloc_r+0xb0>
 800a244:	6822      	ldr	r2, [r4, #0]
 800a246:	1b52      	subs	r2, r2, r5
 800a248:	d41f      	bmi.n	800a28a <_malloc_r+0xd6>
 800a24a:	2a0b      	cmp	r2, #11
 800a24c:	d917      	bls.n	800a27e <_malloc_r+0xca>
 800a24e:	1961      	adds	r1, r4, r5
 800a250:	42a3      	cmp	r3, r4
 800a252:	6025      	str	r5, [r4, #0]
 800a254:	bf18      	it	ne
 800a256:	6059      	strne	r1, [r3, #4]
 800a258:	6863      	ldr	r3, [r4, #4]
 800a25a:	bf08      	it	eq
 800a25c:	f8c8 1000 	streq.w	r1, [r8]
 800a260:	5162      	str	r2, [r4, r5]
 800a262:	604b      	str	r3, [r1, #4]
 800a264:	4638      	mov	r0, r7
 800a266:	f104 060b 	add.w	r6, r4, #11
 800a26a:	f000 f829 	bl	800a2c0 <__malloc_unlock>
 800a26e:	f026 0607 	bic.w	r6, r6, #7
 800a272:	1d23      	adds	r3, r4, #4
 800a274:	1af2      	subs	r2, r6, r3
 800a276:	d0ae      	beq.n	800a1d6 <_malloc_r+0x22>
 800a278:	1b9b      	subs	r3, r3, r6
 800a27a:	50a3      	str	r3, [r4, r2]
 800a27c:	e7ab      	b.n	800a1d6 <_malloc_r+0x22>
 800a27e:	42a3      	cmp	r3, r4
 800a280:	6862      	ldr	r2, [r4, #4]
 800a282:	d1dd      	bne.n	800a240 <_malloc_r+0x8c>
 800a284:	f8c8 2000 	str.w	r2, [r8]
 800a288:	e7ec      	b.n	800a264 <_malloc_r+0xb0>
 800a28a:	4623      	mov	r3, r4
 800a28c:	6864      	ldr	r4, [r4, #4]
 800a28e:	e7ac      	b.n	800a1ea <_malloc_r+0x36>
 800a290:	4634      	mov	r4, r6
 800a292:	6876      	ldr	r6, [r6, #4]
 800a294:	e7b4      	b.n	800a200 <_malloc_r+0x4c>
 800a296:	4613      	mov	r3, r2
 800a298:	e7cc      	b.n	800a234 <_malloc_r+0x80>
 800a29a:	230c      	movs	r3, #12
 800a29c:	603b      	str	r3, [r7, #0]
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f000 f80e 	bl	800a2c0 <__malloc_unlock>
 800a2a4:	e797      	b.n	800a1d6 <_malloc_r+0x22>
 800a2a6:	6025      	str	r5, [r4, #0]
 800a2a8:	e7dc      	b.n	800a264 <_malloc_r+0xb0>
 800a2aa:	605b      	str	r3, [r3, #4]
 800a2ac:	deff      	udf	#255	; 0xff
 800a2ae:	bf00      	nop
 800a2b0:	200107b8 	.word	0x200107b8

0800a2b4 <__malloc_lock>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	; (800a2bc <__malloc_lock+0x8>)
 800a2b6:	f7ff b88a 	b.w	80093ce <__retarget_lock_acquire_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	200107b4 	.word	0x200107b4

0800a2c0 <__malloc_unlock>:
 800a2c0:	4801      	ldr	r0, [pc, #4]	; (800a2c8 <__malloc_unlock+0x8>)
 800a2c2:	f7ff b885 	b.w	80093d0 <__retarget_lock_release_recursive>
 800a2c6:	bf00      	nop
 800a2c8:	200107b4 	.word	0x200107b4

0800a2cc <_Balloc>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	69c6      	ldr	r6, [r0, #28]
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	b976      	cbnz	r6, 800a2f4 <_Balloc+0x28>
 800a2d6:	2010      	movs	r0, #16
 800a2d8:	f7ff ff44 	bl	800a164 <malloc>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	61e0      	str	r0, [r4, #28]
 800a2e0:	b920      	cbnz	r0, 800a2ec <_Balloc+0x20>
 800a2e2:	4b18      	ldr	r3, [pc, #96]	; (800a344 <_Balloc+0x78>)
 800a2e4:	4818      	ldr	r0, [pc, #96]	; (800a348 <_Balloc+0x7c>)
 800a2e6:	216b      	movs	r1, #107	; 0x6b
 800a2e8:	f000 fc38 	bl	800ab5c <__assert_func>
 800a2ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2f0:	6006      	str	r6, [r0, #0]
 800a2f2:	60c6      	str	r6, [r0, #12]
 800a2f4:	69e6      	ldr	r6, [r4, #28]
 800a2f6:	68f3      	ldr	r3, [r6, #12]
 800a2f8:	b183      	cbz	r3, 800a31c <_Balloc+0x50>
 800a2fa:	69e3      	ldr	r3, [r4, #28]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a302:	b9b8      	cbnz	r0, 800a334 <_Balloc+0x68>
 800a304:	2101      	movs	r1, #1
 800a306:	fa01 f605 	lsl.w	r6, r1, r5
 800a30a:	1d72      	adds	r2, r6, #5
 800a30c:	0092      	lsls	r2, r2, #2
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 fc42 	bl	800ab98 <_calloc_r>
 800a314:	b160      	cbz	r0, 800a330 <_Balloc+0x64>
 800a316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a31a:	e00e      	b.n	800a33a <_Balloc+0x6e>
 800a31c:	2221      	movs	r2, #33	; 0x21
 800a31e:	2104      	movs	r1, #4
 800a320:	4620      	mov	r0, r4
 800a322:	f000 fc39 	bl	800ab98 <_calloc_r>
 800a326:	69e3      	ldr	r3, [r4, #28]
 800a328:	60f0      	str	r0, [r6, #12]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e4      	bne.n	800a2fa <_Balloc+0x2e>
 800a330:	2000      	movs	r0, #0
 800a332:	bd70      	pop	{r4, r5, r6, pc}
 800a334:	6802      	ldr	r2, [r0, #0]
 800a336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a33a:	2300      	movs	r3, #0
 800a33c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a340:	e7f7      	b.n	800a332 <_Balloc+0x66>
 800a342:	bf00      	nop
 800a344:	0800b1e9 	.word	0x0800b1e9
 800a348:	0800b269 	.word	0x0800b269

0800a34c <_Bfree>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	69c6      	ldr	r6, [r0, #28]
 800a350:	4605      	mov	r5, r0
 800a352:	460c      	mov	r4, r1
 800a354:	b976      	cbnz	r6, 800a374 <_Bfree+0x28>
 800a356:	2010      	movs	r0, #16
 800a358:	f7ff ff04 	bl	800a164 <malloc>
 800a35c:	4602      	mov	r2, r0
 800a35e:	61e8      	str	r0, [r5, #28]
 800a360:	b920      	cbnz	r0, 800a36c <_Bfree+0x20>
 800a362:	4b09      	ldr	r3, [pc, #36]	; (800a388 <_Bfree+0x3c>)
 800a364:	4809      	ldr	r0, [pc, #36]	; (800a38c <_Bfree+0x40>)
 800a366:	218f      	movs	r1, #143	; 0x8f
 800a368:	f000 fbf8 	bl	800ab5c <__assert_func>
 800a36c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a370:	6006      	str	r6, [r0, #0]
 800a372:	60c6      	str	r6, [r0, #12]
 800a374:	b13c      	cbz	r4, 800a386 <_Bfree+0x3a>
 800a376:	69eb      	ldr	r3, [r5, #28]
 800a378:	6862      	ldr	r2, [r4, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a380:	6021      	str	r1, [r4, #0]
 800a382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a386:	bd70      	pop	{r4, r5, r6, pc}
 800a388:	0800b1e9 	.word	0x0800b1e9
 800a38c:	0800b269 	.word	0x0800b269

0800a390 <__multadd>:
 800a390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a394:	690d      	ldr	r5, [r1, #16]
 800a396:	4607      	mov	r7, r0
 800a398:	460c      	mov	r4, r1
 800a39a:	461e      	mov	r6, r3
 800a39c:	f101 0c14 	add.w	ip, r1, #20
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a3a6:	b299      	uxth	r1, r3
 800a3a8:	fb02 6101 	mla	r1, r2, r1, r6
 800a3ac:	0c1e      	lsrs	r6, r3, #16
 800a3ae:	0c0b      	lsrs	r3, r1, #16
 800a3b0:	fb02 3306 	mla	r3, r2, r6, r3
 800a3b4:	b289      	uxth	r1, r1
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3bc:	4285      	cmp	r5, r0
 800a3be:	f84c 1b04 	str.w	r1, [ip], #4
 800a3c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3c6:	dcec      	bgt.n	800a3a2 <__multadd+0x12>
 800a3c8:	b30e      	cbz	r6, 800a40e <__multadd+0x7e>
 800a3ca:	68a3      	ldr	r3, [r4, #8]
 800a3cc:	42ab      	cmp	r3, r5
 800a3ce:	dc19      	bgt.n	800a404 <__multadd+0x74>
 800a3d0:	6861      	ldr	r1, [r4, #4]
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	3101      	adds	r1, #1
 800a3d6:	f7ff ff79 	bl	800a2cc <_Balloc>
 800a3da:	4680      	mov	r8, r0
 800a3dc:	b928      	cbnz	r0, 800a3ea <__multadd+0x5a>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	4b0c      	ldr	r3, [pc, #48]	; (800a414 <__multadd+0x84>)
 800a3e2:	480d      	ldr	r0, [pc, #52]	; (800a418 <__multadd+0x88>)
 800a3e4:	21ba      	movs	r1, #186	; 0xba
 800a3e6:	f000 fbb9 	bl	800ab5c <__assert_func>
 800a3ea:	6922      	ldr	r2, [r4, #16]
 800a3ec:	3202      	adds	r2, #2
 800a3ee:	f104 010c 	add.w	r1, r4, #12
 800a3f2:	0092      	lsls	r2, r2, #2
 800a3f4:	300c      	adds	r0, #12
 800a3f6:	f000 fba3 	bl	800ab40 <memcpy>
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff ffa5 	bl	800a34c <_Bfree>
 800a402:	4644      	mov	r4, r8
 800a404:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a408:	3501      	adds	r5, #1
 800a40a:	615e      	str	r6, [r3, #20]
 800a40c:	6125      	str	r5, [r4, #16]
 800a40e:	4620      	mov	r0, r4
 800a410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a414:	0800b258 	.word	0x0800b258
 800a418:	0800b269 	.word	0x0800b269

0800a41c <__hi0bits>:
 800a41c:	0c03      	lsrs	r3, r0, #16
 800a41e:	041b      	lsls	r3, r3, #16
 800a420:	b9d3      	cbnz	r3, 800a458 <__hi0bits+0x3c>
 800a422:	0400      	lsls	r0, r0, #16
 800a424:	2310      	movs	r3, #16
 800a426:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a42a:	bf04      	itt	eq
 800a42c:	0200      	lsleq	r0, r0, #8
 800a42e:	3308      	addeq	r3, #8
 800a430:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a434:	bf04      	itt	eq
 800a436:	0100      	lsleq	r0, r0, #4
 800a438:	3304      	addeq	r3, #4
 800a43a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a43e:	bf04      	itt	eq
 800a440:	0080      	lsleq	r0, r0, #2
 800a442:	3302      	addeq	r3, #2
 800a444:	2800      	cmp	r0, #0
 800a446:	db05      	blt.n	800a454 <__hi0bits+0x38>
 800a448:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a44c:	f103 0301 	add.w	r3, r3, #1
 800a450:	bf08      	it	eq
 800a452:	2320      	moveq	r3, #32
 800a454:	4618      	mov	r0, r3
 800a456:	4770      	bx	lr
 800a458:	2300      	movs	r3, #0
 800a45a:	e7e4      	b.n	800a426 <__hi0bits+0xa>

0800a45c <__lo0bits>:
 800a45c:	6803      	ldr	r3, [r0, #0]
 800a45e:	f013 0207 	ands.w	r2, r3, #7
 800a462:	d00c      	beq.n	800a47e <__lo0bits+0x22>
 800a464:	07d9      	lsls	r1, r3, #31
 800a466:	d422      	bmi.n	800a4ae <__lo0bits+0x52>
 800a468:	079a      	lsls	r2, r3, #30
 800a46a:	bf49      	itett	mi
 800a46c:	085b      	lsrmi	r3, r3, #1
 800a46e:	089b      	lsrpl	r3, r3, #2
 800a470:	6003      	strmi	r3, [r0, #0]
 800a472:	2201      	movmi	r2, #1
 800a474:	bf5c      	itt	pl
 800a476:	6003      	strpl	r3, [r0, #0]
 800a478:	2202      	movpl	r2, #2
 800a47a:	4610      	mov	r0, r2
 800a47c:	4770      	bx	lr
 800a47e:	b299      	uxth	r1, r3
 800a480:	b909      	cbnz	r1, 800a486 <__lo0bits+0x2a>
 800a482:	0c1b      	lsrs	r3, r3, #16
 800a484:	2210      	movs	r2, #16
 800a486:	b2d9      	uxtb	r1, r3
 800a488:	b909      	cbnz	r1, 800a48e <__lo0bits+0x32>
 800a48a:	3208      	adds	r2, #8
 800a48c:	0a1b      	lsrs	r3, r3, #8
 800a48e:	0719      	lsls	r1, r3, #28
 800a490:	bf04      	itt	eq
 800a492:	091b      	lsreq	r3, r3, #4
 800a494:	3204      	addeq	r2, #4
 800a496:	0799      	lsls	r1, r3, #30
 800a498:	bf04      	itt	eq
 800a49a:	089b      	lsreq	r3, r3, #2
 800a49c:	3202      	addeq	r2, #2
 800a49e:	07d9      	lsls	r1, r3, #31
 800a4a0:	d403      	bmi.n	800a4aa <__lo0bits+0x4e>
 800a4a2:	085b      	lsrs	r3, r3, #1
 800a4a4:	f102 0201 	add.w	r2, r2, #1
 800a4a8:	d003      	beq.n	800a4b2 <__lo0bits+0x56>
 800a4aa:	6003      	str	r3, [r0, #0]
 800a4ac:	e7e5      	b.n	800a47a <__lo0bits+0x1e>
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	e7e3      	b.n	800a47a <__lo0bits+0x1e>
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	e7e1      	b.n	800a47a <__lo0bits+0x1e>
	...

0800a4b8 <__i2b>:
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	2101      	movs	r1, #1
 800a4be:	f7ff ff05 	bl	800a2cc <_Balloc>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	b928      	cbnz	r0, 800a4d2 <__i2b+0x1a>
 800a4c6:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <__i2b+0x24>)
 800a4c8:	4805      	ldr	r0, [pc, #20]	; (800a4e0 <__i2b+0x28>)
 800a4ca:	f240 1145 	movw	r1, #325	; 0x145
 800a4ce:	f000 fb45 	bl	800ab5c <__assert_func>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	6144      	str	r4, [r0, #20]
 800a4d6:	6103      	str	r3, [r0, #16]
 800a4d8:	bd10      	pop	{r4, pc}
 800a4da:	bf00      	nop
 800a4dc:	0800b258 	.word	0x0800b258
 800a4e0:	0800b269 	.word	0x0800b269

0800a4e4 <__multiply>:
 800a4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e8:	4691      	mov	r9, r2
 800a4ea:	690a      	ldr	r2, [r1, #16]
 800a4ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	bfb8      	it	lt
 800a4f4:	460b      	movlt	r3, r1
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	bfbc      	itt	lt
 800a4fa:	464c      	movlt	r4, r9
 800a4fc:	4699      	movlt	r9, r3
 800a4fe:	6927      	ldr	r7, [r4, #16]
 800a500:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a504:	68a3      	ldr	r3, [r4, #8]
 800a506:	6861      	ldr	r1, [r4, #4]
 800a508:	eb07 060a 	add.w	r6, r7, sl
 800a50c:	42b3      	cmp	r3, r6
 800a50e:	b085      	sub	sp, #20
 800a510:	bfb8      	it	lt
 800a512:	3101      	addlt	r1, #1
 800a514:	f7ff feda 	bl	800a2cc <_Balloc>
 800a518:	b930      	cbnz	r0, 800a528 <__multiply+0x44>
 800a51a:	4602      	mov	r2, r0
 800a51c:	4b44      	ldr	r3, [pc, #272]	; (800a630 <__multiply+0x14c>)
 800a51e:	4845      	ldr	r0, [pc, #276]	; (800a634 <__multiply+0x150>)
 800a520:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a524:	f000 fb1a 	bl	800ab5c <__assert_func>
 800a528:	f100 0514 	add.w	r5, r0, #20
 800a52c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a530:	462b      	mov	r3, r5
 800a532:	2200      	movs	r2, #0
 800a534:	4543      	cmp	r3, r8
 800a536:	d321      	bcc.n	800a57c <__multiply+0x98>
 800a538:	f104 0314 	add.w	r3, r4, #20
 800a53c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a540:	f109 0314 	add.w	r3, r9, #20
 800a544:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a548:	9202      	str	r2, [sp, #8]
 800a54a:	1b3a      	subs	r2, r7, r4
 800a54c:	3a15      	subs	r2, #21
 800a54e:	f022 0203 	bic.w	r2, r2, #3
 800a552:	3204      	adds	r2, #4
 800a554:	f104 0115 	add.w	r1, r4, #21
 800a558:	428f      	cmp	r7, r1
 800a55a:	bf38      	it	cc
 800a55c:	2204      	movcc	r2, #4
 800a55e:	9201      	str	r2, [sp, #4]
 800a560:	9a02      	ldr	r2, [sp, #8]
 800a562:	9303      	str	r3, [sp, #12]
 800a564:	429a      	cmp	r2, r3
 800a566:	d80c      	bhi.n	800a582 <__multiply+0x9e>
 800a568:	2e00      	cmp	r6, #0
 800a56a:	dd03      	ble.n	800a574 <__multiply+0x90>
 800a56c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a570:	2b00      	cmp	r3, #0
 800a572:	d05b      	beq.n	800a62c <__multiply+0x148>
 800a574:	6106      	str	r6, [r0, #16]
 800a576:	b005      	add	sp, #20
 800a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57c:	f843 2b04 	str.w	r2, [r3], #4
 800a580:	e7d8      	b.n	800a534 <__multiply+0x50>
 800a582:	f8b3 a000 	ldrh.w	sl, [r3]
 800a586:	f1ba 0f00 	cmp.w	sl, #0
 800a58a:	d024      	beq.n	800a5d6 <__multiply+0xf2>
 800a58c:	f104 0e14 	add.w	lr, r4, #20
 800a590:	46a9      	mov	r9, r5
 800a592:	f04f 0c00 	mov.w	ip, #0
 800a596:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a59a:	f8d9 1000 	ldr.w	r1, [r9]
 800a59e:	fa1f fb82 	uxth.w	fp, r2
 800a5a2:	b289      	uxth	r1, r1
 800a5a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5ac:	f8d9 2000 	ldr.w	r2, [r9]
 800a5b0:	4461      	add	r1, ip
 800a5b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5be:	b289      	uxth	r1, r1
 800a5c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5c4:	4577      	cmp	r7, lr
 800a5c6:	f849 1b04 	str.w	r1, [r9], #4
 800a5ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5ce:	d8e2      	bhi.n	800a596 <__multiply+0xb2>
 800a5d0:	9a01      	ldr	r2, [sp, #4]
 800a5d2:	f845 c002 	str.w	ip, [r5, r2]
 800a5d6:	9a03      	ldr	r2, [sp, #12]
 800a5d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	f1b9 0f00 	cmp.w	r9, #0
 800a5e2:	d021      	beq.n	800a628 <__multiply+0x144>
 800a5e4:	6829      	ldr	r1, [r5, #0]
 800a5e6:	f104 0c14 	add.w	ip, r4, #20
 800a5ea:	46ae      	mov	lr, r5
 800a5ec:	f04f 0a00 	mov.w	sl, #0
 800a5f0:	f8bc b000 	ldrh.w	fp, [ip]
 800a5f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5f8:	fb09 220b 	mla	r2, r9, fp, r2
 800a5fc:	4452      	add	r2, sl
 800a5fe:	b289      	uxth	r1, r1
 800a600:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a604:	f84e 1b04 	str.w	r1, [lr], #4
 800a608:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a60c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a610:	f8be 1000 	ldrh.w	r1, [lr]
 800a614:	fb09 110a 	mla	r1, r9, sl, r1
 800a618:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a61c:	4567      	cmp	r7, ip
 800a61e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a622:	d8e5      	bhi.n	800a5f0 <__multiply+0x10c>
 800a624:	9a01      	ldr	r2, [sp, #4]
 800a626:	50a9      	str	r1, [r5, r2]
 800a628:	3504      	adds	r5, #4
 800a62a:	e799      	b.n	800a560 <__multiply+0x7c>
 800a62c:	3e01      	subs	r6, #1
 800a62e:	e79b      	b.n	800a568 <__multiply+0x84>
 800a630:	0800b258 	.word	0x0800b258
 800a634:	0800b269 	.word	0x0800b269

0800a638 <__pow5mult>:
 800a638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a63c:	4615      	mov	r5, r2
 800a63e:	f012 0203 	ands.w	r2, r2, #3
 800a642:	4606      	mov	r6, r0
 800a644:	460f      	mov	r7, r1
 800a646:	d007      	beq.n	800a658 <__pow5mult+0x20>
 800a648:	4c25      	ldr	r4, [pc, #148]	; (800a6e0 <__pow5mult+0xa8>)
 800a64a:	3a01      	subs	r2, #1
 800a64c:	2300      	movs	r3, #0
 800a64e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a652:	f7ff fe9d 	bl	800a390 <__multadd>
 800a656:	4607      	mov	r7, r0
 800a658:	10ad      	asrs	r5, r5, #2
 800a65a:	d03d      	beq.n	800a6d8 <__pow5mult+0xa0>
 800a65c:	69f4      	ldr	r4, [r6, #28]
 800a65e:	b97c      	cbnz	r4, 800a680 <__pow5mult+0x48>
 800a660:	2010      	movs	r0, #16
 800a662:	f7ff fd7f 	bl	800a164 <malloc>
 800a666:	4602      	mov	r2, r0
 800a668:	61f0      	str	r0, [r6, #28]
 800a66a:	b928      	cbnz	r0, 800a678 <__pow5mult+0x40>
 800a66c:	4b1d      	ldr	r3, [pc, #116]	; (800a6e4 <__pow5mult+0xac>)
 800a66e:	481e      	ldr	r0, [pc, #120]	; (800a6e8 <__pow5mult+0xb0>)
 800a670:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a674:	f000 fa72 	bl	800ab5c <__assert_func>
 800a678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a67c:	6004      	str	r4, [r0, #0]
 800a67e:	60c4      	str	r4, [r0, #12]
 800a680:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a688:	b94c      	cbnz	r4, 800a69e <__pow5mult+0x66>
 800a68a:	f240 2171 	movw	r1, #625	; 0x271
 800a68e:	4630      	mov	r0, r6
 800a690:	f7ff ff12 	bl	800a4b8 <__i2b>
 800a694:	2300      	movs	r3, #0
 800a696:	f8c8 0008 	str.w	r0, [r8, #8]
 800a69a:	4604      	mov	r4, r0
 800a69c:	6003      	str	r3, [r0, #0]
 800a69e:	f04f 0900 	mov.w	r9, #0
 800a6a2:	07eb      	lsls	r3, r5, #31
 800a6a4:	d50a      	bpl.n	800a6bc <__pow5mult+0x84>
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff ff1a 	bl	800a4e4 <__multiply>
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f7ff fe49 	bl	800a34c <_Bfree>
 800a6ba:	4647      	mov	r7, r8
 800a6bc:	106d      	asrs	r5, r5, #1
 800a6be:	d00b      	beq.n	800a6d8 <__pow5mult+0xa0>
 800a6c0:	6820      	ldr	r0, [r4, #0]
 800a6c2:	b938      	cbnz	r0, 800a6d4 <__pow5mult+0x9c>
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f7ff ff0b 	bl	800a4e4 <__multiply>
 800a6ce:	6020      	str	r0, [r4, #0]
 800a6d0:	f8c0 9000 	str.w	r9, [r0]
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	e7e4      	b.n	800a6a2 <__pow5mult+0x6a>
 800a6d8:	4638      	mov	r0, r7
 800a6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6de:	bf00      	nop
 800a6e0:	0800b3b8 	.word	0x0800b3b8
 800a6e4:	0800b1e9 	.word	0x0800b1e9
 800a6e8:	0800b269 	.word	0x0800b269

0800a6ec <__lshift>:
 800a6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	6849      	ldr	r1, [r1, #4]
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6fa:	68a3      	ldr	r3, [r4, #8]
 800a6fc:	4607      	mov	r7, r0
 800a6fe:	4691      	mov	r9, r2
 800a700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a704:	f108 0601 	add.w	r6, r8, #1
 800a708:	42b3      	cmp	r3, r6
 800a70a:	db0b      	blt.n	800a724 <__lshift+0x38>
 800a70c:	4638      	mov	r0, r7
 800a70e:	f7ff fddd 	bl	800a2cc <_Balloc>
 800a712:	4605      	mov	r5, r0
 800a714:	b948      	cbnz	r0, 800a72a <__lshift+0x3e>
 800a716:	4602      	mov	r2, r0
 800a718:	4b28      	ldr	r3, [pc, #160]	; (800a7bc <__lshift+0xd0>)
 800a71a:	4829      	ldr	r0, [pc, #164]	; (800a7c0 <__lshift+0xd4>)
 800a71c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a720:	f000 fa1c 	bl	800ab5c <__assert_func>
 800a724:	3101      	adds	r1, #1
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	e7ee      	b.n	800a708 <__lshift+0x1c>
 800a72a:	2300      	movs	r3, #0
 800a72c:	f100 0114 	add.w	r1, r0, #20
 800a730:	f100 0210 	add.w	r2, r0, #16
 800a734:	4618      	mov	r0, r3
 800a736:	4553      	cmp	r3, sl
 800a738:	db33      	blt.n	800a7a2 <__lshift+0xb6>
 800a73a:	6920      	ldr	r0, [r4, #16]
 800a73c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a740:	f104 0314 	add.w	r3, r4, #20
 800a744:	f019 091f 	ands.w	r9, r9, #31
 800a748:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a74c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a750:	d02b      	beq.n	800a7aa <__lshift+0xbe>
 800a752:	f1c9 0e20 	rsb	lr, r9, #32
 800a756:	468a      	mov	sl, r1
 800a758:	2200      	movs	r2, #0
 800a75a:	6818      	ldr	r0, [r3, #0]
 800a75c:	fa00 f009 	lsl.w	r0, r0, r9
 800a760:	4310      	orrs	r0, r2
 800a762:	f84a 0b04 	str.w	r0, [sl], #4
 800a766:	f853 2b04 	ldr.w	r2, [r3], #4
 800a76a:	459c      	cmp	ip, r3
 800a76c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a770:	d8f3      	bhi.n	800a75a <__lshift+0x6e>
 800a772:	ebac 0304 	sub.w	r3, ip, r4
 800a776:	3b15      	subs	r3, #21
 800a778:	f023 0303 	bic.w	r3, r3, #3
 800a77c:	3304      	adds	r3, #4
 800a77e:	f104 0015 	add.w	r0, r4, #21
 800a782:	4584      	cmp	ip, r0
 800a784:	bf38      	it	cc
 800a786:	2304      	movcc	r3, #4
 800a788:	50ca      	str	r2, [r1, r3]
 800a78a:	b10a      	cbz	r2, 800a790 <__lshift+0xa4>
 800a78c:	f108 0602 	add.w	r6, r8, #2
 800a790:	3e01      	subs	r6, #1
 800a792:	4638      	mov	r0, r7
 800a794:	612e      	str	r6, [r5, #16]
 800a796:	4621      	mov	r1, r4
 800a798:	f7ff fdd8 	bl	800a34c <_Bfree>
 800a79c:	4628      	mov	r0, r5
 800a79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	e7c5      	b.n	800a736 <__lshift+0x4a>
 800a7aa:	3904      	subs	r1, #4
 800a7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7b4:	459c      	cmp	ip, r3
 800a7b6:	d8f9      	bhi.n	800a7ac <__lshift+0xc0>
 800a7b8:	e7ea      	b.n	800a790 <__lshift+0xa4>
 800a7ba:	bf00      	nop
 800a7bc:	0800b258 	.word	0x0800b258
 800a7c0:	0800b269 	.word	0x0800b269

0800a7c4 <__mcmp>:
 800a7c4:	b530      	push	{r4, r5, lr}
 800a7c6:	6902      	ldr	r2, [r0, #16]
 800a7c8:	690c      	ldr	r4, [r1, #16]
 800a7ca:	1b12      	subs	r2, r2, r4
 800a7cc:	d10e      	bne.n	800a7ec <__mcmp+0x28>
 800a7ce:	f100 0314 	add.w	r3, r0, #20
 800a7d2:	3114      	adds	r1, #20
 800a7d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7e4:	42a5      	cmp	r5, r4
 800a7e6:	d003      	beq.n	800a7f0 <__mcmp+0x2c>
 800a7e8:	d305      	bcc.n	800a7f6 <__mcmp+0x32>
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	4610      	mov	r0, r2
 800a7ee:	bd30      	pop	{r4, r5, pc}
 800a7f0:	4283      	cmp	r3, r0
 800a7f2:	d3f3      	bcc.n	800a7dc <__mcmp+0x18>
 800a7f4:	e7fa      	b.n	800a7ec <__mcmp+0x28>
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7fa:	e7f7      	b.n	800a7ec <__mcmp+0x28>

0800a7fc <__mdiff>:
 800a7fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	460c      	mov	r4, r1
 800a802:	4606      	mov	r6, r0
 800a804:	4611      	mov	r1, r2
 800a806:	4620      	mov	r0, r4
 800a808:	4690      	mov	r8, r2
 800a80a:	f7ff ffdb 	bl	800a7c4 <__mcmp>
 800a80e:	1e05      	subs	r5, r0, #0
 800a810:	d110      	bne.n	800a834 <__mdiff+0x38>
 800a812:	4629      	mov	r1, r5
 800a814:	4630      	mov	r0, r6
 800a816:	f7ff fd59 	bl	800a2cc <_Balloc>
 800a81a:	b930      	cbnz	r0, 800a82a <__mdiff+0x2e>
 800a81c:	4b3a      	ldr	r3, [pc, #232]	; (800a908 <__mdiff+0x10c>)
 800a81e:	4602      	mov	r2, r0
 800a820:	f240 2137 	movw	r1, #567	; 0x237
 800a824:	4839      	ldr	r0, [pc, #228]	; (800a90c <__mdiff+0x110>)
 800a826:	f000 f999 	bl	800ab5c <__assert_func>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a834:	bfa4      	itt	ge
 800a836:	4643      	movge	r3, r8
 800a838:	46a0      	movge	r8, r4
 800a83a:	4630      	mov	r0, r6
 800a83c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a840:	bfa6      	itte	ge
 800a842:	461c      	movge	r4, r3
 800a844:	2500      	movge	r5, #0
 800a846:	2501      	movlt	r5, #1
 800a848:	f7ff fd40 	bl	800a2cc <_Balloc>
 800a84c:	b920      	cbnz	r0, 800a858 <__mdiff+0x5c>
 800a84e:	4b2e      	ldr	r3, [pc, #184]	; (800a908 <__mdiff+0x10c>)
 800a850:	4602      	mov	r2, r0
 800a852:	f240 2145 	movw	r1, #581	; 0x245
 800a856:	e7e5      	b.n	800a824 <__mdiff+0x28>
 800a858:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a85c:	6926      	ldr	r6, [r4, #16]
 800a85e:	60c5      	str	r5, [r0, #12]
 800a860:	f104 0914 	add.w	r9, r4, #20
 800a864:	f108 0514 	add.w	r5, r8, #20
 800a868:	f100 0e14 	add.w	lr, r0, #20
 800a86c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a870:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a874:	f108 0210 	add.w	r2, r8, #16
 800a878:	46f2      	mov	sl, lr
 800a87a:	2100      	movs	r1, #0
 800a87c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a884:	fa11 f88b 	uxtah	r8, r1, fp
 800a888:	b299      	uxth	r1, r3
 800a88a:	0c1b      	lsrs	r3, r3, #16
 800a88c:	eba8 0801 	sub.w	r8, r8, r1
 800a890:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a894:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a898:	fa1f f888 	uxth.w	r8, r8
 800a89c:	1419      	asrs	r1, r3, #16
 800a89e:	454e      	cmp	r6, r9
 800a8a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8a4:	f84a 3b04 	str.w	r3, [sl], #4
 800a8a8:	d8e8      	bhi.n	800a87c <__mdiff+0x80>
 800a8aa:	1b33      	subs	r3, r6, r4
 800a8ac:	3b15      	subs	r3, #21
 800a8ae:	f023 0303 	bic.w	r3, r3, #3
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	3415      	adds	r4, #21
 800a8b6:	42a6      	cmp	r6, r4
 800a8b8:	bf38      	it	cc
 800a8ba:	2304      	movcc	r3, #4
 800a8bc:	441d      	add	r5, r3
 800a8be:	4473      	add	r3, lr
 800a8c0:	469e      	mov	lr, r3
 800a8c2:	462e      	mov	r6, r5
 800a8c4:	4566      	cmp	r6, ip
 800a8c6:	d30e      	bcc.n	800a8e6 <__mdiff+0xea>
 800a8c8:	f10c 0203 	add.w	r2, ip, #3
 800a8cc:	1b52      	subs	r2, r2, r5
 800a8ce:	f022 0203 	bic.w	r2, r2, #3
 800a8d2:	3d03      	subs	r5, #3
 800a8d4:	45ac      	cmp	ip, r5
 800a8d6:	bf38      	it	cc
 800a8d8:	2200      	movcc	r2, #0
 800a8da:	4413      	add	r3, r2
 800a8dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8e0:	b17a      	cbz	r2, 800a902 <__mdiff+0x106>
 800a8e2:	6107      	str	r7, [r0, #16]
 800a8e4:	e7a4      	b.n	800a830 <__mdiff+0x34>
 800a8e6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a8ea:	fa11 f288 	uxtah	r2, r1, r8
 800a8ee:	1414      	asrs	r4, r2, #16
 800a8f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8f4:	b292      	uxth	r2, r2
 800a8f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a8fa:	f84e 2b04 	str.w	r2, [lr], #4
 800a8fe:	1421      	asrs	r1, r4, #16
 800a900:	e7e0      	b.n	800a8c4 <__mdiff+0xc8>
 800a902:	3f01      	subs	r7, #1
 800a904:	e7ea      	b.n	800a8dc <__mdiff+0xe0>
 800a906:	bf00      	nop
 800a908:	0800b258 	.word	0x0800b258
 800a90c:	0800b269 	.word	0x0800b269

0800a910 <__d2b>:
 800a910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a914:	460f      	mov	r7, r1
 800a916:	2101      	movs	r1, #1
 800a918:	ec59 8b10 	vmov	r8, r9, d0
 800a91c:	4616      	mov	r6, r2
 800a91e:	f7ff fcd5 	bl	800a2cc <_Balloc>
 800a922:	4604      	mov	r4, r0
 800a924:	b930      	cbnz	r0, 800a934 <__d2b+0x24>
 800a926:	4602      	mov	r2, r0
 800a928:	4b24      	ldr	r3, [pc, #144]	; (800a9bc <__d2b+0xac>)
 800a92a:	4825      	ldr	r0, [pc, #148]	; (800a9c0 <__d2b+0xb0>)
 800a92c:	f240 310f 	movw	r1, #783	; 0x30f
 800a930:	f000 f914 	bl	800ab5c <__assert_func>
 800a934:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a93c:	bb2d      	cbnz	r5, 800a98a <__d2b+0x7a>
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	f1b8 0300 	subs.w	r3, r8, #0
 800a944:	d026      	beq.n	800a994 <__d2b+0x84>
 800a946:	4668      	mov	r0, sp
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	f7ff fd87 	bl	800a45c <__lo0bits>
 800a94e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a952:	b1e8      	cbz	r0, 800a990 <__d2b+0x80>
 800a954:	f1c0 0320 	rsb	r3, r0, #32
 800a958:	fa02 f303 	lsl.w	r3, r2, r3
 800a95c:	430b      	orrs	r3, r1
 800a95e:	40c2      	lsrs	r2, r0
 800a960:	6163      	str	r3, [r4, #20]
 800a962:	9201      	str	r2, [sp, #4]
 800a964:	9b01      	ldr	r3, [sp, #4]
 800a966:	61a3      	str	r3, [r4, #24]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	bf14      	ite	ne
 800a96c:	2202      	movne	r2, #2
 800a96e:	2201      	moveq	r2, #1
 800a970:	6122      	str	r2, [r4, #16]
 800a972:	b1bd      	cbz	r5, 800a9a4 <__d2b+0x94>
 800a974:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a978:	4405      	add	r5, r0
 800a97a:	603d      	str	r5, [r7, #0]
 800a97c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a980:	6030      	str	r0, [r6, #0]
 800a982:	4620      	mov	r0, r4
 800a984:	b003      	add	sp, #12
 800a986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a98a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a98e:	e7d6      	b.n	800a93e <__d2b+0x2e>
 800a990:	6161      	str	r1, [r4, #20]
 800a992:	e7e7      	b.n	800a964 <__d2b+0x54>
 800a994:	a801      	add	r0, sp, #4
 800a996:	f7ff fd61 	bl	800a45c <__lo0bits>
 800a99a:	9b01      	ldr	r3, [sp, #4]
 800a99c:	6163      	str	r3, [r4, #20]
 800a99e:	3020      	adds	r0, #32
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	e7e5      	b.n	800a970 <__d2b+0x60>
 800a9a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9ac:	6038      	str	r0, [r7, #0]
 800a9ae:	6918      	ldr	r0, [r3, #16]
 800a9b0:	f7ff fd34 	bl	800a41c <__hi0bits>
 800a9b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9b8:	e7e2      	b.n	800a980 <__d2b+0x70>
 800a9ba:	bf00      	nop
 800a9bc:	0800b258 	.word	0x0800b258
 800a9c0:	0800b269 	.word	0x0800b269

0800a9c4 <__sflush_r>:
 800a9c4:	898a      	ldrh	r2, [r1, #12]
 800a9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	0710      	lsls	r0, r2, #28
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	d458      	bmi.n	800aa84 <__sflush_r+0xc0>
 800a9d2:	684b      	ldr	r3, [r1, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	dc05      	bgt.n	800a9e4 <__sflush_r+0x20>
 800a9d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	dc02      	bgt.n	800a9e4 <__sflush_r+0x20>
 800a9de:	2000      	movs	r0, #0
 800a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9e6:	2e00      	cmp	r6, #0
 800a9e8:	d0f9      	beq.n	800a9de <__sflush_r+0x1a>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9f0:	682f      	ldr	r7, [r5, #0]
 800a9f2:	6a21      	ldr	r1, [r4, #32]
 800a9f4:	602b      	str	r3, [r5, #0]
 800a9f6:	d032      	beq.n	800aa5e <__sflush_r+0x9a>
 800a9f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	075a      	lsls	r2, r3, #29
 800a9fe:	d505      	bpl.n	800aa0c <__sflush_r+0x48>
 800aa00:	6863      	ldr	r3, [r4, #4]
 800aa02:	1ac0      	subs	r0, r0, r3
 800aa04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa06:	b10b      	cbz	r3, 800aa0c <__sflush_r+0x48>
 800aa08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa0a:	1ac0      	subs	r0, r0, r3
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4602      	mov	r2, r0
 800aa10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa12:	6a21      	ldr	r1, [r4, #32]
 800aa14:	4628      	mov	r0, r5
 800aa16:	47b0      	blx	r6
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	d106      	bne.n	800aa2c <__sflush_r+0x68>
 800aa1e:	6829      	ldr	r1, [r5, #0]
 800aa20:	291d      	cmp	r1, #29
 800aa22:	d82b      	bhi.n	800aa7c <__sflush_r+0xb8>
 800aa24:	4a29      	ldr	r2, [pc, #164]	; (800aacc <__sflush_r+0x108>)
 800aa26:	410a      	asrs	r2, r1
 800aa28:	07d6      	lsls	r6, r2, #31
 800aa2a:	d427      	bmi.n	800aa7c <__sflush_r+0xb8>
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	6062      	str	r2, [r4, #4]
 800aa30:	04d9      	lsls	r1, r3, #19
 800aa32:	6922      	ldr	r2, [r4, #16]
 800aa34:	6022      	str	r2, [r4, #0]
 800aa36:	d504      	bpl.n	800aa42 <__sflush_r+0x7e>
 800aa38:	1c42      	adds	r2, r0, #1
 800aa3a:	d101      	bne.n	800aa40 <__sflush_r+0x7c>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	b903      	cbnz	r3, 800aa42 <__sflush_r+0x7e>
 800aa40:	6560      	str	r0, [r4, #84]	; 0x54
 800aa42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa44:	602f      	str	r7, [r5, #0]
 800aa46:	2900      	cmp	r1, #0
 800aa48:	d0c9      	beq.n	800a9de <__sflush_r+0x1a>
 800aa4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa4e:	4299      	cmp	r1, r3
 800aa50:	d002      	beq.n	800aa58 <__sflush_r+0x94>
 800aa52:	4628      	mov	r0, r5
 800aa54:	f7ff fb3a 	bl	800a0cc <_free_r>
 800aa58:	2000      	movs	r0, #0
 800aa5a:	6360      	str	r0, [r4, #52]	; 0x34
 800aa5c:	e7c0      	b.n	800a9e0 <__sflush_r+0x1c>
 800aa5e:	2301      	movs	r3, #1
 800aa60:	4628      	mov	r0, r5
 800aa62:	47b0      	blx	r6
 800aa64:	1c41      	adds	r1, r0, #1
 800aa66:	d1c8      	bne.n	800a9fa <__sflush_r+0x36>
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d0c5      	beq.n	800a9fa <__sflush_r+0x36>
 800aa6e:	2b1d      	cmp	r3, #29
 800aa70:	d001      	beq.n	800aa76 <__sflush_r+0xb2>
 800aa72:	2b16      	cmp	r3, #22
 800aa74:	d101      	bne.n	800aa7a <__sflush_r+0xb6>
 800aa76:	602f      	str	r7, [r5, #0]
 800aa78:	e7b1      	b.n	800a9de <__sflush_r+0x1a>
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa80:	81a3      	strh	r3, [r4, #12]
 800aa82:	e7ad      	b.n	800a9e0 <__sflush_r+0x1c>
 800aa84:	690f      	ldr	r7, [r1, #16]
 800aa86:	2f00      	cmp	r7, #0
 800aa88:	d0a9      	beq.n	800a9de <__sflush_r+0x1a>
 800aa8a:	0793      	lsls	r3, r2, #30
 800aa8c:	680e      	ldr	r6, [r1, #0]
 800aa8e:	bf08      	it	eq
 800aa90:	694b      	ldreq	r3, [r1, #20]
 800aa92:	600f      	str	r7, [r1, #0]
 800aa94:	bf18      	it	ne
 800aa96:	2300      	movne	r3, #0
 800aa98:	eba6 0807 	sub.w	r8, r6, r7
 800aa9c:	608b      	str	r3, [r1, #8]
 800aa9e:	f1b8 0f00 	cmp.w	r8, #0
 800aaa2:	dd9c      	ble.n	800a9de <__sflush_r+0x1a>
 800aaa4:	6a21      	ldr	r1, [r4, #32]
 800aaa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aaa8:	4643      	mov	r3, r8
 800aaaa:	463a      	mov	r2, r7
 800aaac:	4628      	mov	r0, r5
 800aaae:	47b0      	blx	r6
 800aab0:	2800      	cmp	r0, #0
 800aab2:	dc06      	bgt.n	800aac2 <__sflush_r+0xfe>
 800aab4:	89a3      	ldrh	r3, [r4, #12]
 800aab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaba:	81a3      	strh	r3, [r4, #12]
 800aabc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aac0:	e78e      	b.n	800a9e0 <__sflush_r+0x1c>
 800aac2:	4407      	add	r7, r0
 800aac4:	eba8 0800 	sub.w	r8, r8, r0
 800aac8:	e7e9      	b.n	800aa9e <__sflush_r+0xda>
 800aaca:	bf00      	nop
 800aacc:	dfbffffe 	.word	0xdfbffffe

0800aad0 <_fflush_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	690b      	ldr	r3, [r1, #16]
 800aad4:	4605      	mov	r5, r0
 800aad6:	460c      	mov	r4, r1
 800aad8:	b913      	cbnz	r3, 800aae0 <_fflush_r+0x10>
 800aada:	2500      	movs	r5, #0
 800aadc:	4628      	mov	r0, r5
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	b118      	cbz	r0, 800aaea <_fflush_r+0x1a>
 800aae2:	6a03      	ldr	r3, [r0, #32]
 800aae4:	b90b      	cbnz	r3, 800aaea <_fflush_r+0x1a>
 800aae6:	f7fe fb7b 	bl	80091e0 <__sinit>
 800aaea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0f3      	beq.n	800aada <_fflush_r+0xa>
 800aaf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aaf4:	07d0      	lsls	r0, r2, #31
 800aaf6:	d404      	bmi.n	800ab02 <_fflush_r+0x32>
 800aaf8:	0599      	lsls	r1, r3, #22
 800aafa:	d402      	bmi.n	800ab02 <_fflush_r+0x32>
 800aafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aafe:	f7fe fc66 	bl	80093ce <__retarget_lock_acquire_recursive>
 800ab02:	4628      	mov	r0, r5
 800ab04:	4621      	mov	r1, r4
 800ab06:	f7ff ff5d 	bl	800a9c4 <__sflush_r>
 800ab0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab0c:	07da      	lsls	r2, r3, #31
 800ab0e:	4605      	mov	r5, r0
 800ab10:	d4e4      	bmi.n	800aadc <_fflush_r+0xc>
 800ab12:	89a3      	ldrh	r3, [r4, #12]
 800ab14:	059b      	lsls	r3, r3, #22
 800ab16:	d4e1      	bmi.n	800aadc <_fflush_r+0xc>
 800ab18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab1a:	f7fe fc59 	bl	80093d0 <__retarget_lock_release_recursive>
 800ab1e:	e7dd      	b.n	800aadc <_fflush_r+0xc>

0800ab20 <_sbrk_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4d06      	ldr	r5, [pc, #24]	; (800ab3c <_sbrk_r+0x1c>)
 800ab24:	2300      	movs	r3, #0
 800ab26:	4604      	mov	r4, r0
 800ab28:	4608      	mov	r0, r1
 800ab2a:	602b      	str	r3, [r5, #0]
 800ab2c:	f7f7 fac6 	bl	80020bc <_sbrk>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_sbrk_r+0x1a>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_sbrk_r+0x1a>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	200107b0 	.word	0x200107b0

0800ab40 <memcpy>:
 800ab40:	440a      	add	r2, r1
 800ab42:	4291      	cmp	r1, r2
 800ab44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab48:	d100      	bne.n	800ab4c <memcpy+0xc>
 800ab4a:	4770      	bx	lr
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab56:	4291      	cmp	r1, r2
 800ab58:	d1f9      	bne.n	800ab4e <memcpy+0xe>
 800ab5a:	bd10      	pop	{r4, pc}

0800ab5c <__assert_func>:
 800ab5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab5e:	4614      	mov	r4, r2
 800ab60:	461a      	mov	r2, r3
 800ab62:	4b09      	ldr	r3, [pc, #36]	; (800ab88 <__assert_func+0x2c>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4605      	mov	r5, r0
 800ab68:	68d8      	ldr	r0, [r3, #12]
 800ab6a:	b14c      	cbz	r4, 800ab80 <__assert_func+0x24>
 800ab6c:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <__assert_func+0x30>)
 800ab6e:	9100      	str	r1, [sp, #0]
 800ab70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab74:	4906      	ldr	r1, [pc, #24]	; (800ab90 <__assert_func+0x34>)
 800ab76:	462b      	mov	r3, r5
 800ab78:	f000 f844 	bl	800ac04 <fiprintf>
 800ab7c:	f000 f854 	bl	800ac28 <abort>
 800ab80:	4b04      	ldr	r3, [pc, #16]	; (800ab94 <__assert_func+0x38>)
 800ab82:	461c      	mov	r4, r3
 800ab84:	e7f3      	b.n	800ab6e <__assert_func+0x12>
 800ab86:	bf00      	nop
 800ab88:	20000100 	.word	0x20000100
 800ab8c:	0800b3ce 	.word	0x0800b3ce
 800ab90:	0800b3db 	.word	0x0800b3db
 800ab94:	0800b409 	.word	0x0800b409

0800ab98 <_calloc_r>:
 800ab98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab9a:	fba1 2402 	umull	r2, r4, r1, r2
 800ab9e:	b94c      	cbnz	r4, 800abb4 <_calloc_r+0x1c>
 800aba0:	4611      	mov	r1, r2
 800aba2:	9201      	str	r2, [sp, #4]
 800aba4:	f7ff fb06 	bl	800a1b4 <_malloc_r>
 800aba8:	9a01      	ldr	r2, [sp, #4]
 800abaa:	4605      	mov	r5, r0
 800abac:	b930      	cbnz	r0, 800abbc <_calloc_r+0x24>
 800abae:	4628      	mov	r0, r5
 800abb0:	b003      	add	sp, #12
 800abb2:	bd30      	pop	{r4, r5, pc}
 800abb4:	220c      	movs	r2, #12
 800abb6:	6002      	str	r2, [r0, #0]
 800abb8:	2500      	movs	r5, #0
 800abba:	e7f8      	b.n	800abae <_calloc_r+0x16>
 800abbc:	4621      	mov	r1, r4
 800abbe:	f7fe fb88 	bl	80092d2 <memset>
 800abc2:	e7f4      	b.n	800abae <_calloc_r+0x16>

0800abc4 <__ascii_mbtowc>:
 800abc4:	b082      	sub	sp, #8
 800abc6:	b901      	cbnz	r1, 800abca <__ascii_mbtowc+0x6>
 800abc8:	a901      	add	r1, sp, #4
 800abca:	b142      	cbz	r2, 800abde <__ascii_mbtowc+0x1a>
 800abcc:	b14b      	cbz	r3, 800abe2 <__ascii_mbtowc+0x1e>
 800abce:	7813      	ldrb	r3, [r2, #0]
 800abd0:	600b      	str	r3, [r1, #0]
 800abd2:	7812      	ldrb	r2, [r2, #0]
 800abd4:	1e10      	subs	r0, r2, #0
 800abd6:	bf18      	it	ne
 800abd8:	2001      	movne	r0, #1
 800abda:	b002      	add	sp, #8
 800abdc:	4770      	bx	lr
 800abde:	4610      	mov	r0, r2
 800abe0:	e7fb      	b.n	800abda <__ascii_mbtowc+0x16>
 800abe2:	f06f 0001 	mvn.w	r0, #1
 800abe6:	e7f8      	b.n	800abda <__ascii_mbtowc+0x16>

0800abe8 <__ascii_wctomb>:
 800abe8:	b149      	cbz	r1, 800abfe <__ascii_wctomb+0x16>
 800abea:	2aff      	cmp	r2, #255	; 0xff
 800abec:	bf85      	ittet	hi
 800abee:	238a      	movhi	r3, #138	; 0x8a
 800abf0:	6003      	strhi	r3, [r0, #0]
 800abf2:	700a      	strbls	r2, [r1, #0]
 800abf4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800abf8:	bf98      	it	ls
 800abfa:	2001      	movls	r0, #1
 800abfc:	4770      	bx	lr
 800abfe:	4608      	mov	r0, r1
 800ac00:	4770      	bx	lr
	...

0800ac04 <fiprintf>:
 800ac04:	b40e      	push	{r1, r2, r3}
 800ac06:	b503      	push	{r0, r1, lr}
 800ac08:	4601      	mov	r1, r0
 800ac0a:	ab03      	add	r3, sp, #12
 800ac0c:	4805      	ldr	r0, [pc, #20]	; (800ac24 <fiprintf+0x20>)
 800ac0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac12:	6800      	ldr	r0, [r0, #0]
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	f000 f837 	bl	800ac88 <_vfiprintf_r>
 800ac1a:	b002      	add	sp, #8
 800ac1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac20:	b003      	add	sp, #12
 800ac22:	4770      	bx	lr
 800ac24:	20000100 	.word	0x20000100

0800ac28 <abort>:
 800ac28:	b508      	push	{r3, lr}
 800ac2a:	2006      	movs	r0, #6
 800ac2c:	f000 fa04 	bl	800b038 <raise>
 800ac30:	2001      	movs	r0, #1
 800ac32:	f7f7 f9cb 	bl	8001fcc <_exit>

0800ac36 <__sfputc_r>:
 800ac36:	6893      	ldr	r3, [r2, #8]
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	b410      	push	{r4}
 800ac3e:	6093      	str	r3, [r2, #8]
 800ac40:	da08      	bge.n	800ac54 <__sfputc_r+0x1e>
 800ac42:	6994      	ldr	r4, [r2, #24]
 800ac44:	42a3      	cmp	r3, r4
 800ac46:	db01      	blt.n	800ac4c <__sfputc_r+0x16>
 800ac48:	290a      	cmp	r1, #10
 800ac4a:	d103      	bne.n	800ac54 <__sfputc_r+0x1e>
 800ac4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac50:	f000 b934 	b.w	800aebc <__swbuf_r>
 800ac54:	6813      	ldr	r3, [r2, #0]
 800ac56:	1c58      	adds	r0, r3, #1
 800ac58:	6010      	str	r0, [r2, #0]
 800ac5a:	7019      	strb	r1, [r3, #0]
 800ac5c:	4608      	mov	r0, r1
 800ac5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <__sfputs_r>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	4606      	mov	r6, r0
 800ac68:	460f      	mov	r7, r1
 800ac6a:	4614      	mov	r4, r2
 800ac6c:	18d5      	adds	r5, r2, r3
 800ac6e:	42ac      	cmp	r4, r5
 800ac70:	d101      	bne.n	800ac76 <__sfputs_r+0x12>
 800ac72:	2000      	movs	r0, #0
 800ac74:	e007      	b.n	800ac86 <__sfputs_r+0x22>
 800ac76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7a:	463a      	mov	r2, r7
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff ffda 	bl	800ac36 <__sfputc_r>
 800ac82:	1c43      	adds	r3, r0, #1
 800ac84:	d1f3      	bne.n	800ac6e <__sfputs_r+0xa>
 800ac86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac88 <_vfiprintf_r>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	460d      	mov	r5, r1
 800ac8e:	b09d      	sub	sp, #116	; 0x74
 800ac90:	4614      	mov	r4, r2
 800ac92:	4698      	mov	r8, r3
 800ac94:	4606      	mov	r6, r0
 800ac96:	b118      	cbz	r0, 800aca0 <_vfiprintf_r+0x18>
 800ac98:	6a03      	ldr	r3, [r0, #32]
 800ac9a:	b90b      	cbnz	r3, 800aca0 <_vfiprintf_r+0x18>
 800ac9c:	f7fe faa0 	bl	80091e0 <__sinit>
 800aca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aca2:	07d9      	lsls	r1, r3, #31
 800aca4:	d405      	bmi.n	800acb2 <_vfiprintf_r+0x2a>
 800aca6:	89ab      	ldrh	r3, [r5, #12]
 800aca8:	059a      	lsls	r2, r3, #22
 800acaa:	d402      	bmi.n	800acb2 <_vfiprintf_r+0x2a>
 800acac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acae:	f7fe fb8e 	bl	80093ce <__retarget_lock_acquire_recursive>
 800acb2:	89ab      	ldrh	r3, [r5, #12]
 800acb4:	071b      	lsls	r3, r3, #28
 800acb6:	d501      	bpl.n	800acbc <_vfiprintf_r+0x34>
 800acb8:	692b      	ldr	r3, [r5, #16]
 800acba:	b99b      	cbnz	r3, 800ace4 <_vfiprintf_r+0x5c>
 800acbc:	4629      	mov	r1, r5
 800acbe:	4630      	mov	r0, r6
 800acc0:	f000 f93a 	bl	800af38 <__swsetup_r>
 800acc4:	b170      	cbz	r0, 800ace4 <_vfiprintf_r+0x5c>
 800acc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acc8:	07dc      	lsls	r4, r3, #31
 800acca:	d504      	bpl.n	800acd6 <_vfiprintf_r+0x4e>
 800accc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acd0:	b01d      	add	sp, #116	; 0x74
 800acd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd6:	89ab      	ldrh	r3, [r5, #12]
 800acd8:	0598      	lsls	r0, r3, #22
 800acda:	d4f7      	bmi.n	800accc <_vfiprintf_r+0x44>
 800acdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acde:	f7fe fb77 	bl	80093d0 <__retarget_lock_release_recursive>
 800ace2:	e7f3      	b.n	800accc <_vfiprintf_r+0x44>
 800ace4:	2300      	movs	r3, #0
 800ace6:	9309      	str	r3, [sp, #36]	; 0x24
 800ace8:	2320      	movs	r3, #32
 800acea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acee:	f8cd 800c 	str.w	r8, [sp, #12]
 800acf2:	2330      	movs	r3, #48	; 0x30
 800acf4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aea8 <_vfiprintf_r+0x220>
 800acf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acfc:	f04f 0901 	mov.w	r9, #1
 800ad00:	4623      	mov	r3, r4
 800ad02:	469a      	mov	sl, r3
 800ad04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad08:	b10a      	cbz	r2, 800ad0e <_vfiprintf_r+0x86>
 800ad0a:	2a25      	cmp	r2, #37	; 0x25
 800ad0c:	d1f9      	bne.n	800ad02 <_vfiprintf_r+0x7a>
 800ad0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad12:	d00b      	beq.n	800ad2c <_vfiprintf_r+0xa4>
 800ad14:	465b      	mov	r3, fp
 800ad16:	4622      	mov	r2, r4
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7ff ffa2 	bl	800ac64 <__sfputs_r>
 800ad20:	3001      	adds	r0, #1
 800ad22:	f000 80a9 	beq.w	800ae78 <_vfiprintf_r+0x1f0>
 800ad26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad28:	445a      	add	r2, fp
 800ad2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 80a1 	beq.w	800ae78 <_vfiprintf_r+0x1f0>
 800ad36:	2300      	movs	r3, #0
 800ad38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad40:	f10a 0a01 	add.w	sl, sl, #1
 800ad44:	9304      	str	r3, [sp, #16]
 800ad46:	9307      	str	r3, [sp, #28]
 800ad48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad4c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad4e:	4654      	mov	r4, sl
 800ad50:	2205      	movs	r2, #5
 800ad52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad56:	4854      	ldr	r0, [pc, #336]	; (800aea8 <_vfiprintf_r+0x220>)
 800ad58:	f7f5 fa42 	bl	80001e0 <memchr>
 800ad5c:	9a04      	ldr	r2, [sp, #16]
 800ad5e:	b9d8      	cbnz	r0, 800ad98 <_vfiprintf_r+0x110>
 800ad60:	06d1      	lsls	r1, r2, #27
 800ad62:	bf44      	itt	mi
 800ad64:	2320      	movmi	r3, #32
 800ad66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad6a:	0713      	lsls	r3, r2, #28
 800ad6c:	bf44      	itt	mi
 800ad6e:	232b      	movmi	r3, #43	; 0x2b
 800ad70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad74:	f89a 3000 	ldrb.w	r3, [sl]
 800ad78:	2b2a      	cmp	r3, #42	; 0x2a
 800ad7a:	d015      	beq.n	800ada8 <_vfiprintf_r+0x120>
 800ad7c:	9a07      	ldr	r2, [sp, #28]
 800ad7e:	4654      	mov	r4, sl
 800ad80:	2000      	movs	r0, #0
 800ad82:	f04f 0c0a 	mov.w	ip, #10
 800ad86:	4621      	mov	r1, r4
 800ad88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad8c:	3b30      	subs	r3, #48	; 0x30
 800ad8e:	2b09      	cmp	r3, #9
 800ad90:	d94d      	bls.n	800ae2e <_vfiprintf_r+0x1a6>
 800ad92:	b1b0      	cbz	r0, 800adc2 <_vfiprintf_r+0x13a>
 800ad94:	9207      	str	r2, [sp, #28]
 800ad96:	e014      	b.n	800adc2 <_vfiprintf_r+0x13a>
 800ad98:	eba0 0308 	sub.w	r3, r0, r8
 800ad9c:	fa09 f303 	lsl.w	r3, r9, r3
 800ada0:	4313      	orrs	r3, r2
 800ada2:	9304      	str	r3, [sp, #16]
 800ada4:	46a2      	mov	sl, r4
 800ada6:	e7d2      	b.n	800ad4e <_vfiprintf_r+0xc6>
 800ada8:	9b03      	ldr	r3, [sp, #12]
 800adaa:	1d19      	adds	r1, r3, #4
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	9103      	str	r1, [sp, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	bfbb      	ittet	lt
 800adb4:	425b      	neglt	r3, r3
 800adb6:	f042 0202 	orrlt.w	r2, r2, #2
 800adba:	9307      	strge	r3, [sp, #28]
 800adbc:	9307      	strlt	r3, [sp, #28]
 800adbe:	bfb8      	it	lt
 800adc0:	9204      	strlt	r2, [sp, #16]
 800adc2:	7823      	ldrb	r3, [r4, #0]
 800adc4:	2b2e      	cmp	r3, #46	; 0x2e
 800adc6:	d10c      	bne.n	800ade2 <_vfiprintf_r+0x15a>
 800adc8:	7863      	ldrb	r3, [r4, #1]
 800adca:	2b2a      	cmp	r3, #42	; 0x2a
 800adcc:	d134      	bne.n	800ae38 <_vfiprintf_r+0x1b0>
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	1d1a      	adds	r2, r3, #4
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	9203      	str	r2, [sp, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	bfb8      	it	lt
 800adda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800adde:	3402      	adds	r4, #2
 800ade0:	9305      	str	r3, [sp, #20]
 800ade2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aeb8 <_vfiprintf_r+0x230>
 800ade6:	7821      	ldrb	r1, [r4, #0]
 800ade8:	2203      	movs	r2, #3
 800adea:	4650      	mov	r0, sl
 800adec:	f7f5 f9f8 	bl	80001e0 <memchr>
 800adf0:	b138      	cbz	r0, 800ae02 <_vfiprintf_r+0x17a>
 800adf2:	9b04      	ldr	r3, [sp, #16]
 800adf4:	eba0 000a 	sub.w	r0, r0, sl
 800adf8:	2240      	movs	r2, #64	; 0x40
 800adfa:	4082      	lsls	r2, r0
 800adfc:	4313      	orrs	r3, r2
 800adfe:	3401      	adds	r4, #1
 800ae00:	9304      	str	r3, [sp, #16]
 800ae02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae06:	4829      	ldr	r0, [pc, #164]	; (800aeac <_vfiprintf_r+0x224>)
 800ae08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae0c:	2206      	movs	r2, #6
 800ae0e:	f7f5 f9e7 	bl	80001e0 <memchr>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d03f      	beq.n	800ae96 <_vfiprintf_r+0x20e>
 800ae16:	4b26      	ldr	r3, [pc, #152]	; (800aeb0 <_vfiprintf_r+0x228>)
 800ae18:	bb1b      	cbnz	r3, 800ae62 <_vfiprintf_r+0x1da>
 800ae1a:	9b03      	ldr	r3, [sp, #12]
 800ae1c:	3307      	adds	r3, #7
 800ae1e:	f023 0307 	bic.w	r3, r3, #7
 800ae22:	3308      	adds	r3, #8
 800ae24:	9303      	str	r3, [sp, #12]
 800ae26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae28:	443b      	add	r3, r7
 800ae2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae2c:	e768      	b.n	800ad00 <_vfiprintf_r+0x78>
 800ae2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae32:	460c      	mov	r4, r1
 800ae34:	2001      	movs	r0, #1
 800ae36:	e7a6      	b.n	800ad86 <_vfiprintf_r+0xfe>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	3401      	adds	r4, #1
 800ae3c:	9305      	str	r3, [sp, #20]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	f04f 0c0a 	mov.w	ip, #10
 800ae44:	4620      	mov	r0, r4
 800ae46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae4a:	3a30      	subs	r2, #48	; 0x30
 800ae4c:	2a09      	cmp	r2, #9
 800ae4e:	d903      	bls.n	800ae58 <_vfiprintf_r+0x1d0>
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d0c6      	beq.n	800ade2 <_vfiprintf_r+0x15a>
 800ae54:	9105      	str	r1, [sp, #20]
 800ae56:	e7c4      	b.n	800ade2 <_vfiprintf_r+0x15a>
 800ae58:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e7f0      	b.n	800ae44 <_vfiprintf_r+0x1bc>
 800ae62:	ab03      	add	r3, sp, #12
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	462a      	mov	r2, r5
 800ae68:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <_vfiprintf_r+0x22c>)
 800ae6a:	a904      	add	r1, sp, #16
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f7fd fd65 	bl	800893c <_printf_float>
 800ae72:	4607      	mov	r7, r0
 800ae74:	1c78      	adds	r0, r7, #1
 800ae76:	d1d6      	bne.n	800ae26 <_vfiprintf_r+0x19e>
 800ae78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae7a:	07d9      	lsls	r1, r3, #31
 800ae7c:	d405      	bmi.n	800ae8a <_vfiprintf_r+0x202>
 800ae7e:	89ab      	ldrh	r3, [r5, #12]
 800ae80:	059a      	lsls	r2, r3, #22
 800ae82:	d402      	bmi.n	800ae8a <_vfiprintf_r+0x202>
 800ae84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae86:	f7fe faa3 	bl	80093d0 <__retarget_lock_release_recursive>
 800ae8a:	89ab      	ldrh	r3, [r5, #12]
 800ae8c:	065b      	lsls	r3, r3, #25
 800ae8e:	f53f af1d 	bmi.w	800accc <_vfiprintf_r+0x44>
 800ae92:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae94:	e71c      	b.n	800acd0 <_vfiprintf_r+0x48>
 800ae96:	ab03      	add	r3, sp, #12
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	462a      	mov	r2, r5
 800ae9c:	4b05      	ldr	r3, [pc, #20]	; (800aeb4 <_vfiprintf_r+0x22c>)
 800ae9e:	a904      	add	r1, sp, #16
 800aea0:	4630      	mov	r0, r6
 800aea2:	f7fd ffef 	bl	8008e84 <_printf_i>
 800aea6:	e7e4      	b.n	800ae72 <_vfiprintf_r+0x1ea>
 800aea8:	0800b50b 	.word	0x0800b50b
 800aeac:	0800b515 	.word	0x0800b515
 800aeb0:	0800893d 	.word	0x0800893d
 800aeb4:	0800ac65 	.word	0x0800ac65
 800aeb8:	0800b511 	.word	0x0800b511

0800aebc <__swbuf_r>:
 800aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aebe:	460e      	mov	r6, r1
 800aec0:	4614      	mov	r4, r2
 800aec2:	4605      	mov	r5, r0
 800aec4:	b118      	cbz	r0, 800aece <__swbuf_r+0x12>
 800aec6:	6a03      	ldr	r3, [r0, #32]
 800aec8:	b90b      	cbnz	r3, 800aece <__swbuf_r+0x12>
 800aeca:	f7fe f989 	bl	80091e0 <__sinit>
 800aece:	69a3      	ldr	r3, [r4, #24]
 800aed0:	60a3      	str	r3, [r4, #8]
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	071a      	lsls	r2, r3, #28
 800aed6:	d525      	bpl.n	800af24 <__swbuf_r+0x68>
 800aed8:	6923      	ldr	r3, [r4, #16]
 800aeda:	b31b      	cbz	r3, 800af24 <__swbuf_r+0x68>
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	6922      	ldr	r2, [r4, #16]
 800aee0:	1a98      	subs	r0, r3, r2
 800aee2:	6963      	ldr	r3, [r4, #20]
 800aee4:	b2f6      	uxtb	r6, r6
 800aee6:	4283      	cmp	r3, r0
 800aee8:	4637      	mov	r7, r6
 800aeea:	dc04      	bgt.n	800aef6 <__swbuf_r+0x3a>
 800aeec:	4621      	mov	r1, r4
 800aeee:	4628      	mov	r0, r5
 800aef0:	f7ff fdee 	bl	800aad0 <_fflush_r>
 800aef4:	b9e0      	cbnz	r0, 800af30 <__swbuf_r+0x74>
 800aef6:	68a3      	ldr	r3, [r4, #8]
 800aef8:	3b01      	subs	r3, #1
 800aefa:	60a3      	str	r3, [r4, #8]
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	1c5a      	adds	r2, r3, #1
 800af00:	6022      	str	r2, [r4, #0]
 800af02:	701e      	strb	r6, [r3, #0]
 800af04:	6962      	ldr	r2, [r4, #20]
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	429a      	cmp	r2, r3
 800af0a:	d004      	beq.n	800af16 <__swbuf_r+0x5a>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	07db      	lsls	r3, r3, #31
 800af10:	d506      	bpl.n	800af20 <__swbuf_r+0x64>
 800af12:	2e0a      	cmp	r6, #10
 800af14:	d104      	bne.n	800af20 <__swbuf_r+0x64>
 800af16:	4621      	mov	r1, r4
 800af18:	4628      	mov	r0, r5
 800af1a:	f7ff fdd9 	bl	800aad0 <_fflush_r>
 800af1e:	b938      	cbnz	r0, 800af30 <__swbuf_r+0x74>
 800af20:	4638      	mov	r0, r7
 800af22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af24:	4621      	mov	r1, r4
 800af26:	4628      	mov	r0, r5
 800af28:	f000 f806 	bl	800af38 <__swsetup_r>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d0d5      	beq.n	800aedc <__swbuf_r+0x20>
 800af30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800af34:	e7f4      	b.n	800af20 <__swbuf_r+0x64>
	...

0800af38 <__swsetup_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4b2a      	ldr	r3, [pc, #168]	; (800afe4 <__swsetup_r+0xac>)
 800af3c:	4605      	mov	r5, r0
 800af3e:	6818      	ldr	r0, [r3, #0]
 800af40:	460c      	mov	r4, r1
 800af42:	b118      	cbz	r0, 800af4c <__swsetup_r+0x14>
 800af44:	6a03      	ldr	r3, [r0, #32]
 800af46:	b90b      	cbnz	r3, 800af4c <__swsetup_r+0x14>
 800af48:	f7fe f94a 	bl	80091e0 <__sinit>
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af52:	0718      	lsls	r0, r3, #28
 800af54:	d422      	bmi.n	800af9c <__swsetup_r+0x64>
 800af56:	06d9      	lsls	r1, r3, #27
 800af58:	d407      	bmi.n	800af6a <__swsetup_r+0x32>
 800af5a:	2309      	movs	r3, #9
 800af5c:	602b      	str	r3, [r5, #0]
 800af5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af62:	81a3      	strh	r3, [r4, #12]
 800af64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af68:	e034      	b.n	800afd4 <__swsetup_r+0x9c>
 800af6a:	0758      	lsls	r0, r3, #29
 800af6c:	d512      	bpl.n	800af94 <__swsetup_r+0x5c>
 800af6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af70:	b141      	cbz	r1, 800af84 <__swsetup_r+0x4c>
 800af72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af76:	4299      	cmp	r1, r3
 800af78:	d002      	beq.n	800af80 <__swsetup_r+0x48>
 800af7a:	4628      	mov	r0, r5
 800af7c:	f7ff f8a6 	bl	800a0cc <_free_r>
 800af80:	2300      	movs	r3, #0
 800af82:	6363      	str	r3, [r4, #52]	; 0x34
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af8a:	81a3      	strh	r3, [r4, #12]
 800af8c:	2300      	movs	r3, #0
 800af8e:	6063      	str	r3, [r4, #4]
 800af90:	6923      	ldr	r3, [r4, #16]
 800af92:	6023      	str	r3, [r4, #0]
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	f043 0308 	orr.w	r3, r3, #8
 800af9a:	81a3      	strh	r3, [r4, #12]
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	b94b      	cbnz	r3, 800afb4 <__swsetup_r+0x7c>
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afaa:	d003      	beq.n	800afb4 <__swsetup_r+0x7c>
 800afac:	4621      	mov	r1, r4
 800afae:	4628      	mov	r0, r5
 800afb0:	f000 f884 	bl	800b0bc <__smakebuf_r>
 800afb4:	89a0      	ldrh	r0, [r4, #12]
 800afb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afba:	f010 0301 	ands.w	r3, r0, #1
 800afbe:	d00a      	beq.n	800afd6 <__swsetup_r+0x9e>
 800afc0:	2300      	movs	r3, #0
 800afc2:	60a3      	str	r3, [r4, #8]
 800afc4:	6963      	ldr	r3, [r4, #20]
 800afc6:	425b      	negs	r3, r3
 800afc8:	61a3      	str	r3, [r4, #24]
 800afca:	6923      	ldr	r3, [r4, #16]
 800afcc:	b943      	cbnz	r3, 800afe0 <__swsetup_r+0xa8>
 800afce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afd2:	d1c4      	bne.n	800af5e <__swsetup_r+0x26>
 800afd4:	bd38      	pop	{r3, r4, r5, pc}
 800afd6:	0781      	lsls	r1, r0, #30
 800afd8:	bf58      	it	pl
 800afda:	6963      	ldrpl	r3, [r4, #20]
 800afdc:	60a3      	str	r3, [r4, #8]
 800afde:	e7f4      	b.n	800afca <__swsetup_r+0x92>
 800afe0:	2000      	movs	r0, #0
 800afe2:	e7f7      	b.n	800afd4 <__swsetup_r+0x9c>
 800afe4:	20000100 	.word	0x20000100

0800afe8 <_raise_r>:
 800afe8:	291f      	cmp	r1, #31
 800afea:	b538      	push	{r3, r4, r5, lr}
 800afec:	4604      	mov	r4, r0
 800afee:	460d      	mov	r5, r1
 800aff0:	d904      	bls.n	800affc <_raise_r+0x14>
 800aff2:	2316      	movs	r3, #22
 800aff4:	6003      	str	r3, [r0, #0]
 800aff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800affa:	bd38      	pop	{r3, r4, r5, pc}
 800affc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800affe:	b112      	cbz	r2, 800b006 <_raise_r+0x1e>
 800b000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b004:	b94b      	cbnz	r3, 800b01a <_raise_r+0x32>
 800b006:	4620      	mov	r0, r4
 800b008:	f000 f830 	bl	800b06c <_getpid_r>
 800b00c:	462a      	mov	r2, r5
 800b00e:	4601      	mov	r1, r0
 800b010:	4620      	mov	r0, r4
 800b012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b016:	f000 b817 	b.w	800b048 <_kill_r>
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d00a      	beq.n	800b034 <_raise_r+0x4c>
 800b01e:	1c59      	adds	r1, r3, #1
 800b020:	d103      	bne.n	800b02a <_raise_r+0x42>
 800b022:	2316      	movs	r3, #22
 800b024:	6003      	str	r3, [r0, #0]
 800b026:	2001      	movs	r0, #1
 800b028:	e7e7      	b.n	800affa <_raise_r+0x12>
 800b02a:	2400      	movs	r4, #0
 800b02c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b030:	4628      	mov	r0, r5
 800b032:	4798      	blx	r3
 800b034:	2000      	movs	r0, #0
 800b036:	e7e0      	b.n	800affa <_raise_r+0x12>

0800b038 <raise>:
 800b038:	4b02      	ldr	r3, [pc, #8]	; (800b044 <raise+0xc>)
 800b03a:	4601      	mov	r1, r0
 800b03c:	6818      	ldr	r0, [r3, #0]
 800b03e:	f7ff bfd3 	b.w	800afe8 <_raise_r>
 800b042:	bf00      	nop
 800b044:	20000100 	.word	0x20000100

0800b048 <_kill_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4d07      	ldr	r5, [pc, #28]	; (800b068 <_kill_r+0x20>)
 800b04c:	2300      	movs	r3, #0
 800b04e:	4604      	mov	r4, r0
 800b050:	4608      	mov	r0, r1
 800b052:	4611      	mov	r1, r2
 800b054:	602b      	str	r3, [r5, #0]
 800b056:	f7f6 ffa9 	bl	8001fac <_kill>
 800b05a:	1c43      	adds	r3, r0, #1
 800b05c:	d102      	bne.n	800b064 <_kill_r+0x1c>
 800b05e:	682b      	ldr	r3, [r5, #0]
 800b060:	b103      	cbz	r3, 800b064 <_kill_r+0x1c>
 800b062:	6023      	str	r3, [r4, #0]
 800b064:	bd38      	pop	{r3, r4, r5, pc}
 800b066:	bf00      	nop
 800b068:	200107b0 	.word	0x200107b0

0800b06c <_getpid_r>:
 800b06c:	f7f6 bf96 	b.w	8001f9c <_getpid>

0800b070 <__swhatbuf_r>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	460c      	mov	r4, r1
 800b074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b078:	2900      	cmp	r1, #0
 800b07a:	b096      	sub	sp, #88	; 0x58
 800b07c:	4615      	mov	r5, r2
 800b07e:	461e      	mov	r6, r3
 800b080:	da0d      	bge.n	800b09e <__swhatbuf_r+0x2e>
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b088:	f04f 0100 	mov.w	r1, #0
 800b08c:	bf0c      	ite	eq
 800b08e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b092:	2340      	movne	r3, #64	; 0x40
 800b094:	2000      	movs	r0, #0
 800b096:	6031      	str	r1, [r6, #0]
 800b098:	602b      	str	r3, [r5, #0]
 800b09a:	b016      	add	sp, #88	; 0x58
 800b09c:	bd70      	pop	{r4, r5, r6, pc}
 800b09e:	466a      	mov	r2, sp
 800b0a0:	f000 f848 	bl	800b134 <_fstat_r>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	dbec      	blt.n	800b082 <__swhatbuf_r+0x12>
 800b0a8:	9901      	ldr	r1, [sp, #4]
 800b0aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0b2:	4259      	negs	r1, r3
 800b0b4:	4159      	adcs	r1, r3
 800b0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ba:	e7eb      	b.n	800b094 <__swhatbuf_r+0x24>

0800b0bc <__smakebuf_r>:
 800b0bc:	898b      	ldrh	r3, [r1, #12]
 800b0be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0c0:	079d      	lsls	r5, r3, #30
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	d507      	bpl.n	800b0d8 <__smakebuf_r+0x1c>
 800b0c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0cc:	6023      	str	r3, [r4, #0]
 800b0ce:	6123      	str	r3, [r4, #16]
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	6163      	str	r3, [r4, #20]
 800b0d4:	b002      	add	sp, #8
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	ab01      	add	r3, sp, #4
 800b0da:	466a      	mov	r2, sp
 800b0dc:	f7ff ffc8 	bl	800b070 <__swhatbuf_r>
 800b0e0:	9900      	ldr	r1, [sp, #0]
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff f865 	bl	800a1b4 <_malloc_r>
 800b0ea:	b948      	cbnz	r0, 800b100 <__smakebuf_r+0x44>
 800b0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f0:	059a      	lsls	r2, r3, #22
 800b0f2:	d4ef      	bmi.n	800b0d4 <__smakebuf_r+0x18>
 800b0f4:	f023 0303 	bic.w	r3, r3, #3
 800b0f8:	f043 0302 	orr.w	r3, r3, #2
 800b0fc:	81a3      	strh	r3, [r4, #12]
 800b0fe:	e7e3      	b.n	800b0c8 <__smakebuf_r+0xc>
 800b100:	89a3      	ldrh	r3, [r4, #12]
 800b102:	6020      	str	r0, [r4, #0]
 800b104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b108:	81a3      	strh	r3, [r4, #12]
 800b10a:	9b00      	ldr	r3, [sp, #0]
 800b10c:	6163      	str	r3, [r4, #20]
 800b10e:	9b01      	ldr	r3, [sp, #4]
 800b110:	6120      	str	r0, [r4, #16]
 800b112:	b15b      	cbz	r3, 800b12c <__smakebuf_r+0x70>
 800b114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b118:	4630      	mov	r0, r6
 800b11a:	f000 f81d 	bl	800b158 <_isatty_r>
 800b11e:	b128      	cbz	r0, 800b12c <__smakebuf_r+0x70>
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	f023 0303 	bic.w	r3, r3, #3
 800b126:	f043 0301 	orr.w	r3, r3, #1
 800b12a:	81a3      	strh	r3, [r4, #12]
 800b12c:	89a3      	ldrh	r3, [r4, #12]
 800b12e:	431d      	orrs	r5, r3
 800b130:	81a5      	strh	r5, [r4, #12]
 800b132:	e7cf      	b.n	800b0d4 <__smakebuf_r+0x18>

0800b134 <_fstat_r>:
 800b134:	b538      	push	{r3, r4, r5, lr}
 800b136:	4d07      	ldr	r5, [pc, #28]	; (800b154 <_fstat_r+0x20>)
 800b138:	2300      	movs	r3, #0
 800b13a:	4604      	mov	r4, r0
 800b13c:	4608      	mov	r0, r1
 800b13e:	4611      	mov	r1, r2
 800b140:	602b      	str	r3, [r5, #0]
 800b142:	f7f6 ff92 	bl	800206a <_fstat>
 800b146:	1c43      	adds	r3, r0, #1
 800b148:	d102      	bne.n	800b150 <_fstat_r+0x1c>
 800b14a:	682b      	ldr	r3, [r5, #0]
 800b14c:	b103      	cbz	r3, 800b150 <_fstat_r+0x1c>
 800b14e:	6023      	str	r3, [r4, #0]
 800b150:	bd38      	pop	{r3, r4, r5, pc}
 800b152:	bf00      	nop
 800b154:	200107b0 	.word	0x200107b0

0800b158 <_isatty_r>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	4d06      	ldr	r5, [pc, #24]	; (800b174 <_isatty_r+0x1c>)
 800b15c:	2300      	movs	r3, #0
 800b15e:	4604      	mov	r4, r0
 800b160:	4608      	mov	r0, r1
 800b162:	602b      	str	r3, [r5, #0]
 800b164:	f7f6 ff91 	bl	800208a <_isatty>
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	d102      	bne.n	800b172 <_isatty_r+0x1a>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	b103      	cbz	r3, 800b172 <_isatty_r+0x1a>
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	200107b0 	.word	0x200107b0

0800b178 <_init>:
 800b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17a:	bf00      	nop
 800b17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17e:	bc08      	pop	{r3}
 800b180:	469e      	mov	lr, r3
 800b182:	4770      	bx	lr

0800b184 <_fini>:
 800b184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b186:	bf00      	nop
 800b188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b18a:	bc08      	pop	{r3}
 800b18c:	469e      	mov	lr, r3
 800b18e:	4770      	bx	lr
