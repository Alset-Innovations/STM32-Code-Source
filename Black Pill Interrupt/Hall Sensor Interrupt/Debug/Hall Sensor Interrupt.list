
Hall Sensor Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800ba40  0800ba40  0001ba40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcd0  0800bcd0  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcd0  0800bcd0  0001bcd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcd8  0800bcd8  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcd8  0800bcd8  0001bcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcdc  0800bcdc  0001bcdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800bce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f98  20000150  0800be2c  00020150  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200030e8  0800be2c  000230e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018894  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a29  00000000  00000000  00038a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  0003c480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001185  00000000  00000000  0003db20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b1df  00000000  00000000  0003eca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c653  00000000  00000000  00059e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a00cc  00000000  00000000  000764d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006978  00000000  00000000  001165a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0011cf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ba28 	.word	0x0800ba28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800ba28 	.word	0x0800ba28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	; 0x50
 8000ebc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebe:	f000 ff4b 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec2:	f000 f8c3 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec6:	f000 fb4f 	bl	8001568 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000eca:	f000 f929 	bl	8001120 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ece:	f000 fa33 	bl	8001338 <MX_TIM3_Init>
  MX_I2C2_Init();
 8000ed2:	f000 f977 	bl	80011c4 <MX_I2C2_Init>
  MX_TIM5_Init();
 8000ed6:	f000 fafd 	bl	80014d4 <MX_TIM5_Init>
  MX_SPI1_Init();
 8000eda:	f000 f9a1 	bl	8001220 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000ede:	f000 f9d5 	bl	800128c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000ee2:	f000 faa1 	bl	8001428 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000ee6:	f008 fb97 	bl	8009618 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Activate necessary timers.
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000eea:	2100      	movs	r1, #0
 8000eec:	484c      	ldr	r0, [pc, #304]	; (8001020 <main+0x168>)
 8000eee:	f003 ffb1 	bl	8004e54 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	484b      	ldr	r0, [pc, #300]	; (8001024 <main+0x16c>)
 8000ef6:	f003 ffad 	bl	8004e54 <HAL_TIM_OC_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000efa:	2100      	movs	r1, #0
 8000efc:	484a      	ldr	r0, [pc, #296]	; (8001028 <main+0x170>)
 8000efe:	f004 f8a9 	bl	8005054 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f02:	2104      	movs	r1, #4
 8000f04:	4848      	ldr	r0, [pc, #288]	; (8001028 <main+0x170>)
 8000f06:	f004 f8a5 	bl	8005054 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	4846      	ldr	r0, [pc, #280]	; (8001028 <main+0x170>)
 8000f0e:	f004 f8a1 	bl	8005054 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim4);
 8000f12:	4844      	ldr	r0, [pc, #272]	; (8001024 <main+0x16c>)
 8000f14:	f003 feec 	bl	8004cf0 <HAL_TIM_Base_Start_IT>

	// Fill sintab array
	for (int i = 0; i < AANTAL_TIJDSTAPPEN; i++) {
 8000f18:	2300      	movs	r3, #0
 8000f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8000f1c:	e038      	b.n	8000f90 <main+0xd8>
	  sintab[i] = sin(i*2*M_PI/AANTAL_TIJDSTAPPEN) * 0.5 + 0.5;
 8000f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fafe 	bl	8000524 <__aeabi_i2d>
 8000f28:	a33b      	add	r3, pc, #236	; (adr r3, 8001018 <main+0x160>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	f7ff fb63 	bl	80005f8 <__aeabi_dmul>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000f42:	f7ff fc83 	bl	800084c <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	ec43 2b17 	vmov	d7, r2, r3
 8000f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f52:	eef0 0a67 	vmov.f32	s1, s15
 8000f56:	f009 fd27 	bl	800a9a8 <sin>
 8000f5a:	ec51 0b10 	vmov	r0, r1, d0
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <main+0x174>)
 8000f64:	f7ff fb48 	bl	80005f8 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <main+0x174>)
 8000f76:	f7ff f989 	bl	800028c <__adddf3>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	482c      	ldr	r0, [pc, #176]	; (8001030 <main+0x178>)
 8000f80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000f82:	00c9      	lsls	r1, r1, #3
 8000f84:	4401      	add	r1, r0
 8000f86:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < AANTAL_TIJDSTAPPEN; i++) {
 8000f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8000f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f96:	dbc2      	blt.n	8000f1e <main+0x66>
	}

	GPIOC->ODR = 0xE000;
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <main+0x17c>)
 8000f9a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000f9e:	615a      	str	r2, [r3, #20]
  // Startup Sequence

  while (1)
  {

	HAL_ADC_Start(&hadc1);
 8000fa0:	4825      	ldr	r0, [pc, #148]	; (8001038 <main+0x180>)
 8000fa2:	f000 ffb3 	bl	8001f0c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8000faa:	4823      	ldr	r0, [pc, #140]	; (8001038 <main+0x180>)
 8000fac:	f001 f862 	bl	8002074 <HAL_ADC_PollForConversion>
	WantedRPM = HAL_ADC_GetValue(&hadc1);
 8000fb0:	4821      	ldr	r0, [pc, #132]	; (8001038 <main+0x180>)
 8000fb2:	f001 f8ea 	bl	800218a <HAL_ADC_GetValue>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a20      	ldr	r2, [pc, #128]	; (800103c <main+0x184>)
 8000fba:	6013      	str	r3, [r2, #0]

	if (WantedRPM < MinimumRPM) {
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <main+0x184>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b63      	cmp	r3, #99	; 0x63
 8000fc2:	d802      	bhi.n	8000fca <main+0x112>
		WantedRPM = MinimumRPM;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <main+0x184>)
 8000fc6:	2264      	movs	r2, #100	; 0x64
 8000fc8:	601a      	str	r2, [r3, #0]
	}

	// Set PSC to appropriate value for RPM
	TIM4->PSC = (15 * Fapb2clk) / (256 * WantedRPM) - 1;
 8000fca:	f003 fdf3 	bl	8004bb4 <HAL_RCC_GetPCLK2Freq>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <main+0x184>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe4:	4a16      	ldr	r2, [pc, #88]	; (8001040 <main+0x188>)
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6293      	str	r3, [r2, #40]	; 0x28

	// Send RPM data to PC
	char buf[64];
	uint16_t len = snprintf(buf, sizeof(buf), "\n\rWanted RPM / Current RPM: %d / %d", WantedRPM, CurrentRPM);
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <main+0x184>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <main+0x18c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4638      	mov	r0, r7
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	4a13      	ldr	r2, [pc, #76]	; (8001048 <main+0x190>)
 8000ffa:	2140      	movs	r1, #64	; 0x40
 8000ffc:	f009 f81c 	bl	800a038 <sniprintf>
 8001000:	4603      	mov	r3, r0
 8001002:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	CDC_Transmit_FS((uint8_t *) buf, sizeof(buf));
 8001006:	463b      	mov	r3, r7
 8001008:	2140      	movs	r1, #64	; 0x40
 800100a:	4618      	mov	r0, r3
 800100c:	f008 fbc2 	bl	8009794 <CDC_Transmit_FS>
  {
 8001010:	e7c6      	b.n	8000fa0 <main+0xe8>
 8001012:	bf00      	nop
 8001014:	f3af 8000 	nop.w
 8001018:	54442d18 	.word	0x54442d18
 800101c:	400921fb 	.word	0x400921fb
 8001020:	20000260 	.word	0x20000260
 8001024:	200002f0 	.word	0x200002f0
 8001028:	200002a8 	.word	0x200002a8
 800102c:	3fe00000 	.word	0x3fe00000
 8001030:	20000388 	.word	0x20000388
 8001034:	40020800 	.word	0x40020800
 8001038:	2000016c 	.word	0x2000016c
 800103c:	20000380 	.word	0x20000380
 8001040:	40000800 	.word	0x40000800
 8001044:	20000384 	.word	0x20000384
 8001048:	0800ba40 	.word	0x0800ba40

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b094      	sub	sp, #80	; 0x50
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2230      	movs	r2, #48	; 0x30
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f009 f820 	bl	800a0a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <SystemClock_Config+0xcc>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	; 0x40
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a21      	ldr	r2, [pc, #132]	; (800111c <SystemClock_Config+0xd0>)
 8001096:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010bc:	2319      	movs	r3, #25
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010c0:	23c0      	movs	r3, #192	; 0xc0
 80010c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c8:	2304      	movs	r3, #4
 80010ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 f92b 	bl	800432c <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010dc:	f000 fae0 	bl	80016a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2302      	movs	r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80010f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2103      	movs	r1, #3
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fb8c 	bl	800481c <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800110a:	f000 fac9 	bl	80016a0 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	; 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <MX_ADC1_Init+0x9c>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_ADC1_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_ADC1_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_ADC1_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <MX_ADC1_Init+0xa0>)
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_ADC1_Init+0x98>)
 800116c:	2201      	movs	r2, #1
 800116e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_ADC1_Init+0x98>)
 800117a:	2201      	movs	r2, #1
 800117c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001180:	f000 fe80 	bl	8001e84 <HAL_ADC_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800118a:	f000 fa89 	bl	80016a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800118e:	2304      	movs	r3, #4
 8001190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_ADC1_Init+0x98>)
 80011a0:	f001 f800 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011aa:	f000 fa79 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000016c 	.word	0x2000016c
 80011bc:	40012000 	.word	0x40012000
 80011c0:	0f000001 	.word	0x0f000001

080011c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_I2C2_Init+0x50>)
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <MX_I2C2_Init+0x54>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_I2C2_Init+0x50>)
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_I2C2_Init+0x58>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_I2C2_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_I2C2_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_I2C2_Init+0x50>)
 80011e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_I2C2_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_I2C2_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_I2C2_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_I2C2_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_I2C2_Init+0x50>)
 8001202:	f001 fcd1 	bl	8002ba8 <HAL_I2C_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800120c:	f000 fa48 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200001b4 	.word	0x200001b4
 8001218:	40005800 	.word	0x40005800
 800121c:	000186a0 	.word	0x000186a0

08001220 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_SPI1_Init+0x64>)
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <MX_SPI1_Init+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_SPI1_Init+0x64>)
 800122c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001230:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_SPI1_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_SPI1_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_SPI1_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_SPI1_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_SPI1_Init+0x64>)
 800124c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001250:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_SPI1_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_SPI1_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_SPI1_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_SPI1_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_SPI1_Init+0x64>)
 800126c:	220a      	movs	r2, #10
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_SPI1_Init+0x64>)
 8001272:	f003 fcb3 	bl	8004bdc <HAL_SPI_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800127c:	f000 fa10 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000208 	.word	0x20000208
 8001288:	40013000 	.word	0x40013000

0800128c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_TIM2_Init+0xa8>)
 80012b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <MX_TIM2_Init+0xa8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM2_Init+0xa8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_TIM2_Init+0xa8>)
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_TIM2_Init+0xa8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_TIM2_Init+0xa8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012d6:	4817      	ldr	r0, [pc, #92]	; (8001334 <MX_TIM2_Init+0xa8>)
 80012d8:	f003 fd6c 	bl	8004db4 <HAL_TIM_OC_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012e2:	f000 f9dd 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	4619      	mov	r1, r3
 80012f4:	480f      	ldr	r0, [pc, #60]	; (8001334 <MX_TIM2_Init+0xa8>)
 80012f6:	f004 fcf7 	bl	8005ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001300:	f000 f9ce 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <MX_TIM2_Init+0xa8>)
 800131c:	f004 f852 	bl	80053c4 <HAL_TIM_OC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001326:	f000 f9bb 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000260 	.word	0x20000260

08001338 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <MX_TIM3_Init+0xe8>)
 800135c:	4a31      	ldr	r2, [pc, #196]	; (8001424 <MX_TIM3_Init+0xec>)
 800135e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <MX_TIM3_Init+0xe8>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MX_TIM3_Init+0xe8>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <MX_TIM3_Init+0xe8>)
 800136e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001372:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <MX_TIM3_Init+0xe8>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <MX_TIM3_Init+0xe8>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001380:	4827      	ldr	r0, [pc, #156]	; (8001420 <MX_TIM3_Init+0xe8>)
 8001382:	f003 fe17 	bl	8004fb4 <HAL_TIM_PWM_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800138c:	f000 f988 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001390:	2320      	movs	r3, #32
 8001392:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001398:	f107 0320 	add.w	r3, r7, #32
 800139c:	4619      	mov	r1, r3
 800139e:	4820      	ldr	r0, [pc, #128]	; (8001420 <MX_TIM3_Init+0xe8>)
 80013a0:	f004 fca2 	bl	8005ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80013aa:	f000 f979 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ae:	2360      	movs	r3, #96	; 0x60
 80013b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	4816      	ldr	r0, [pc, #88]	; (8001420 <MX_TIM3_Init+0xe8>)
 80013c6:	f004 f859 	bl	800547c <HAL_TIM_PWM_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013d0:	f000 f966 	bl	80016a0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_TIM3_Init+0xe8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	699a      	ldr	r2, [r3, #24]
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_TIM3_Init+0xe8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0208 	bic.w	r2, r2, #8
 80013e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2204      	movs	r2, #4
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_TIM3_Init+0xe8>)
 80013ec:	f004 f846 	bl	800547c <HAL_TIM_PWM_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80013f6:	f000 f953 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2208      	movs	r2, #8
 80013fe:	4619      	mov	r1, r3
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_TIM3_Init+0xe8>)
 8001402:	f004 f83b 	bl	800547c <HAL_TIM_PWM_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800140c:	f000 f948 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <MX_TIM3_Init+0xe8>)
 8001412:	f000 faff 	bl	8001a14 <HAL_TIM_MspPostInit>

}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200002a8 	.word	0x200002a8
 8001424:	40000400 	.word	0x40000400

08001428 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <MX_TIM4_Init+0xa4>)
 800144c:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <MX_TIM4_Init+0xa8>)
 800144e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 65535;
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_TIM4_Init+0xa4>)
 8001452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001456:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_TIM4_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_TIM4_Init+0xa4>)
 8001460:	2201      	movs	r2, #1
 8001462:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_TIM4_Init+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_TIM4_Init+0xa4>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001470:	4816      	ldr	r0, [pc, #88]	; (80014cc <MX_TIM4_Init+0xa4>)
 8001472:	f003 fc9f 	bl	8004db4 <HAL_TIM_OC_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800147c:	f000 f910 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001480:	2320      	movs	r3, #32
 8001482:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4619      	mov	r1, r3
 800148e:	480f      	ldr	r0, [pc, #60]	; (80014cc <MX_TIM4_Init+0xa4>)
 8001490:	f004 fc2a 	bl	8005ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800149a:	f000 f901 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_TIM4_Init+0xa4>)
 80014b6:	f003 ff85 	bl	80053c4 <HAL_TIM_OC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80014c0:	f000 f8ee 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200002f0 	.word	0x200002f0
 80014d0:	40000800 	.word	0x40000800

080014d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MX_TIM5_Init+0x8c>)
 80014f2:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <MX_TIM5_Init+0x90>)
 80014f4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_TIM5_Init+0x8c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <MX_TIM5_Init+0x8c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_TIM5_Init+0x8c>)
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_TIM5_Init+0x8c>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_TIM5_Init+0x8c>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim5, &sConfig) != HAL_OK)
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	4619      	mov	r1, r3
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <MX_TIM5_Init+0x8c>)
 800152e:	f004 fb32 	bl	8005b96 <HAL_TIMEx_HallSensor_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001538:	f000 f8b2 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800153c:	2350      	movs	r3, #80	; 0x50
 800153e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001544:	463b      	mov	r3, r7
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_TIM5_Init+0x8c>)
 800154a:	f004 fbcd 	bl	8005ce8 <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001554:	f000 f8a4 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000338 	.word	0x20000338
 8001564:	40000c00 	.word	0x40000c00

08001568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b43      	ldr	r3, [pc, #268]	; (8001690 <MX_GPIO_Init+0x128>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a42      	ldr	r2, [pc, #264]	; (8001690 <MX_GPIO_Init+0x128>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b40      	ldr	r3, [pc, #256]	; (8001690 <MX_GPIO_Init+0x128>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <MX_GPIO_Init+0x128>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a3b      	ldr	r2, [pc, #236]	; (8001690 <MX_GPIO_Init+0x128>)
 80015a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b39      	ldr	r3, [pc, #228]	; (8001690 <MX_GPIO_Init+0x128>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b35      	ldr	r3, [pc, #212]	; (8001690 <MX_GPIO_Init+0x128>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a34      	ldr	r2, [pc, #208]	; (8001690 <MX_GPIO_Init+0x128>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <MX_GPIO_Init+0x128>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <MX_GPIO_Init+0x128>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a2d      	ldr	r2, [pc, #180]	; (8001690 <MX_GPIO_Init+0x128>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MX_GPIO_Init+0x128>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80015f4:	4827      	ldr	r0, [pc, #156]	; (8001694 <MX_GPIO_Init+0x12c>)
 80015f6:	f001 fa99 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001600:	4825      	ldr	r0, [pc, #148]	; (8001698 <MX_GPIO_Init+0x130>)
 8001602:	f001 fa93 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001606:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	481d      	ldr	r0, [pc, #116]	; (8001694 <MX_GPIO_Init+0x12c>)
 8001620:	f001 f900 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8;
 8001624:	f249 1304 	movw	r3, #37124	; 0x9104
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4818      	ldr	r0, [pc, #96]	; (800169c <MX_GPIO_Init+0x134>)
 800163c:	f001 f8f2 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	480f      	ldr	r0, [pc, #60]	; (8001698 <MX_GPIO_Init+0x130>)
 800165a:	f001 f8e3 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800165e:	23c0      	movs	r3, #192	; 0xc0
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001662:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <MX_GPIO_Init+0x134>)
 8001674:	f001 f8d6 	bl	8002824 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2017      	movs	r0, #23
 800167e:	f001 f89a 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001682:	2017      	movs	r0, #23
 8001684:	f001 f8b3 	bl	80027ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	40020800 	.word	0x40020800
 8001698:	40020000 	.word	0x40020000
 800169c:	40020400 	.word	0x40020400

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <Error_Handler+0x8>
	...

080016ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_MspInit+0x4c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_MspInit+0x4c>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_MspInit+0x4c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_ADC_MspInit+0x7c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d127      	bne.n	800176e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_ADC_MspInit+0x80>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a15      	ldr	r2, [pc, #84]	; (800177c <HAL_ADC_MspInit+0x80>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_ADC_MspInit+0x80>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_ADC_MspInit+0x80>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HAL_ADC_MspInit+0x80>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_ADC_MspInit+0x80>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001756:	2310      	movs	r3, #16
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175a:	2303      	movs	r3, #3
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_ADC_MspInit+0x84>)
 800176a:	f001 f85b 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40012000 	.word	0x40012000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000

08001784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a22      	ldr	r2, [pc, #136]	; (800182c <HAL_I2C_MspInit+0xa8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d13d      	bne.n	8001822 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HAL_I2C_MspInit+0xac>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a20      	ldr	r2, [pc, #128]	; (8001830 <HAL_I2C_MspInit+0xac>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <HAL_I2C_MspInit+0xac>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c8:	2312      	movs	r3, #18
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017d4:	2304      	movs	r3, #4
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4815      	ldr	r0, [pc, #84]	; (8001834 <HAL_I2C_MspInit+0xb0>)
 80017e0:	f001 f820 	bl	8002824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ea:	2312      	movs	r3, #18
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80017f6:	2309      	movs	r3, #9
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <HAL_I2C_MspInit+0xb0>)
 8001802:	f001 f80f 	bl	8002824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_I2C_MspInit+0xac>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_I2C_MspInit+0xac>)
 8001810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_I2C_MspInit+0xac>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3728      	adds	r7, #40	; 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40005800 	.word	0x40005800
 8001830:	40023800 	.word	0x40023800
 8001834:	40020400 	.word	0x40020400

08001838 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a19      	ldr	r2, [pc, #100]	; (80018bc <HAL_SPI_MspInit+0x84>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d12b      	bne.n	80018b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a17      	ldr	r2, [pc, #92]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 8001864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_SPI_MspInit+0x88>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001892:	23e0      	movs	r3, #224	; 0xe0
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018a2:	2305      	movs	r3, #5
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <HAL_SPI_MspInit+0x8c>)
 80018ae:	f000 ffb9 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	; 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40013000 	.word	0x40013000
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000

080018c8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d8:	d10e      	bne.n	80018f8 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_TIM_OC_MspInit+0x70>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a15      	ldr	r2, [pc, #84]	; (8001938 <HAL_TIM_OC_MspInit+0x70>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_TIM_OC_MspInit+0x70>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018f6:	e01a      	b.n	800192e <HAL_TIM_OC_MspInit+0x66>
  else if(htim_oc->Instance==TIM4)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0f      	ldr	r2, [pc, #60]	; (800193c <HAL_TIM_OC_MspInit+0x74>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d115      	bne.n	800192e <HAL_TIM_OC_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_TIM_OC_MspInit+0x70>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <HAL_TIM_OC_MspInit+0x70>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_TIM_OC_MspInit+0x70>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	201e      	movs	r0, #30
 8001924:	f000 ff47 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001928:	201e      	movs	r0, #30
 800192a:	f000 ff60 	bl	80027ee <HAL_NVIC_EnableIRQ>
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40000800 	.word	0x40000800

08001940 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_TIM_PWM_MspInit+0x3c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10d      	bne.n	800196e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_TIM_PWM_MspInit+0x40>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_TIM_PWM_MspInit+0x40>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <HAL_TIM_PWM_MspInit+0x40>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40000400 	.word	0x40000400
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM5)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d12b      	bne.n	80019fe <HAL_TIMEx_HallSensor_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_TIMEx_HallSensor_MspInit+0x88>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <HAL_TIMEx_HallSensor_MspInit+0x88>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_TIMEx_HallSensor_MspInit+0x88>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_TIMEx_HallSensor_MspInit+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_TIMEx_HallSensor_MspInit+0x88>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_TIMEx_HallSensor_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019de:	2307      	movs	r3, #7
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80019ee:	2302      	movs	r3, #2
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 80019fa:	f000 ff13 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40000c00 	.word	0x40000c00
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <HAL_TIM_MspPostInit+0x68>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d11d      	bne.n	8001a72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_TIM_MspPostInit+0x6c>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_TIM_MspPostInit+0x6c>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_TIM_MspPostInit+0x6c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8001a52:	2331      	movs	r3, #49	; 0x31
 8001a54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_TIM_MspPostInit+0x70>)
 8001a6e:	f000 fed9 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020400 	.word	0x40020400

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <NMI_Handler+0x4>

08001a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad4:	f000 f992 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}

08001adc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001adc:	b598      	push	{r3, r4, r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	// Calculate CurrentRPM using TIM2 and Hall Sensor Interrupt
	CurrentRPM = TIM2->CNT / (Fapb1clk / 60);
 8001ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001ae6:	f003 f851 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8001aea:	4603      	mov	r3, r0
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <EXTI9_5_IRQHandler+0x5c>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	fbb4 f3f3 	udiv	r3, r4, r3
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <EXTI9_5_IRQHandler+0x60>)
 8001afe:	801a      	strh	r2, [r3, #0]

	if (CurrentRPM > MaximumRPM) {
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <EXTI9_5_IRQHandler+0x60>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	f241 0204 	movw	r2, #4100	; 0x1004
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d905      	bls.n	8001b18 <EXTI9_5_IRQHandler+0x3c>
		GPIOC->ODR &= 0x1FFF;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <EXTI9_5_IRQHandler+0x64>)
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <EXTI9_5_IRQHandler+0x64>)
 8001b12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b16:	6153      	str	r3, [r2, #20]
	}

	// Reset TIM2 for next measurement
	TIM2->CNT = 0x0000;
 8001b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CCR2 = PWMPulse * CheckActive(TIM2->CCR3);
	TIM2->CCR3 = temp;
	*/

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b20:	2040      	movs	r0, #64	; 0x40
 8001b22:	f001 f81d 	bl	8002b60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b26:	2080      	movs	r0, #128	; 0x80
 8001b28:	f001 f81a 	bl	8002b60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b30:	f001 f816 	bl	8002b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd98      	pop	{r3, r4, r7, pc}
 8001b38:	88888889 	.word	0x88888889
 8001b3c:	20000384 	.word	0x20000384
 8001b40:	40020800 	.word	0x40020800

08001b44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	// Set PWM timers to next step in sinusoid generation
	uint32_t ARR = TIM3->ARR;
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <TIM4_IRQHandler+0x104>)
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	607b      	str	r3, [r7, #4]
	TIM3->CCR1 = ARR * sintab[ (j + OffsetU) % AANTAL_TIJDSTAPPEN];
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe fcd7 	bl	8000504 <__aeabi_ui2d>
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <TIM4_IRQHandler+0x108>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	425a      	negs	r2, r3
 8001b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b64:	bf58      	it	pl
 8001b66:	4253      	negpl	r3, r2
 8001b68:	4a39      	ldr	r2, [pc, #228]	; (8001c50 <TIM4_IRQHandler+0x10c>)
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fd41 	bl	80005f8 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4c33      	ldr	r4, [pc, #204]	; (8001c48 <TIM4_IRQHandler+0x104>)
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7fe fffc 	bl	8000b7c <__aeabi_d2uiz>
 8001b84:	4603      	mov	r3, r0
 8001b86:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR2 = ARR * sintab[ (j + OffsetV) % AANTAL_TIJDSTAPPEN];
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7fe fcbb 	bl	8000504 <__aeabi_ui2d>
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <TIM4_IRQHandler+0x108>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	33aa      	adds	r3, #170	; 0xaa
 8001b94:	425a      	negs	r2, r3
 8001b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b9e:	bf58      	it	pl
 8001ba0:	4253      	negpl	r3, r2
 8001ba2:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <TIM4_IRQHandler+0x10c>)
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fd24 	bl	80005f8 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4c24      	ldr	r4, [pc, #144]	; (8001c48 <TIM4_IRQHandler+0x104>)
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7fe ffdf 	bl	8000b7c <__aeabi_d2uiz>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM3->CCR3 = ARR * sintab[ (j + OffsetW) % AANTAL_TIJDSTAPPEN];
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7fe fc9e 	bl	8000504 <__aeabi_ui2d>
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <TIM4_IRQHandler+0x108>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8001bd0:	425a      	negs	r2, r3
 8001bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bda:	bf58      	it	pl
 8001bdc:	4253      	negpl	r3, r2
 8001bde:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <TIM4_IRQHandler+0x10c>)
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fd06 	bl	80005f8 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4c15      	ldr	r4, [pc, #84]	; (8001c48 <TIM4_IRQHandler+0x104>)
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7fe ffc1 	bl	8000b7c <__aeabi_d2uiz>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	63e3      	str	r3, [r4, #60]	; 0x3c

	j++;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <TIM4_IRQHandler+0x108>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <TIM4_IRQHandler+0x108>)
 8001c06:	6013      	str	r3, [r2, #0]

	if( j > AANTAL_TIJDSTAPPEN) {
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <TIM4_IRQHandler+0x108>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c10:	dd02      	ble.n	8001c18 <TIM4_IRQHandler+0xd4>
	  j = 0; // Reset j when full sinusoid has been made.
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <TIM4_IRQHandler+0x108>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
	}

// Set PSC to appropriate value for RPM
TIM4->PSC = (15 * Fapb2clk) / (256 * WantedRPM) - 1;
 8001c18:	f002 ffcc 	bl	8004bb4 <HAL_RCC_GetPCLK2Freq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4613      	mov	r3, r2
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <TIM4_IRQHandler+0x110>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <TIM4_IRQHandler+0x114>)
 8001c34:	3b01      	subs	r3, #1
 8001c36:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <TIM4_IRQHandler+0x118>)
 8001c3a:	f003 fabb 	bl	80051b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40000400 	.word	0x40000400
 8001c4c:	20001388 	.word	0x20001388
 8001c50:	20000388 	.word	0x20000388
 8001c54:	20000380 	.word	0x20000380
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	200002f0 	.word	0x200002f0

08001c60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <OTG_FS_IRQHandler+0x10>)
 8001c66:	f001 fa33 	bl	80030d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20002874 	.word	0x20002874

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f008 fa04 	bl	800a0b0 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20020000 	.word	0x20020000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	2000138c 	.word	0x2000138c
 8001cdc:	200030e8 	.word	0x200030e8

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d08:	480d      	ldr	r0, [pc, #52]	; (8001d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d0a:	490e      	ldr	r1, [pc, #56]	; (8001d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d20:	4c0b      	ldr	r4, [pc, #44]	; (8001d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d2e:	f7ff ffd7 	bl	8001ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d32:	f008 f9c3 	bl	800a0bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d36:	f7ff f8bf 	bl	8000eb8 <main>
  bx  lr    
 8001d3a:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 8001d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001d48:	0800bce0 	.word	0x0800bce0
  ldr r2, =_sbss
 8001d4c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001d50:	200030e8 	.word	0x200030e8

08001d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC_IRQHandler>
	...

08001d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <HAL_Init+0x40>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_Init+0x40>)
 8001d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_Init+0x40>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 fd0d 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d86:	200f      	movs	r0, #15
 8001d88:	f000 f808 	bl	8001d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8c:	f7ff fc8e 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_InitTick+0x54>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_InitTick+0x58>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 fd25 	bl	800280a <HAL_SYSTICK_Config>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00e      	b.n	8001de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d80a      	bhi.n	8001de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f000 fced 	bl	80027b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ddc:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <HAL_InitTick+0x5c>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000008 	.word	0x20000008
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	20001390 	.word	0x20001390

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20001390 	.word	0x20001390

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008

08001e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e033      	b.n	8001f02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff fc2a 	bl	80016fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d118      	bne.n	8001ef4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eca:	f023 0302 	bic.w	r3, r3, #2
 8001ece:	f043 0202 	orr.w	r2, r3, #2
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fa96 	bl	8002408 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f023 0303 	bic.w	r3, r3, #3
 8001eea:	f043 0201 	orr.w	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef2:	e001      	b.n	8001ef8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Start+0x1a>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e097      	b.n	8002056 <HAL_ADC_Start+0x14a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d018      	beq.n	8001f6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4c:	4b45      	ldr	r3, [pc, #276]	; (8002064 <HAL_ADC_Start+0x158>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a45      	ldr	r2, [pc, #276]	; (8002068 <HAL_ADC_Start+0x15c>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0c9a      	lsrs	r2, r3, #18
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f60:	e002      	b.n	8001f68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f9      	bne.n	8001f62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d15f      	bne.n	800203c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fba:	d106      	bne.n	8001fca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	f023 0206 	bic.w	r2, r3, #6
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44
 8001fc8:	e002      	b.n	8001fd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd8:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_ADC_Start+0x160>)
 8001fda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10f      	bne.n	8002012 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d129      	bne.n	8002054 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	e020      	b.n	8002054 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a16      	ldr	r2, [pc, #88]	; (8002070 <HAL_ADC_Start+0x164>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d11b      	bne.n	8002054 <HAL_ADC_Start+0x148>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d114      	bne.n	8002054 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	e00b      	b.n	8002054 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f043 0210 	orr.w	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000000 	.word	0x20000000
 8002068:	431bde83 	.word	0x431bde83
 800206c:	40012300 	.word	0x40012300
 8002070:	40012000 	.word	0x40012000

08002074 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002090:	d113      	bne.n	80020ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800209c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a0:	d10b      	bne.n	80020ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f043 0220 	orr.w	r2, r3, #32
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e063      	b.n	8002182 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020ba:	f7ff feb3 	bl	8001e24 <HAL_GetTick>
 80020be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020c0:	e021      	b.n	8002106 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d01d      	beq.n	8002106 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_ADC_PollForConversion+0x6c>
 80020d0:	f7ff fea8 	bl	8001e24 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d212      	bcs.n	8002106 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d00b      	beq.n	8002106 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f043 0204 	orr.w	r2, r3, #4
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e03d      	b.n	8002182 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b02      	cmp	r3, #2
 8002112:	d1d6      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0212 	mvn.w	r2, #18
 800211c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d123      	bne.n	8002180 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800213c:	2b00      	cmp	r3, #0
 800213e:	d11f      	bne.n	8002180 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002158:	2b00      	cmp	r3, #0
 800215a:	d111      	bne.n	8002180 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f043 0201 	orr.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x1c>
 80021bc:	2302      	movs	r3, #2
 80021be:	e113      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x244>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b09      	cmp	r3, #9
 80021ce:	d925      	bls.n	800221c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68d9      	ldr	r1, [r3, #12]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	3b1e      	subs	r3, #30
 80021e6:	2207      	movs	r2, #7
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43da      	mvns	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	400a      	ands	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68d9      	ldr	r1, [r3, #12]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	4618      	mov	r0, r3
 8002208:	4603      	mov	r3, r0
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4403      	add	r3, r0
 800220e:	3b1e      	subs	r3, #30
 8002210:	409a      	lsls	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	e022      	b.n	8002262 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6919      	ldr	r1, [r3, #16]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	2207      	movs	r2, #7
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	400a      	ands	r2, r1
 800223e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6919      	ldr	r1, [r3, #16]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	4618      	mov	r0, r3
 8002252:	4603      	mov	r3, r0
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4403      	add	r3, r0
 8002258:	409a      	lsls	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b06      	cmp	r3, #6
 8002268:	d824      	bhi.n	80022b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b05      	subs	r3, #5
 800227c:	221f      	movs	r2, #31
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	400a      	ands	r2, r1
 800228a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b05      	subs	r3, #5
 80022a6:	fa00 f203 	lsl.w	r2, r0, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34
 80022b2:	e04c      	b.n	800234e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d824      	bhi.n	8002306 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b23      	subs	r3, #35	; 0x23
 80022ce:	221f      	movs	r2, #31
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43da      	mvns	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	400a      	ands	r2, r1
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b23      	subs	r3, #35	; 0x23
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
 8002304:	e023      	b.n	800234e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	3b41      	subs	r3, #65	; 0x41
 8002318:	221f      	movs	r2, #31
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	400a      	ands	r2, r1
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b41      	subs	r3, #65	; 0x41
 8002342:	fa00 f203 	lsl.w	r2, r0, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_ADC_ConfigChannel+0x250>)
 8002350:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <HAL_ADC_ConfigChannel+0x254>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d10f      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1d8>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b12      	cmp	r3, #18
 8002362:	d10b      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_ADC_ConfigChannel+0x254>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d12b      	bne.n	80023de <HAL_ADC_ConfigChannel+0x23a>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <HAL_ADC_ConfigChannel+0x258>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d003      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x1f4>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b11      	cmp	r3, #17
 8002396:	d122      	bne.n	80023de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <HAL_ADC_ConfigChannel+0x258>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d111      	bne.n	80023de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_ADC_ConfigChannel+0x25c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a11      	ldr	r2, [pc, #68]	; (8002404 <HAL_ADC_ConfigChannel+0x260>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	0c9a      	lsrs	r2, r3, #18
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40012300 	.word	0x40012300
 80023f8:	40012000 	.word	0x40012000
 80023fc:	10000012 	.word	0x10000012
 8002400:	20000000 	.word	0x20000000
 8002404:	431bde83 	.word	0x431bde83

08002408 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002410:	4b79      	ldr	r3, [pc, #484]	; (80025f8 <ADC_Init+0x1f0>)
 8002412:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	431a      	orrs	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800243c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	021a      	lsls	r2, r3, #8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	4a58      	ldr	r2, [pc, #352]	; (80025fc <ADC_Init+0x1f4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d022      	beq.n	80024e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6899      	ldr	r1, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6899      	ldr	r1, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	e00f      	b.n	8002506 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002504:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0202 	bic.w	r2, r2, #2
 8002514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6899      	ldr	r1, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7e1b      	ldrb	r3, [r3, #24]
 8002520:	005a      	lsls	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002542:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002552:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6859      	ldr	r1, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	3b01      	subs	r3, #1
 8002560:	035a      	lsls	r2, r3, #13
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	e007      	b.n	800257c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	3b01      	subs	r3, #1
 8002598:	051a      	lsls	r2, r3, #20
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6899      	ldr	r1, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025be:	025a      	lsls	r2, r3, #9
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6899      	ldr	r1, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	029a      	lsls	r2, r3, #10
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40012300 	.word	0x40012300
 80025fc:	0f000001 	.word	0x0f000001

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <__NVIC_EnableIRQ+0x38>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100

080026a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db0a      	blt.n	80026ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	; (80026ec <__NVIC_SetPriority+0x4c>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	440b      	add	r3, r1
 80026c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c8:	e00a      	b.n	80026e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4908      	ldr	r1, [pc, #32]	; (80026f0 <__NVIC_SetPriority+0x50>)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3b04      	subs	r3, #4
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	440b      	add	r3, r1
 80026de:	761a      	strb	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f1c3 0307 	rsb	r3, r3, #7
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf28      	it	cs
 8002712:	2304      	movcs	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3304      	adds	r3, #4
 800271a:	2b06      	cmp	r3, #6
 800271c:	d902      	bls.n	8002724 <NVIC_EncodePriority+0x30>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3b03      	subs	r3, #3
 8002722:	e000      	b.n	8002726 <NVIC_EncodePriority+0x32>
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800273c:	f04f 31ff 	mov.w	r1, #4294967295
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43d9      	mvns	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	4313      	orrs	r3, r2
         );
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276c:	d301      	bcc.n	8002772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <SysTick_Config+0x40>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277a:	210f      	movs	r1, #15
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f7ff ff8e 	bl	80026a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SysTick_Config+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <SysTick_Config+0x40>)
 800278c:	2207      	movs	r2, #7
 800278e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff29 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff3e 	bl	8002648 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff8e 	bl	80026f4 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5d 	bl	80026a0 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff31 	bl	8002664 <__NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffa2 	bl	800275c <SysTick_Config>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	; 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	e159      	b.n	8002af4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002840:	2201      	movs	r2, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	f040 8148 	bne.w	8002aee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d005      	beq.n	8002876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002872:	2b02      	cmp	r3, #2
 8002874:	d130      	bne.n	80028d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	2203      	movs	r2, #3
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ac:	2201      	movs	r2, #1
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 0201 	and.w	r2, r3, #1
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d017      	beq.n	8002914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d123      	bne.n	8002968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	08da      	lsrs	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3208      	adds	r2, #8
 8002928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	220f      	movs	r2, #15
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	08da      	lsrs	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3208      	adds	r2, #8
 8002962:	69b9      	ldr	r1, [r7, #24]
 8002964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2203      	movs	r2, #3
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0203 	and.w	r2, r3, #3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a2 	beq.w	8002aee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b57      	ldr	r3, [pc, #348]	; (8002b0c <HAL_GPIO_Init+0x2e8>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a56      	ldr	r2, [pc, #344]	; (8002b0c <HAL_GPIO_Init+0x2e8>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <HAL_GPIO_Init+0x2e8>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029c6:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_GPIO_Init+0x2ec>)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	3302      	adds	r3, #2
 80029ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	220f      	movs	r2, #15
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a49      	ldr	r2, [pc, #292]	; (8002b14 <HAL_GPIO_Init+0x2f0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d019      	beq.n	8002a26 <HAL_GPIO_Init+0x202>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a48      	ldr	r2, [pc, #288]	; (8002b18 <HAL_GPIO_Init+0x2f4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_GPIO_Init+0x1fe>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a47      	ldr	r2, [pc, #284]	; (8002b1c <HAL_GPIO_Init+0x2f8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00d      	beq.n	8002a1e <HAL_GPIO_Init+0x1fa>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a46      	ldr	r2, [pc, #280]	; (8002b20 <HAL_GPIO_Init+0x2fc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <HAL_GPIO_Init+0x1f6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a45      	ldr	r2, [pc, #276]	; (8002b24 <HAL_GPIO_Init+0x300>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_GPIO_Init+0x1f2>
 8002a12:	2304      	movs	r3, #4
 8002a14:	e008      	b.n	8002a28 <HAL_GPIO_Init+0x204>
 8002a16:	2307      	movs	r3, #7
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x204>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e004      	b.n	8002a28 <HAL_GPIO_Init+0x204>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_Init+0x204>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x204>
 8002a26:	2300      	movs	r3, #0
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	f002 0203 	and.w	r2, r2, #3
 8002a2e:	0092      	lsls	r2, r2, #2
 8002a30:	4093      	lsls	r3, r2
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a38:	4935      	ldr	r1, [pc, #212]	; (8002b10 <HAL_GPIO_Init+0x2ec>)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a46:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6a:	4a2f      	ldr	r2, [pc, #188]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a70:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a94:	4a24      	ldr	r2, [pc, #144]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a9a:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002abe:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae8:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3301      	adds	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	f67f aea2 	bls.w	8002840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40013800 	.word	0x40013800
 8002b14:	40020000 	.word	0x40020000
 8002b18:	40020400 	.word	0x40020400
 8002b1c:	40020800 	.word	0x40020800
 8002b20:	40020c00 	.word	0x40020c00
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40013c00 	.word	0x40013c00

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d006      	beq.n	8002b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b76:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f806 	bl	8002b90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40013c00 	.word	0x40013c00

08002b90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e12b      	b.n	8002e12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe fdd8 	bl	8001784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2224      	movs	r2, #36	; 0x24
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c0c:	f001 ffbe 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8002c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4a81      	ldr	r2, [pc, #516]	; (8002e1c <HAL_I2C_Init+0x274>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d807      	bhi.n	8002c2c <HAL_I2C_Init+0x84>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a80      	ldr	r2, [pc, #512]	; (8002e20 <HAL_I2C_Init+0x278>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bf94      	ite	ls
 8002c24:	2301      	movls	r3, #1
 8002c26:	2300      	movhi	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e006      	b.n	8002c3a <HAL_I2C_Init+0x92>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a7d      	ldr	r2, [pc, #500]	; (8002e24 <HAL_I2C_Init+0x27c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bf94      	ite	ls
 8002c34:	2301      	movls	r3, #1
 8002c36:	2300      	movhi	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0e7      	b.n	8002e12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a78      	ldr	r2, [pc, #480]	; (8002e28 <HAL_I2C_Init+0x280>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0c9b      	lsrs	r3, r3, #18
 8002c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a6a      	ldr	r2, [pc, #424]	; (8002e1c <HAL_I2C_Init+0x274>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d802      	bhi.n	8002c7c <HAL_I2C_Init+0xd4>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	e009      	b.n	8002c90 <HAL_I2C_Init+0xe8>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	4a69      	ldr	r2, [pc, #420]	; (8002e2c <HAL_I2C_Init+0x284>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	3301      	adds	r3, #1
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ca2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	495c      	ldr	r1, [pc, #368]	; (8002e1c <HAL_I2C_Init+0x274>)
 8002cac:	428b      	cmp	r3, r1
 8002cae:	d819      	bhi.n	8002ce4 <HAL_I2C_Init+0x13c>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1e59      	subs	r1, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cbe:	1c59      	adds	r1, r3, #1
 8002cc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cc4:	400b      	ands	r3, r1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_I2C_Init+0x138>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1e59      	subs	r1, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cde:	e051      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	e04f      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d111      	bne.n	8002d10 <HAL_I2C_Init+0x168>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1e58      	subs	r0, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	440b      	add	r3, r1
 8002cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e012      	b.n	8002d36 <HAL_I2C_Init+0x18e>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1e58      	subs	r0, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	0099      	lsls	r1, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Init+0x196>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e022      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10e      	bne.n	8002d64 <HAL_I2C_Init+0x1bc>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1e58      	subs	r0, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6859      	ldr	r1, [r3, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	440b      	add	r3, r1
 8002d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d62:	e00f      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e58      	subs	r0, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	0099      	lsls	r1, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	6809      	ldr	r1, [r1, #0]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6911      	ldr	r1, [r2, #16]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68d2      	ldr	r2, [r2, #12]
 8002dbe:	4311      	orrs	r1, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	000186a0 	.word	0x000186a0
 8002e20:	001e847f 	.word	0x001e847f
 8002e24:	003d08ff 	.word	0x003d08ff
 8002e28:	431bde83 	.word	0x431bde83
 8002e2c:	10624dd3 	.word	0x10624dd3

08002e30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e32:	b08f      	sub	sp, #60	; 0x3c
 8002e34:	af0a      	add	r7, sp, #40	; 0x28
 8002e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e10f      	b.n	8003062 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f006 fde1 	bl	8009a24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 f8c8 	bl	8006016 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	687e      	ldr	r6, [r7, #4]
 8002e8e:	466d      	mov	r5, sp
 8002e90:	f106 0410 	add.w	r4, r6, #16
 8002e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ea0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ea4:	1d33      	adds	r3, r6, #4
 8002ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea8:	6838      	ldr	r0, [r7, #0]
 8002eaa:	f002 ff9f 	bl	8005dec <USB_CoreInit>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0d0      	b.n	8003062 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 f8b6 	bl	8006038 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e04a      	b.n	8002f68 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	333d      	adds	r3, #61	; 0x3d
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	333c      	adds	r3, #60	; 0x3c
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	b298      	uxth	r0, r3
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3344      	adds	r3, #68	; 0x44
 8002f0e:	4602      	mov	r2, r0
 8002f10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	3340      	adds	r3, #64	; 0x40
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3348      	adds	r3, #72	; 0x48
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	334c      	adds	r3, #76	; 0x4c
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3354      	adds	r3, #84	; 0x54
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	3301      	adds	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d3af      	bcc.n	8002ed2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
 8002f76:	e044      	b.n	8003002 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	3301      	adds	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	d3b5      	bcc.n	8002f78 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	687e      	ldr	r6, [r7, #4]
 8003014:	466d      	mov	r5, sp
 8003016:	f106 0410 	add.w	r4, r6, #16
 800301a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003022:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003026:	e885 0003 	stmia.w	r5, {r0, r1}
 800302a:	1d33      	adds	r3, r6, #4
 800302c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	f003 f84e 	bl	80060d0 <USB_DevInit>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e00d      	b.n	8003062 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f004 f99d 	bl	800739a <USB_DevDisconnect>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800306a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_PCD_Start+0x1c>
 8003082:	2302      	movs	r3, #2
 8003084:	e020      	b.n	80030c8 <HAL_PCD_Start+0x5e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	2b01      	cmp	r3, #1
 8003094:	d109      	bne.n	80030aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800309a:	2b01      	cmp	r3, #1
 800309c:	d005      	beq.n	80030aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 ffa0 	bl	8005ff4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f004 f94d 	bl	8007358 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b08d      	sub	sp, #52	; 0x34
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f004 fa0b 	bl	8007502 <USB_GetMode>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f040 848a 	bne.w	8003a08 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f004 f96f 	bl	80073dc <USB_ReadInterrupts>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8480 	beq.w	8003a06 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f004 f95c 	bl	80073dc <USB_ReadInterrupts>
 8003124:	4603      	mov	r3, r0
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b02      	cmp	r3, #2
 800312c:	d107      	bne.n	800313e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f002 0202 	and.w	r2, r2, #2
 800313c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f004 f94a 	bl	80073dc <USB_ReadInterrupts>
 8003148:	4603      	mov	r3, r0
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b10      	cmp	r3, #16
 8003150:	d161      	bne.n	8003216 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0210 	bic.w	r2, r2, #16
 8003160:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	0c5b      	lsrs	r3, r3, #17
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	2b02      	cmp	r3, #2
 800318c:	d124      	bne.n	80031d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d035      	beq.n	8003206 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	6a38      	ldr	r0, [r7, #32]
 80031ae:	f003 ff81 	bl	80070b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031be:	441a      	add	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	6a1a      	ldr	r2, [r3, #32]
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031d0:	441a      	add	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	621a      	str	r2, [r3, #32]
 80031d6:	e016      	b.n	8003206 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	0c5b      	lsrs	r3, r3, #17
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	2b06      	cmp	r3, #6
 80031e2:	d110      	bne.n	8003206 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031ea:	2208      	movs	r2, #8
 80031ec:	4619      	mov	r1, r3
 80031ee:	6a38      	ldr	r0, [r7, #32]
 80031f0:	f003 ff60 	bl	80070b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	6a1a      	ldr	r2, [r3, #32]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003200:	441a      	add	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0210 	orr.w	r2, r2, #16
 8003214:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f004 f8de 	bl	80073dc <USB_ReadInterrupts>
 8003220:	4603      	mov	r3, r0
 8003222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003226:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800322a:	f040 80a7 	bne.w	800337c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f004 f8e3 	bl	8007402 <USB_ReadDevAllOutEpInterrupt>
 800323c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800323e:	e099      	b.n	8003374 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 808e 	beq.w	8003368 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f004 f907 	bl	800746a <USB_ReadDevOutEPInterrupt>
 800325c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00c      	beq.n	8003282 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	461a      	mov	r2, r3
 8003276:	2301      	movs	r3, #1
 8003278:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800327a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fec3 	bl	8004008 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00c      	beq.n	80032a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003298:	461a      	mov	r2, r3
 800329a:	2308      	movs	r3, #8
 800329c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800329e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 ff99 	bl	80041d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032bc:	461a      	mov	r2, r3
 80032be:	2310      	movs	r3, #16
 80032c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d030      	beq.n	800332e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d4:	2b80      	cmp	r3, #128	; 0x80
 80032d6:	d109      	bne.n	80032ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	3304      	adds	r3, #4
 8003300:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	78db      	ldrb	r3, [r3, #3]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d108      	bne.n	800331c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	b2db      	uxtb	r3, r3
 8003314:	4619      	mov	r1, r3
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f006 fc80 	bl	8009c1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003328:	461a      	mov	r2, r3
 800332a:	2302      	movs	r3, #2
 800332c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003344:	461a      	mov	r2, r3
 8003346:	2320      	movs	r3, #32
 8003348:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003360:	461a      	mov	r2, r3
 8003362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003366:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	3301      	adds	r3, #1
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	2b00      	cmp	r3, #0
 8003378:	f47f af62 	bne.w	8003240 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f004 f82b 	bl	80073dc <USB_ReadInterrupts>
 8003386:	4603      	mov	r3, r0
 8003388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003390:	f040 80db 	bne.w	800354a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f004 f84c 	bl	8007436 <USB_ReadDevAllInEpInterrupt>
 800339e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80033a4:	e0cd      	b.n	8003542 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80c2 	beq.w	8003536 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f004 f872 	bl	80074a6 <USB_ReadDevInEPInterrupt>
 80033c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d057      	beq.n	800347e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	2201      	movs	r2, #1
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69f9      	ldr	r1, [r7, #28]
 80033ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ee:	4013      	ands	r3, r2
 80033f0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fe:	461a      	mov	r2, r3
 8003400:	2301      	movs	r3, #1
 8003402:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d132      	bne.n	8003472 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	334c      	adds	r3, #76	; 0x4c
 800341c:	6819      	ldr	r1, [r3, #0]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4403      	add	r3, r0
 800342c:	3348      	adds	r3, #72	; 0x48
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4419      	add	r1, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4403      	add	r3, r0
 8003440:	334c      	adds	r3, #76	; 0x4c
 8003442:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d113      	bne.n	8003472 <HAL_PCD_IRQHandler+0x3a2>
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3354      	adds	r3, #84	; 0x54
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d108      	bne.n	8003472 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800346a:	461a      	mov	r2, r3
 800346c:	2101      	movs	r1, #1
 800346e:	f004 f879 	bl	8007564 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	b2db      	uxtb	r3, r3
 8003476:	4619      	mov	r1, r3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f006 fb54 	bl	8009b26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003494:	461a      	mov	r2, r3
 8003496:	2308      	movs	r3, #8
 8003498:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b0:	461a      	mov	r2, r3
 80034b2:	2310      	movs	r3, #16
 80034b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034cc:	461a      	mov	r2, r3
 80034ce:	2340      	movs	r3, #64	; 0x40
 80034d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d023      	beq.n	8003524 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80034dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034de:	6a38      	ldr	r0, [r7, #32]
 80034e0:	f002 ff5a 	bl	8006398 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80034e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	3338      	adds	r3, #56	; 0x38
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4413      	add	r3, r2
 80034f4:	3304      	adds	r3, #4
 80034f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	78db      	ldrb	r3, [r3, #3]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d108      	bne.n	8003512 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2200      	movs	r2, #0
 8003504:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	b2db      	uxtb	r3, r3
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f006 fb97 	bl	8009c40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351e:	461a      	mov	r2, r3
 8003520:	2302      	movs	r3, #2
 8003522:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800352e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fcdb 	bl	8003eec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	3301      	adds	r3, #1
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	f47f af2e 	bne.w	80033a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f003 ff44 	bl	80073dc <USB_ReadInterrupts>
 8003554:	4603      	mov	r3, r0
 8003556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800355a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800355e:	d122      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800357a:	2b01      	cmp	r3, #1
 800357c:	d108      	bne.n	8003590 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003586:	2100      	movs	r1, #0
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fec3 	bl	8004314 <HAL_PCDEx_LPM_Callback>
 800358e:	e002      	b.n	8003596 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f006 fb35 	bl	8009c00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f003 ff16 	bl	80073dc <USB_ReadInterrupts>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ba:	d112      	bne.n	80035e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d102      	bne.n	80035d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f006 faf1 	bl	8009bb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f003 fef8 	bl	80073dc <USB_ReadInterrupts>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f6:	f040 80b7 	bne.w	8003768 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2110      	movs	r1, #16
 8003614:	4618      	mov	r0, r3
 8003616:	f002 febf 	bl	8006398 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361a:	2300      	movs	r3, #0
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361e:	e046      	b.n	80036ae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362c:	461a      	mov	r2, r3
 800362e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003632:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003644:	0151      	lsls	r1, r2, #5
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	440a      	add	r2, r1
 800364a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800364e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003652:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003660:	461a      	mov	r2, r3
 8003662:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003666:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003678:	0151      	lsls	r1, r2, #5
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	440a      	add	r2, r1
 800367e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003686:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003698:	0151      	lsls	r1, r2, #5
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	440a      	add	r2, r1
 800369e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	3301      	adds	r3, #1
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d3b3      	bcc.n	8003620 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d016      	beq.n	8003702 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e4:	f043 030b 	orr.w	r3, r3, #11
 80036e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036fa:	f043 030b 	orr.w	r3, r3, #11
 80036fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003700:	e015      	b.n	800372e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003710:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003714:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003718:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003728:	f043 030b 	orr.w	r3, r3, #11
 800372c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800373c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003740:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003752:	461a      	mov	r2, r3
 8003754:	f003 ff06 	bl	8007564 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f003 fe35 	bl	80073dc <USB_ReadInterrupts>
 8003772:	4603      	mov	r3, r0
 8003774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800377c:	d124      	bne.n	80037c8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f003 fecb 	bl	800751e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f002 fe80 	bl	8006492 <USB_GetDevSpeed>
 8003792:	4603      	mov	r3, r0
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681c      	ldr	r4, [r3, #0]
 800379e:	f001 f9e9 	bl	8004b74 <HAL_RCC_GetHCLKFreq>
 80037a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	4620      	mov	r0, r4
 80037ae:	f002 fb7f 	bl	8005eb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f006 f9df 	bl	8009b76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 fe05 	bl	80073dc <USB_ReadInterrupts>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d10a      	bne.n	80037f2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f006 f9bc 	bl	8009b5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f002 0208 	and.w	r2, r2, #8
 80037f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f003 fdf0 	bl	80073dc <USB_ReadInterrupts>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d122      	bne.n	800384c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003812:	2301      	movs	r3, #1
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	e014      	b.n	8003842 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d105      	bne.n	800383c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	b2db      	uxtb	r3, r3
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fb27 	bl	8003e8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	3301      	adds	r3, #1
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	429a      	cmp	r2, r3
 800384a:	d3e5      	bcc.n	8003818 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f003 fdc3 	bl	80073dc <USB_ReadInterrupts>
 8003856:	4603      	mov	r3, r0
 8003858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003860:	d13b      	bne.n	80038da <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003862:	2301      	movs	r3, #1
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	e02b      	b.n	80038c0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	3340      	adds	r3, #64	; 0x40
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d115      	bne.n	80038ba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800388e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003890:	2b00      	cmp	r3, #0
 8003892:	da12      	bge.n	80038ba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	333f      	adds	r3, #63	; 0x3f
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fae8 	bl	8003e8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	3301      	adds	r3, #1
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d3ce      	bcc.n	8003868 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f003 fd7c 	bl	80073dc <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038ee:	d155      	bne.n	800399c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038f0:	2301      	movs	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	e045      	b.n	8003982 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d12e      	bne.n	800397c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800391e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003920:	2b00      	cmp	r3, #0
 8003922:	da2b      	bge.n	800397c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003930:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003934:	429a      	cmp	r2, r3
 8003936:	d121      	bne.n	800397c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003978:	6053      	str	r3, [r2, #4]
            break;
 800397a:	e007      	b.n	800398c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	3301      	adds	r3, #1
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003988:	429a      	cmp	r2, r3
 800398a:	d3b4      	bcc.n	80038f6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800399a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f003 fd1b 	bl	80073dc <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b0:	d10a      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f006 f956 	bl	8009c64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 fd05 	bl	80073dc <USB_ReadInterrupts>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d115      	bne.n	8003a08 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f006 f946 	bl	8009c80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	e000      	b.n	8003a08 <HAL_PCD_IRQHandler+0x938>
      return;
 8003a06:	bf00      	nop
    }
  }
}
 8003a08:	3734      	adds	r7, #52	; 0x34
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd90      	pop	{r4, r7, pc}

08003a0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	460b      	mov	r3, r1
 8003a18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_PCD_SetAddress+0x1a>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e013      	b.n	8003a50 <HAL_PCD_SetAddress+0x42>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f003 fc63 	bl	800730c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	4608      	mov	r0, r1
 8003a62:	4611      	mov	r1, r2
 8003a64:	461a      	mov	r2, r3
 8003a66:	4603      	mov	r3, r0
 8003a68:	70fb      	strb	r3, [r7, #3]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	803b      	strh	r3, [r7, #0]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	da0f      	bge.n	8003a9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	f003 020f 	and.w	r2, r3, #15
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	3338      	adds	r3, #56	; 0x38
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	3304      	adds	r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	705a      	strb	r2, [r3, #1]
 8003a9c:	e00f      	b.n	8003abe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a9e:	78fb      	ldrb	r3, [r7, #3]
 8003aa0:	f003 020f 	and.w	r2, r3, #15
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003aca:	883a      	ldrh	r2, [r7, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	78ba      	ldrb	r2, [r7, #2]
 8003ad4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	785b      	ldrb	r3, [r3, #1]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ae8:	78bb      	ldrb	r3, [r7, #2]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d102      	bne.n	8003af4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_PCD_EP_Open+0xaa>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e00e      	b.n	8003b20 <HAL_PCD_EP_Open+0xc8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68f9      	ldr	r1, [r7, #12]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f002 fce3 	bl	80064dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	da0f      	bge.n	8003b5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	f003 020f 	and.w	r2, r3, #15
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	3338      	adds	r3, #56	; 0x38
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	3304      	adds	r3, #4
 8003b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	705a      	strb	r2, [r3, #1]
 8003b5a:	e00f      	b.n	8003b7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	f003 020f 	and.w	r2, r3, #15
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	3304      	adds	r3, #4
 8003b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_PCD_EP_Close+0x6e>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e00e      	b.n	8003bb4 <HAL_PCD_EP_Close+0x8c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68f9      	ldr	r1, [r7, #12]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f002 fd21 	bl	80065ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bcc:	7afb      	ldrb	r3, [r7, #11]
 8003bce:	f003 020f 	and.w	r2, r3, #15
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4413      	add	r3, r2
 8003be2:	3304      	adds	r3, #4
 8003be4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfe:	7afb      	ldrb	r3, [r7, #11]
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d102      	bne.n	8003c18 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c18:	7afb      	ldrb	r3, [r7, #11]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6979      	ldr	r1, [r7, #20]
 8003c30:	f003 f800 	bl	8006c34 <USB_EP0StartXfer>
 8003c34:	e008      	b.n	8003c48 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	6979      	ldr	r1, [r7, #20]
 8003c44:	f002 fdae 	bl	80067a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	f003 020f 	and.w	r2, r3, #15
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003c74:	681b      	ldr	r3, [r3, #0]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b086      	sub	sp, #24
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c92:	7afb      	ldrb	r3, [r7, #11]
 8003c94:	f003 020f 	and.w	r2, r3, #15
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	3338      	adds	r3, #56	; 0x38
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc2:	7afb      	ldrb	r3, [r7, #11]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d102      	bne.n	8003cdc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cdc:	7afb      	ldrb	r3, [r7, #11]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6979      	ldr	r1, [r7, #20]
 8003cf4:	f002 ff9e 	bl	8006c34 <USB_EP0StartXfer>
 8003cf8:	e008      	b.n	8003d0c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	6979      	ldr	r1, [r7, #20]
 8003d08:	f002 fd4c 	bl	80067a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	f003 020f 	and.w	r2, r3, #15
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d901      	bls.n	8003d34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e050      	b.n	8003dd6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	da0f      	bge.n	8003d5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	f003 020f 	and.w	r2, r3, #15
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	3338      	adds	r3, #56	; 0x38
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4413      	add	r3, r2
 8003d50:	3304      	adds	r3, #4
 8003d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	705a      	strb	r2, [r3, #1]
 8003d5a:	e00d      	b.n	8003d78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3304      	adds	r3, #4
 8003d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_PCD_EP_SetStall+0x82>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e01e      	b.n	8003dd6 <HAL_PCD_EP_SetStall+0xc0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68f9      	ldr	r1, [r7, #12]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f003 f9dc 	bl	8007164 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	b2d9      	uxtb	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f003 fbcc 	bl	8007564 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	f003 020f 	and.w	r2, r3, #15
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d901      	bls.n	8003dfc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e042      	b.n	8003e82 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	da0f      	bge.n	8003e24 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 020f 	and.w	r2, r3, #15
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	3338      	adds	r3, #56	; 0x38
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4413      	add	r3, r2
 8003e18:	3304      	adds	r3, #4
 8003e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	705a      	strb	r2, [r3, #1]
 8003e22:	e00f      	b.n	8003e44 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 020f 	and.w	r2, r3, #15
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_PCD_EP_ClrStall+0x86>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e00e      	b.n	8003e82 <HAL_PCD_EP_ClrStall+0xa4>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f003 f9e4 	bl	8007240 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	da0c      	bge.n	8003eb8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	f003 020f 	and.w	r2, r3, #15
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	3338      	adds	r3, #56	; 0x38
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	e00c      	b.n	8003ed2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	f003 020f 	and.w	r2, r3, #15
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	3304      	adds	r3, #4
 8003ed0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f003 f803 	bl	8006ee4 <USB_EPStopXfer>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ee2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	3338      	adds	r3, #56	; 0x38
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4413      	add	r3, r2
 8003f10:	3304      	adds	r3, #4
 8003f12:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a1a      	ldr	r2, [r3, #32]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d901      	bls.n	8003f24 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e06c      	b.n	8003ffe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d902      	bls.n	8003f40 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	3303      	adds	r3, #3
 8003f44:	089b      	lsrs	r3, r3, #2
 8003f46:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f48:	e02b      	b.n	8003fa2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d902      	bls.n	8003f66 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3303      	adds	r3, #3
 8003f6a:	089b      	lsrs	r3, r3, #2
 8003f6c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6919      	ldr	r1, [r3, #16]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	4603      	mov	r3, r0
 8003f84:	6978      	ldr	r0, [r7, #20]
 8003f86:	f003 f857 	bl	8007038 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	441a      	add	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a1a      	ldr	r2, [r3, #32]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	441a      	add	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d809      	bhi.n	8003fcc <PCD_WriteEmptyTxFifo+0xe0>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1a      	ldr	r2, [r3, #32]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d203      	bcs.n	8003fcc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1be      	bne.n	8003f4a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d811      	bhi.n	8003ffc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	2201      	movs	r2, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	6939      	ldr	r1, [r7, #16]
 8003ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	333c      	adds	r3, #60	; 0x3c
 8004020:	3304      	adds	r3, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d17b      	bne.n	8004136 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d015      	beq.n	8004074 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	4a61      	ldr	r2, [pc, #388]	; (80041d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f240 80b9 	bls.w	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80b3 	beq.w	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406a:	461a      	mov	r2, r3
 800406c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004070:	6093      	str	r3, [r2, #8]
 8004072:	e0a7      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	461a      	mov	r2, r3
 800408c:	2320      	movs	r3, #32
 800408e:	6093      	str	r3, [r2, #8]
 8004090:	e098      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 8093 	bne.w	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	4a4b      	ldr	r2, [pc, #300]	; (80041d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d90f      	bls.n	80040c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	461a      	mov	r2, r3
 80040be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c2:	6093      	str	r3, [r2, #8]
 80040c4:	e07e      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	3304      	adds	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	0159      	lsls	r1, r3, #5
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	440b      	add	r3, r1
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f2:	1ad2      	subs	r2, r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d114      	bne.n	8004128 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004110:	461a      	mov	r2, r3
 8004112:	2101      	movs	r1, #1
 8004114:	f003 fa26 	bl	8007564 <USB_EP0_OutStart>
 8004118:	e006      	b.n	8004128 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	441a      	add	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f005 fcde 	bl	8009af0 <HAL_PCD_DataOutStageCallback>
 8004134:	e046      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	4a26      	ldr	r2, [pc, #152]	; (80041d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d124      	bne.n	8004188 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004154:	461a      	mov	r2, r3
 8004156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800415a:	6093      	str	r3, [r2, #8]
 800415c:	e032      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004174:	461a      	mov	r2, r3
 8004176:	2320      	movs	r3, #32
 8004178:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	4619      	mov	r1, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f005 fcb5 	bl	8009af0 <HAL_PCD_DataOutStageCallback>
 8004186:	e01d      	b.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d114      	bne.n	80041b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d108      	bne.n	80041b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041b0:	461a      	mov	r2, r3
 80041b2:	2100      	movs	r1, #0
 80041b4:	f003 f9d6 	bl	8007564 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f005 fc96 	bl	8009af0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	4f54300a 	.word	0x4f54300a
 80041d4:	4f54310a 	.word	0x4f54310a

080041d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	333c      	adds	r3, #60	; 0x3c
 80041f0:	3304      	adds	r3, #4
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a15      	ldr	r2, [pc, #84]	; (8004260 <PCD_EP_OutSetupPacket_int+0x88>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d90e      	bls.n	800422c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004224:	461a      	mov	r2, r3
 8004226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f005 fc4d 	bl	8009acc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <PCD_EP_OutSetupPacket_int+0x88>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d90c      	bls.n	8004254 <PCD_EP_OutSetupPacket_int+0x7c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d108      	bne.n	8004254 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800424c:	461a      	mov	r2, r3
 800424e:	2101      	movs	r1, #1
 8004250:	f003 f988 	bl	8007564 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	4f54300a 	.word	0x4f54300a

08004264 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	70fb      	strb	r3, [r7, #3]
 8004270:	4613      	mov	r3, r2
 8004272:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d107      	bne.n	8004292 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004282:	883b      	ldrh	r3, [r7, #0]
 8004284:	0419      	lsls	r1, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	430a      	orrs	r2, r1
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
 8004290:	e028      	b.n	80042e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4413      	add	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	e00d      	b.n	80042c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	3340      	adds	r3, #64	; 0x40
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	4413      	add	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	3301      	adds	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	7bfa      	ldrb	r2, [r7, #15]
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d3ec      	bcc.n	80042a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042cc:	883b      	ldrh	r3, [r7, #0]
 80042ce:	0418      	lsls	r0, r3, #16
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	4302      	orrs	r2, r0
 80042dc:	3340      	adds	r3, #64	; 0x40
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	460b      	mov	r3, r1
 80042fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e267      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d075      	beq.n	8004436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800434a:	4b88      	ldr	r3, [pc, #544]	; (800456c <HAL_RCC_OscConfig+0x240>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b04      	cmp	r3, #4
 8004354:	d00c      	beq.n	8004370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004356:	4b85      	ldr	r3, [pc, #532]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800435e:	2b08      	cmp	r3, #8
 8004360:	d112      	bne.n	8004388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004362:	4b82      	ldr	r3, [pc, #520]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436e:	d10b      	bne.n	8004388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004370:	4b7e      	ldr	r3, [pc, #504]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d05b      	beq.n	8004434 <HAL_RCC_OscConfig+0x108>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d157      	bne.n	8004434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e242      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d106      	bne.n	80043a0 <HAL_RCC_OscConfig+0x74>
 8004392:	4b76      	ldr	r3, [pc, #472]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a75      	ldr	r2, [pc, #468]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e01d      	b.n	80043dc <HAL_RCC_OscConfig+0xb0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x98>
 80043aa:	4b70      	ldr	r3, [pc, #448]	; (800456c <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6f      	ldr	r2, [pc, #444]	; (800456c <HAL_RCC_OscConfig+0x240>)
 80043b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	4b6d      	ldr	r3, [pc, #436]	; (800456c <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a6c      	ldr	r2, [pc, #432]	; (800456c <HAL_RCC_OscConfig+0x240>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e00b      	b.n	80043dc <HAL_RCC_OscConfig+0xb0>
 80043c4:	4b69      	ldr	r3, [pc, #420]	; (800456c <HAL_RCC_OscConfig+0x240>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a68      	ldr	r2, [pc, #416]	; (800456c <HAL_RCC_OscConfig+0x240>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b66      	ldr	r3, [pc, #408]	; (800456c <HAL_RCC_OscConfig+0x240>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a65      	ldr	r2, [pc, #404]	; (800456c <HAL_RCC_OscConfig+0x240>)
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fd fd1e 	bl	8001e24 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fd fd1a 	bl	8001e24 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	; 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e207      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b5b      	ldr	r3, [pc, #364]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0xc0>
 800440a:	e014      	b.n	8004436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fd fd0a 	bl	8001e24 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004414:	f7fd fd06 	bl	8001e24 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e1f3      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	4b51      	ldr	r3, [pc, #324]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0xe8>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d063      	beq.n	800450a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004442:	4b4a      	ldr	r3, [pc, #296]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444e:	4b47      	ldr	r3, [pc, #284]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004456:	2b08      	cmp	r3, #8
 8004458:	d11c      	bne.n	8004494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445a:	4b44      	ldr	r3, [pc, #272]	; (800456c <HAL_RCC_OscConfig+0x240>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	4b41      	ldr	r3, [pc, #260]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_RCC_OscConfig+0x152>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e1c7      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447e:	4b3b      	ldr	r3, [pc, #236]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4937      	ldr	r1, [pc, #220]	; (800456c <HAL_RCC_OscConfig+0x240>)
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	e03a      	b.n	800450a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449c:	4b34      	ldr	r3, [pc, #208]	; (8004570 <HAL_RCC_OscConfig+0x244>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fd fcbf 	bl	8001e24 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fd fcbb 	bl	8001e24 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e1a8      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	4b2b      	ldr	r3, [pc, #172]	; (800456c <HAL_RCC_OscConfig+0x240>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c8:	4b28      	ldr	r3, [pc, #160]	; (800456c <HAL_RCC_OscConfig+0x240>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4925      	ldr	r1, [pc, #148]	; (800456c <HAL_RCC_OscConfig+0x240>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]
 80044dc:	e015      	b.n	800450a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCC_OscConfig+0x244>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fd fc9e 	bl	8001e24 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ec:	f7fd fc9a 	bl	8001e24 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e187      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d036      	beq.n	8004584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451e:	4b15      	ldr	r3, [pc, #84]	; (8004574 <HAL_RCC_OscConfig+0x248>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004524:	f7fd fc7e 	bl	8001e24 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800452c:	f7fd fc7a 	bl	8001e24 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e167      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_RCC_OscConfig+0x240>)
 8004540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x200>
 800454a:	e01b      	b.n	8004584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_RCC_OscConfig+0x248>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004552:	f7fd fc67 	bl	8001e24 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004558:	e00e      	b.n	8004578 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800455a:	f7fd fc63 	bl	8001e24 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d907      	bls.n	8004578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e150      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
 800456c:	40023800 	.word	0x40023800
 8004570:	42470000 	.word	0x42470000
 8004574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	4b88      	ldr	r3, [pc, #544]	; (800479c <HAL_RCC_OscConfig+0x470>)
 800457a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ea      	bne.n	800455a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8097 	beq.w	80046c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004592:	2300      	movs	r3, #0
 8004594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004596:	4b81      	ldr	r3, [pc, #516]	; (800479c <HAL_RCC_OscConfig+0x470>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10f      	bne.n	80045c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	4b7d      	ldr	r3, [pc, #500]	; (800479c <HAL_RCC_OscConfig+0x470>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	4a7c      	ldr	r2, [pc, #496]	; (800479c <HAL_RCC_OscConfig+0x470>)
 80045ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b0:	6413      	str	r3, [r2, #64]	; 0x40
 80045b2:	4b7a      	ldr	r3, [pc, #488]	; (800479c <HAL_RCC_OscConfig+0x470>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c2:	4b77      	ldr	r3, [pc, #476]	; (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d118      	bne.n	8004600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ce:	4b74      	ldr	r3, [pc, #464]	; (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a73      	ldr	r2, [pc, #460]	; (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045da:	f7fd fc23 	bl	8001e24 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e2:	f7fd fc1f 	bl	8001e24 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e10c      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	4b6a      	ldr	r3, [pc, #424]	; (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d106      	bne.n	8004616 <HAL_RCC_OscConfig+0x2ea>
 8004608:	4b64      	ldr	r3, [pc, #400]	; (800479c <HAL_RCC_OscConfig+0x470>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460c:	4a63      	ldr	r2, [pc, #396]	; (800479c <HAL_RCC_OscConfig+0x470>)
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6713      	str	r3, [r2, #112]	; 0x70
 8004614:	e01c      	b.n	8004650 <HAL_RCC_OscConfig+0x324>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b05      	cmp	r3, #5
 800461c:	d10c      	bne.n	8004638 <HAL_RCC_OscConfig+0x30c>
 800461e:	4b5f      	ldr	r3, [pc, #380]	; (800479c <HAL_RCC_OscConfig+0x470>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a5e      	ldr	r2, [pc, #376]	; (800479c <HAL_RCC_OscConfig+0x470>)
 8004624:	f043 0304 	orr.w	r3, r3, #4
 8004628:	6713      	str	r3, [r2, #112]	; 0x70
 800462a:	4b5c      	ldr	r3, [pc, #368]	; (800479c <HAL_RCC_OscConfig+0x470>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a5b      	ldr	r2, [pc, #364]	; (800479c <HAL_RCC_OscConfig+0x470>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6713      	str	r3, [r2, #112]	; 0x70
 8004636:	e00b      	b.n	8004650 <HAL_RCC_OscConfig+0x324>
 8004638:	4b58      	ldr	r3, [pc, #352]	; (800479c <HAL_RCC_OscConfig+0x470>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	4a57      	ldr	r2, [pc, #348]	; (800479c <HAL_RCC_OscConfig+0x470>)
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	6713      	str	r3, [r2, #112]	; 0x70
 8004644:	4b55      	ldr	r3, [pc, #340]	; (800479c <HAL_RCC_OscConfig+0x470>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	4a54      	ldr	r2, [pc, #336]	; (800479c <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 0304 	bic.w	r3, r3, #4
 800464e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d015      	beq.n	8004684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fd fbe4 	bl	8001e24 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fd fbe0 	bl	8001e24 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0cb      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	4b49      	ldr	r3, [pc, #292]	; (800479c <HAL_RCC_OscConfig+0x470>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ee      	beq.n	8004660 <HAL_RCC_OscConfig+0x334>
 8004682:	e014      	b.n	80046ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004684:	f7fd fbce 	bl	8001e24 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fd fbca 	bl	8001e24 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0b5      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a2:	4b3e      	ldr	r3, [pc, #248]	; (800479c <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ee      	bne.n	800468c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d105      	bne.n	80046c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b4:	4b39      	ldr	r3, [pc, #228]	; (800479c <HAL_RCC_OscConfig+0x470>)
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	4a38      	ldr	r2, [pc, #224]	; (800479c <HAL_RCC_OscConfig+0x470>)
 80046ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 80a1 	beq.w	800480c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ca:	4b34      	ldr	r3, [pc, #208]	; (800479c <HAL_RCC_OscConfig+0x470>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d05c      	beq.n	8004790 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d141      	bne.n	8004762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046de:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <HAL_RCC_OscConfig+0x478>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fd fb9e 	bl	8001e24 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fd fb9a 	bl	8001e24 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e087      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	4b27      	ldr	r3, [pc, #156]	; (800479c <HAL_RCC_OscConfig+0x470>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	019b      	lsls	r3, r3, #6
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	3b01      	subs	r3, #1
 8004724:	041b      	lsls	r3, r3, #16
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	491b      	ldr	r1, [pc, #108]	; (800479c <HAL_RCC_OscConfig+0x470>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <HAL_RCC_OscConfig+0x478>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473a:	f7fd fb73 	bl	8001e24 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004742:	f7fd fb6f 	bl	8001e24 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e05c      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <HAL_RCC_OscConfig+0x470>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x416>
 8004760:	e054      	b.n	800480c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_RCC_OscConfig+0x478>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004768:	f7fd fb5c 	bl	8001e24 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004770:	f7fd fb58 	bl	8001e24 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e045      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004782:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_RCC_OscConfig+0x470>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x444>
 800478e:	e03d      	b.n	800480c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e038      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
 800479c:	40023800 	.word	0x40023800
 80047a0:	40007000 	.word	0x40007000
 80047a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a8:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_RCC_OscConfig+0x4ec>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d028      	beq.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d121      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d11a      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047d8:	4013      	ands	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d111      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	3b01      	subs	r3, #1
 80047f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d107      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800

0800481c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0cc      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004830:	4b68      	ldr	r3, [pc, #416]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d90c      	bls.n	8004858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b65      	ldr	r3, [pc, #404]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b63      	ldr	r3, [pc, #396]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0b8      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004870:	4b59      	ldr	r3, [pc, #356]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a58      	ldr	r2, [pc, #352]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800487a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004888:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a52      	ldr	r2, [pc, #328]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004894:	4b50      	ldr	r3, [pc, #320]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	494d      	ldr	r1, [pc, #308]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d044      	beq.n	800493c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ba:	4b47      	ldr	r3, [pc, #284]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d119      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e07f      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d003      	beq.n	80048da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048da:	4b3f      	ldr	r3, [pc, #252]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e06f      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ea:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e067      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048fa:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 0203 	bic.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4934      	ldr	r1, [pc, #208]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800490c:	f7fd fa8a 	bl	8001e24 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	e00a      	b.n	800492a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004914:	f7fd fa86 	bl	8001e24 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e04f      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 020c 	and.w	r2, r3, #12
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	429a      	cmp	r2, r3
 800493a:	d1eb      	bne.n	8004914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800493c:	4b25      	ldr	r3, [pc, #148]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d20c      	bcs.n	8004964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004952:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e032      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4916      	ldr	r1, [pc, #88]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	490e      	ldr	r1, [pc, #56]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049a2:	f000 f821 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 80049a6:	4602      	mov	r2, r0
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	490a      	ldr	r1, [pc, #40]	; (80049dc <HAL_RCC_ClockConfig+0x1c0>)
 80049b4:	5ccb      	ldrb	r3, [r1, r3]
 80049b6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ba:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <HAL_RCC_ClockConfig+0x1c8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd f9ea 	bl	8001d9c <HAL_InitTick>

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023c00 	.word	0x40023c00
 80049d8:	40023800 	.word	0x40023800
 80049dc:	0800baac 	.word	0x0800baac
 80049e0:	20000000 	.word	0x20000000
 80049e4:	20000004 	.word	0x20000004

080049e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049ec:	b090      	sub	sp, #64	; 0x40
 80049ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
 80049f4:	2300      	movs	r3, #0
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f8:	2300      	movs	r3, #0
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a00:	4b59      	ldr	r3, [pc, #356]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d00d      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x40>
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	f200 80a1 	bhi.w	8004b54 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x34>
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d003      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a1a:	e09b      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a1c:	4b53      	ldr	r3, [pc, #332]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004a1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a20:	e09b      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a22:	4b53      	ldr	r3, [pc, #332]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a26:	e098      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a28:	4b4f      	ldr	r3, [pc, #316]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a32:	4b4d      	ldr	r3, [pc, #308]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d028      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3e:	4b4a      	ldr	r3, [pc, #296]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	2200      	movs	r2, #0
 8004a46:	623b      	str	r3, [r7, #32]
 8004a48:	627a      	str	r2, [r7, #36]	; 0x24
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a50:	2100      	movs	r1, #0
 8004a52:	4b47      	ldr	r3, [pc, #284]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a54:	fb03 f201 	mul.w	r2, r3, r1
 8004a58:	2300      	movs	r3, #0
 8004a5a:	fb00 f303 	mul.w	r3, r0, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	4a43      	ldr	r2, [pc, #268]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a62:	fba0 1202 	umull	r1, r2, r0, r2
 8004a66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a68:	460a      	mov	r2, r1
 8004a6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a6e:	4413      	add	r3, r2
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a74:	2200      	movs	r2, #0
 8004a76:	61bb      	str	r3, [r7, #24]
 8004a78:	61fa      	str	r2, [r7, #28]
 8004a7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a82:	f7fc f89b 	bl	8000bbc <__aeabi_uldivmod>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a8e:	e053      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a90:	4b35      	ldr	r3, [pc, #212]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	2200      	movs	r2, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	617a      	str	r2, [r7, #20]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004aa2:	f04f 0b00 	mov.w	fp, #0
 8004aa6:	4652      	mov	r2, sl
 8004aa8:	465b      	mov	r3, fp
 8004aaa:	f04f 0000 	mov.w	r0, #0
 8004aae:	f04f 0100 	mov.w	r1, #0
 8004ab2:	0159      	lsls	r1, r3, #5
 8004ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab8:	0150      	lsls	r0, r2, #5
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	ebb2 080a 	subs.w	r8, r2, sl
 8004ac2:	eb63 090b 	sbc.w	r9, r3, fp
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ad2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ad6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ada:	ebb2 0408 	subs.w	r4, r2, r8
 8004ade:	eb63 0509 	sbc.w	r5, r3, r9
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	00eb      	lsls	r3, r5, #3
 8004aec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004af0:	00e2      	lsls	r2, r4, #3
 8004af2:	4614      	mov	r4, r2
 8004af4:	461d      	mov	r5, r3
 8004af6:	eb14 030a 	adds.w	r3, r4, sl
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	eb45 030b 	adc.w	r3, r5, fp
 8004b00:	607b      	str	r3, [r7, #4]
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b0e:	4629      	mov	r1, r5
 8004b10:	028b      	lsls	r3, r1, #10
 8004b12:	4621      	mov	r1, r4
 8004b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b18:	4621      	mov	r1, r4
 8004b1a:	028a      	lsls	r2, r1, #10
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	2200      	movs	r2, #0
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	60fa      	str	r2, [r7, #12]
 8004b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b2c:	f7fc f846 	bl	8000bbc <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4613      	mov	r3, r2
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	3301      	adds	r3, #1
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b52:	e002      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3740      	adds	r7, #64	; 0x40
 8004b60:	46bd      	mov	sp, r7
 8004b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b66:	bf00      	nop
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	00f42400 	.word	0x00f42400
 8004b70:	017d7840 	.word	0x017d7840

08004b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b78:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000000 	.word	0x20000000

08004b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b90:	f7ff fff0 	bl	8004b74 <HAL_RCC_GetHCLKFreq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	0a9b      	lsrs	r3, r3, #10
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	4903      	ldr	r1, [pc, #12]	; (8004bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba2:	5ccb      	ldrb	r3, [r1, r3]
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	0800babc 	.word	0x0800babc

08004bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bb8:	f7ff ffdc 	bl	8004b74 <HAL_RCC_GetHCLKFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	0b5b      	lsrs	r3, r3, #13
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	4903      	ldr	r1, [pc, #12]	; (8004bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bca:	5ccb      	ldrb	r3, [r1, r3]
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	0800babc 	.word	0x0800babc

08004bdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e07b      	b.n	8004ce6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d108      	bne.n	8004c08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfe:	d009      	beq.n	8004c14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	61da      	str	r2, [r3, #28]
 8004c06:	e005      	b.n	8004c14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fc fe02 	bl	8001838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c98:	ea42 0103 	orr.w	r1, r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	0c1b      	lsrs	r3, r3, #16
 8004cb2:	f003 0104 	and.w	r1, r3, #4
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	f003 0210 	and.w	r2, r3, #16
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d001      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e044      	b.n	8004d92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1e      	ldr	r2, [pc, #120]	; (8004da0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d018      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x6c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d013      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x6c>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00e      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x6c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a19      	ldr	r2, [pc, #100]	; (8004da8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d009      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x6c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a17      	ldr	r2, [pc, #92]	; (8004dac <HAL_TIM_Base_Start_IT+0xbc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x6c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d111      	bne.n	8004d80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b06      	cmp	r3, #6
 8004d6c:	d010      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7e:	e007      	b.n	8004d90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40010000 	.word	0x40010000
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800
 8004dac:	40000c00 	.word	0x40000c00
 8004db0:	40014000 	.word	0x40014000

08004db4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e041      	b.n	8004e4a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fc fd74 	bl	80018c8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f000 fc36 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <HAL_TIM_OC_Start+0x24>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	bf14      	ite	ne
 8004e70:	2301      	movne	r3, #1
 8004e72:	2300      	moveq	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	e022      	b.n	8004ebe <HAL_TIM_OC_Start+0x6a>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d109      	bne.n	8004e92 <HAL_TIM_OC_Start+0x3e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	bf14      	ite	ne
 8004e8a:	2301      	movne	r3, #1
 8004e8c:	2300      	moveq	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	e015      	b.n	8004ebe <HAL_TIM_OC_Start+0x6a>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d109      	bne.n	8004eac <HAL_TIM_OC_Start+0x58>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	bf14      	ite	ne
 8004ea4:	2301      	movne	r3, #1
 8004ea6:	2300      	moveq	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	e008      	b.n	8004ebe <HAL_TIM_OC_Start+0x6a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e068      	b.n	8004f98 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_OC_Start+0x82>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed4:	e013      	b.n	8004efe <HAL_TIM_OC_Start+0xaa>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d104      	bne.n	8004ee6 <HAL_TIM_OC_Start+0x92>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee4:	e00b      	b.n	8004efe <HAL_TIM_OC_Start+0xaa>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d104      	bne.n	8004ef6 <HAL_TIM_OC_Start+0xa2>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef4:	e003      	b.n	8004efe <HAL_TIM_OC_Start+0xaa>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2201      	movs	r2, #1
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fe20 	bl	8005b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <HAL_TIM_OC_Start+0x14c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d107      	bne.n	8004f26 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <HAL_TIM_OC_Start+0x14c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d018      	beq.n	8004f62 <HAL_TIM_OC_Start+0x10e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f38:	d013      	beq.n	8004f62 <HAL_TIM_OC_Start+0x10e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <HAL_TIM_OC_Start+0x150>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <HAL_TIM_OC_Start+0x10e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <HAL_TIM_OC_Start+0x154>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_TIM_OC_Start+0x10e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a16      	ldr	r2, [pc, #88]	; (8004fac <HAL_TIM_OC_Start+0x158>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_TIM_OC_Start+0x10e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a14      	ldr	r2, [pc, #80]	; (8004fb0 <HAL_TIM_OC_Start+0x15c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d111      	bne.n	8004f86 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b06      	cmp	r3, #6
 8004f72:	d010      	beq.n	8004f96 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f84:	e007      	b.n	8004f96 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0201 	orr.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800
 8004fac:	40000c00 	.word	0x40000c00
 8004fb0:	40014000 	.word	0x40014000

08004fb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e041      	b.n	800504a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fc fcb0 	bl	8001940 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f000 fb36 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <HAL_TIM_PWM_Start+0x24>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	e022      	b.n	80050be <HAL_TIM_PWM_Start+0x6a>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b04      	cmp	r3, #4
 800507c:	d109      	bne.n	8005092 <HAL_TIM_PWM_Start+0x3e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b01      	cmp	r3, #1
 8005088:	bf14      	ite	ne
 800508a:	2301      	movne	r3, #1
 800508c:	2300      	moveq	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	e015      	b.n	80050be <HAL_TIM_PWM_Start+0x6a>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d109      	bne.n	80050ac <HAL_TIM_PWM_Start+0x58>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	e008      	b.n	80050be <HAL_TIM_PWM_Start+0x6a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	bf14      	ite	ne
 80050b8:	2301      	movne	r3, #1
 80050ba:	2300      	moveq	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e068      	b.n	8005198 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d104      	bne.n	80050d6 <HAL_TIM_PWM_Start+0x82>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d4:	e013      	b.n	80050fe <HAL_TIM_PWM_Start+0xaa>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_PWM_Start+0x92>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e4:	e00b      	b.n	80050fe <HAL_TIM_PWM_Start+0xaa>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_PWM_Start+0xa2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f4:	e003      	b.n	80050fe <HAL_TIM_PWM_Start+0xaa>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fd20 	bl	8005b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <HAL_TIM_PWM_Start+0x14c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d107      	bne.n	8005126 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <HAL_TIM_PWM_Start+0x14c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d018      	beq.n	8005162 <HAL_TIM_PWM_Start+0x10e>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005138:	d013      	beq.n	8005162 <HAL_TIM_PWM_Start+0x10e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <HAL_TIM_PWM_Start+0x150>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00e      	beq.n	8005162 <HAL_TIM_PWM_Start+0x10e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a17      	ldr	r2, [pc, #92]	; (80051a8 <HAL_TIM_PWM_Start+0x154>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d009      	beq.n	8005162 <HAL_TIM_PWM_Start+0x10e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a16      	ldr	r2, [pc, #88]	; (80051ac <HAL_TIM_PWM_Start+0x158>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d004      	beq.n	8005162 <HAL_TIM_PWM_Start+0x10e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a14      	ldr	r2, [pc, #80]	; (80051b0 <HAL_TIM_PWM_Start+0x15c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d111      	bne.n	8005186 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b06      	cmp	r3, #6
 8005172:	d010      	beq.n	8005196 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005184:	e007      	b.n	8005196 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	40014000 	.word	0x40014000

080051b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d122      	bne.n	8005210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d11b      	bne.n	8005210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0202 	mvn.w	r2, #2
 80051e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa16 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa08 	bl	8005614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fa19 	bl	800563c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b04      	cmp	r3, #4
 800521c:	d122      	bne.n	8005264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b04      	cmp	r3, #4
 800522a:	d11b      	bne.n	8005264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0204 	mvn.w	r2, #4
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9ec 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9de 	bl	8005614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9ef 	bl	800563c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b08      	cmp	r3, #8
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b08      	cmp	r3, #8
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0208 	mvn.w	r2, #8
 8005288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2204      	movs	r2, #4
 800528e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f9c2 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f9b4 	bl	8005614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f9c5 	bl	800563c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b10      	cmp	r3, #16
 80052c4:	d122      	bne.n	800530c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d11b      	bne.n	800530c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0210 	mvn.w	r2, #16
 80052dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2208      	movs	r2, #8
 80052e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f998 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f98a 	bl	8005614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f99b 	bl	800563c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	d10e      	bne.n	8005338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d107      	bne.n	8005338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0201 	mvn.w	r2, #1
 8005330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f964 	bl	8005600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b80      	cmp	r3, #128	; 0x80
 8005344:	d10e      	bne.n	8005364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005350:	2b80      	cmp	r3, #128	; 0x80
 8005352:	d107      	bne.n	8005364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800535c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fd3a 	bl	8005dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d10e      	bne.n	8005390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	2b40      	cmp	r3, #64	; 0x40
 800537e:	d107      	bne.n	8005390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f960 	bl	8005650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b20      	cmp	r3, #32
 800539c:	d10e      	bne.n	80053bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d107      	bne.n	80053bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0220 	mvn.w	r2, #32
 80053b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fd04 	bl	8005dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80053de:	2302      	movs	r3, #2
 80053e0:	e048      	b.n	8005474 <HAL_TIM_OC_ConfigChannel+0xb0>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b0c      	cmp	r3, #12
 80053ee:	d839      	bhi.n	8005464 <HAL_TIM_OC_ConfigChannel+0xa0>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	0800542d 	.word	0x0800542d
 80053fc:	08005465 	.word	0x08005465
 8005400:	08005465 	.word	0x08005465
 8005404:	08005465 	.word	0x08005465
 8005408:	0800543b 	.word	0x0800543b
 800540c:	08005465 	.word	0x08005465
 8005410:	08005465 	.word	0x08005465
 8005414:	08005465 	.word	0x08005465
 8005418:	08005449 	.word	0x08005449
 800541c:	08005465 	.word	0x08005465
 8005420:	08005465 	.word	0x08005465
 8005424:	08005465 	.word	0x08005465
 8005428:	08005457 	.word	0x08005457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f996 	bl	8005764 <TIM_OC1_SetConfig>
      break;
 8005438:	e017      	b.n	800546a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f9f5 	bl	8005830 <TIM_OC2_SetConfig>
      break;
 8005446:	e010      	b.n	800546a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fa5a 	bl	8005908 <TIM_OC3_SetConfig>
      break;
 8005454:	e009      	b.n	800546a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fabd 	bl	80059dc <TIM_OC4_SetConfig>
      break;
 8005462:	e002      	b.n	800546a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	75fb      	strb	r3, [r7, #23]
      break;
 8005468:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005472:	7dfb      	ldrb	r3, [r7, #23]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005496:	2302      	movs	r3, #2
 8005498:	e0ae      	b.n	80055f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b0c      	cmp	r3, #12
 80054a6:	f200 809f 	bhi.w	80055e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054e5 	.word	0x080054e5
 80054b4:	080055e9 	.word	0x080055e9
 80054b8:	080055e9 	.word	0x080055e9
 80054bc:	080055e9 	.word	0x080055e9
 80054c0:	08005525 	.word	0x08005525
 80054c4:	080055e9 	.word	0x080055e9
 80054c8:	080055e9 	.word	0x080055e9
 80054cc:	080055e9 	.word	0x080055e9
 80054d0:	08005567 	.word	0x08005567
 80054d4:	080055e9 	.word	0x080055e9
 80054d8:	080055e9 	.word	0x080055e9
 80054dc:	080055e9 	.word	0x080055e9
 80054e0:	080055a7 	.word	0x080055a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 f93a 	bl	8005764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0208 	orr.w	r2, r2, #8
 80054fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0204 	bic.w	r2, r2, #4
 800550e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6999      	ldr	r1, [r3, #24]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	619a      	str	r2, [r3, #24]
      break;
 8005522:	e064      	b.n	80055ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 f980 	bl	8005830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800553e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6999      	ldr	r1, [r3, #24]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	021a      	lsls	r2, r3, #8
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	619a      	str	r2, [r3, #24]
      break;
 8005564:	e043      	b.n	80055ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	4618      	mov	r0, r3
 800556e:	f000 f9cb 	bl	8005908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0208 	orr.w	r2, r2, #8
 8005580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0204 	bic.w	r2, r2, #4
 8005590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69d9      	ldr	r1, [r3, #28]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	61da      	str	r2, [r3, #28]
      break;
 80055a4:	e023      	b.n	80055ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fa15 	bl	80059dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69d9      	ldr	r1, [r3, #28]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	021a      	lsls	r2, r3, #8
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	61da      	str	r2, [r3, #28]
      break;
 80055e6:	e002      	b.n	80055ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75fb      	strb	r3, [r7, #23]
      break;
 80055ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a34      	ldr	r2, [pc, #208]	; (8005748 <TIM_Base_SetConfig+0xe4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00f      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005682:	d00b      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a31      	ldr	r2, [pc, #196]	; (800574c <TIM_Base_SetConfig+0xe8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a30      	ldr	r2, [pc, #192]	; (8005750 <TIM_Base_SetConfig+0xec>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a2f      	ldr	r2, [pc, #188]	; (8005754 <TIM_Base_SetConfig+0xf0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d108      	bne.n	80056ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a25      	ldr	r2, [pc, #148]	; (8005748 <TIM_Base_SetConfig+0xe4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01b      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056bc:	d017      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a22      	ldr	r2, [pc, #136]	; (800574c <TIM_Base_SetConfig+0xe8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a21      	ldr	r2, [pc, #132]	; (8005750 <TIM_Base_SetConfig+0xec>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00f      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a20      	ldr	r2, [pc, #128]	; (8005754 <TIM_Base_SetConfig+0xf0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00b      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a1f      	ldr	r2, [pc, #124]	; (8005758 <TIM_Base_SetConfig+0xf4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a1e      	ldr	r2, [pc, #120]	; (800575c <TIM_Base_SetConfig+0xf8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_Base_SetConfig+0x8a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <TIM_Base_SetConfig+0xfc>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d108      	bne.n	8005700 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a08      	ldr	r2, [pc, #32]	; (8005748 <TIM_Base_SetConfig+0xe4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d103      	bne.n	8005734 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	615a      	str	r2, [r3, #20]
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40010000 	.word	0x40010000
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40014000 	.word	0x40014000
 800575c:	40014400 	.word	0x40014400
 8005760:	40014800 	.word	0x40014800

08005764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f023 0201 	bic.w	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0303 	bic.w	r3, r3, #3
 800579a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f023 0302 	bic.w	r3, r3, #2
 80057ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a1c      	ldr	r2, [pc, #112]	; (800582c <TIM_OC1_SetConfig+0xc8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10c      	bne.n	80057da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0308 	bic.w	r3, r3, #8
 80057c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f023 0304 	bic.w	r3, r3, #4
 80057d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a13      	ldr	r2, [pc, #76]	; (800582c <TIM_OC1_SetConfig+0xc8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d111      	bne.n	8005806 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	621a      	str	r2, [r3, #32]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	40010000 	.word	0x40010000

08005830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f023 0210 	bic.w	r2, r3, #16
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 0320 	bic.w	r3, r3, #32
 800587a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a1e      	ldr	r2, [pc, #120]	; (8005904 <TIM_OC2_SetConfig+0xd4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d10d      	bne.n	80058ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a15      	ldr	r2, [pc, #84]	; (8005904 <TIM_OC2_SetConfig+0xd4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d113      	bne.n	80058dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40010000 	.word	0x40010000

08005908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	021b      	lsls	r3, r3, #8
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a1d      	ldr	r2, [pc, #116]	; (80059d8 <TIM_OC3_SetConfig+0xd0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d10d      	bne.n	8005982 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800596c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a14      	ldr	r2, [pc, #80]	; (80059d8 <TIM_OC3_SetConfig+0xd0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d113      	bne.n	80059b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	621a      	str	r2, [r3, #32]
}
 80059cc:	bf00      	nop
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	40010000 	.word	0x40010000

080059dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	031b      	lsls	r3, r3, #12
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a10      	ldr	r2, [pc, #64]	; (8005a78 <TIM_OC4_SetConfig+0x9c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d109      	bne.n	8005a50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	019b      	lsls	r3, r3, #6
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	621a      	str	r2, [r3, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40010000 	.word	0x40010000

08005a7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f023 0201 	bic.w	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4a24      	ldr	r2, [pc, #144]	; (8005b38 <TIM_TI1_SetConfig+0xbc>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <TIM_TI1_SetConfig+0x56>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab0:	d00f      	beq.n	8005ad2 <TIM_TI1_SetConfig+0x56>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <TIM_TI1_SetConfig+0xc0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_TI1_SetConfig+0x56>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a20      	ldr	r2, [pc, #128]	; (8005b40 <TIM_TI1_SetConfig+0xc4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_TI1_SetConfig+0x56>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a1f      	ldr	r2, [pc, #124]	; (8005b44 <TIM_TI1_SetConfig+0xc8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_TI1_SetConfig+0x56>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <TIM_TI1_SetConfig+0xcc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d101      	bne.n	8005ad6 <TIM_TI1_SetConfig+0x5a>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <TIM_TI1_SetConfig+0x5c>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0303 	bic.w	r3, r3, #3
 8005ae2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e003      	b.n	8005af6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f023 030a 	bic.w	r3, r3, #10
 8005b10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f003 030a 	and.w	r3, r3, #10
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40014000 	.word	0x40014000

08005b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	2201      	movs	r2, #1
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a1a      	ldr	r2, [r3, #32]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	401a      	ands	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 031f 	and.w	r3, r3, #31
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	fa01 f303 	lsl.w	r3, r1, r3
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b08a      	sub	sp, #40	; 0x28
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e09a      	b.n	8005ce0 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb fee0 	bl	8001984 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f7ff fd44 	bl	8005664 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2203      	movs	r2, #3
 8005bea:	f7ff ff47 	bl	8005a7c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699a      	ldr	r2, [r3, #24]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 020c 	bic.w	r2, r2, #12
 8005bfc:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6999      	ldr	r1, [r3, #24]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c1e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c2e:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c3e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0207 	bic.w	r2, r2, #7
 8005c4e:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0204 	orr.w	r2, r2, #4
 8005c5e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c64:	2300      	movs	r3, #0
 8005c66:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005c68:	2370      	movs	r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c74:	2300      	movs	r3, #0
 8005c76:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f107 020c 	add.w	r2, r7, #12
 8005c86:	4611      	mov	r1, r2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fdd1 	bl	8005830 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c9c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005cac:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3728      	adds	r7, #40	; 0x28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e050      	b.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d018      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4c:	d013      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00e      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a16      	ldr	r2, [pc, #88]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d009      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a15      	ldr	r2, [pc, #84]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a13      	ldr	r2, [pc, #76]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10c      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40000c00 	.word	0x40000c00
 8005dc0:	40014000 	.word	0x40014000

08005dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dec:	b084      	sub	sp, #16
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	f107 001c 	add.w	r0, r7, #28
 8005dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d122      	bne.n	8005e4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d105      	bne.n	8005e3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f001 fbee 	bl	8007620 <USB_CoreReset>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]
 8005e48:	e01a      	b.n	8005e80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 fbe2 	bl	8007620 <USB_CoreReset>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
 8005e72:	e005      	b.n	8005e80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d10b      	bne.n	8005e9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f043 0206 	orr.w	r2, r3, #6
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f043 0220 	orr.w	r2, r3, #32
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eaa:	b004      	add	sp, #16
 8005eac:	4770      	bx	lr
	...

08005eb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d165      	bne.n	8005f90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4a41      	ldr	r2, [pc, #260]	; (8005fcc <USB_SetTurnaroundTime+0x11c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d906      	bls.n	8005eda <USB_SetTurnaroundTime+0x2a>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4a40      	ldr	r2, [pc, #256]	; (8005fd0 <USB_SetTurnaroundTime+0x120>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d202      	bcs.n	8005eda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005ed4:	230f      	movs	r3, #15
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e062      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4a3c      	ldr	r2, [pc, #240]	; (8005fd0 <USB_SetTurnaroundTime+0x120>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d306      	bcc.n	8005ef0 <USB_SetTurnaroundTime+0x40>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4a3b      	ldr	r2, [pc, #236]	; (8005fd4 <USB_SetTurnaroundTime+0x124>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d202      	bcs.n	8005ef0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005eea:	230e      	movs	r3, #14
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e057      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4a38      	ldr	r2, [pc, #224]	; (8005fd4 <USB_SetTurnaroundTime+0x124>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d306      	bcc.n	8005f06 <USB_SetTurnaroundTime+0x56>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a37      	ldr	r2, [pc, #220]	; (8005fd8 <USB_SetTurnaroundTime+0x128>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d202      	bcs.n	8005f06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005f00:	230d      	movs	r3, #13
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e04c      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4a33      	ldr	r2, [pc, #204]	; (8005fd8 <USB_SetTurnaroundTime+0x128>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d306      	bcc.n	8005f1c <USB_SetTurnaroundTime+0x6c>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4a32      	ldr	r2, [pc, #200]	; (8005fdc <USB_SetTurnaroundTime+0x12c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d802      	bhi.n	8005f1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005f16:	230c      	movs	r3, #12
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e041      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4a2f      	ldr	r2, [pc, #188]	; (8005fdc <USB_SetTurnaroundTime+0x12c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d906      	bls.n	8005f32 <USB_SetTurnaroundTime+0x82>
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4a2e      	ldr	r2, [pc, #184]	; (8005fe0 <USB_SetTurnaroundTime+0x130>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d802      	bhi.n	8005f32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005f2c:	230b      	movs	r3, #11
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e036      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4a2a      	ldr	r2, [pc, #168]	; (8005fe0 <USB_SetTurnaroundTime+0x130>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d906      	bls.n	8005f48 <USB_SetTurnaroundTime+0x98>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4a29      	ldr	r2, [pc, #164]	; (8005fe4 <USB_SetTurnaroundTime+0x134>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d802      	bhi.n	8005f48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005f42:	230a      	movs	r3, #10
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	e02b      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4a26      	ldr	r2, [pc, #152]	; (8005fe4 <USB_SetTurnaroundTime+0x134>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d906      	bls.n	8005f5e <USB_SetTurnaroundTime+0xae>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4a25      	ldr	r2, [pc, #148]	; (8005fe8 <USB_SetTurnaroundTime+0x138>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d202      	bcs.n	8005f5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f58:	2309      	movs	r3, #9
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e020      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4a21      	ldr	r2, [pc, #132]	; (8005fe8 <USB_SetTurnaroundTime+0x138>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d306      	bcc.n	8005f74 <USB_SetTurnaroundTime+0xc4>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	4a20      	ldr	r2, [pc, #128]	; (8005fec <USB_SetTurnaroundTime+0x13c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d802      	bhi.n	8005f74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f6e:	2308      	movs	r3, #8
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	e015      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <USB_SetTurnaroundTime+0x13c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d906      	bls.n	8005f8a <USB_SetTurnaroundTime+0xda>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <USB_SetTurnaroundTime+0x140>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d202      	bcs.n	8005f8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f84:	2307      	movs	r3, #7
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e00a      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f8a:	2306      	movs	r3, #6
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	e007      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f96:	2309      	movs	r3, #9
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e001      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f9c:	2309      	movs	r3, #9
 8005f9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	029b      	lsls	r3, r3, #10
 8005fb4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	00d8acbf 	.word	0x00d8acbf
 8005fd0:	00e4e1c0 	.word	0x00e4e1c0
 8005fd4:	00f42400 	.word	0x00f42400
 8005fd8:	01067380 	.word	0x01067380
 8005fdc:	011a499f 	.word	0x011a499f
 8005fe0:	01312cff 	.word	0x01312cff
 8005fe4:	014ca43f 	.word	0x014ca43f
 8005fe8:	016e3600 	.word	0x016e3600
 8005fec:	01a6ab1f 	.word	0x01a6ab1f
 8005ff0:	01e84800 	.word	0x01e84800

08005ff4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f043 0201 	orr.w	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f023 0201 	bic.w	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d115      	bne.n	8006086 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006066:	2001      	movs	r0, #1
 8006068:	f7fb fee8 	bl	8001e3c <HAL_Delay>
      ms++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 fa45 	bl	8007502 <USB_GetMode>
 8006078:	4603      	mov	r3, r0
 800607a:	2b01      	cmp	r3, #1
 800607c:	d01e      	beq.n	80060bc <USB_SetCurrentMode+0x84>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b31      	cmp	r3, #49	; 0x31
 8006082:	d9f0      	bls.n	8006066 <USB_SetCurrentMode+0x2e>
 8006084:	e01a      	b.n	80060bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d115      	bne.n	80060b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006098:	2001      	movs	r0, #1
 800609a:	f7fb fecf 	bl	8001e3c <HAL_Delay>
      ms++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3301      	adds	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 fa2c 	bl	8007502 <USB_GetMode>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <USB_SetCurrentMode+0x84>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b31      	cmp	r3, #49	; 0x31
 80060b4:	d9f0      	bls.n	8006098 <USB_SetCurrentMode+0x60>
 80060b6:	e001      	b.n	80060bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e005      	b.n	80060c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b32      	cmp	r3, #50	; 0x32
 80060c0:	d101      	bne.n	80060c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060d0:	b084      	sub	sp, #16
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	e009      	b.n	8006104 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	3340      	adds	r3, #64	; 0x40
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	3301      	adds	r3, #1
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b0e      	cmp	r3, #14
 8006108:	d9f2      	bls.n	80060f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800610a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610c:	2b00      	cmp	r3, #0
 800610e:	d11c      	bne.n	800614a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800611e:	f043 0302 	orr.w	r3, r3, #2
 8006122:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
 8006148:	e00b      	b.n	8006162 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006168:	461a      	mov	r2, r3
 800616a:	2300      	movs	r3, #0
 800616c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006174:	4619      	mov	r1, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617c:	461a      	mov	r2, r3
 800617e:	680b      	ldr	r3, [r1, #0]
 8006180:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	2b01      	cmp	r3, #1
 8006186:	d10c      	bne.n	80061a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800618e:	2100      	movs	r1, #0
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f965 	bl	8006460 <USB_SetDevSpeed>
 8006196:	e008      	b.n	80061aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006198:	2101      	movs	r1, #1
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f960 	bl	8006460 <USB_SetDevSpeed>
 80061a0:	e003      	b.n	80061aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061a2:	2103      	movs	r1, #3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f95b 	bl	8006460 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061aa:	2110      	movs	r1, #16
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f8f3 	bl	8006398 <USB_FlushTxFifo>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f91f 	bl	8006400 <USB_FlushRxFifo>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d2:	461a      	mov	r2, r3
 80061d4:	2300      	movs	r3, #0
 80061d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061de:	461a      	mov	r2, r3
 80061e0:	2300      	movs	r3, #0
 80061e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	461a      	mov	r2, r3
 80061ec:	2300      	movs	r3, #0
 80061ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061f0:	2300      	movs	r3, #0
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	e043      	b.n	800627e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800620c:	d118      	bne.n	8006240 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	461a      	mov	r2, r3
 8006222:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	e013      	b.n	8006252 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006236:	461a      	mov	r2, r3
 8006238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e008      	b.n	8006252 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	461a      	mov	r2, r3
 800624e:	2300      	movs	r3, #0
 8006250:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625e:	461a      	mov	r2, r3
 8006260:	2300      	movs	r3, #0
 8006262:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	461a      	mov	r2, r3
 8006272:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006276:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	3301      	adds	r3, #1
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	429a      	cmp	r2, r3
 8006284:	d3b7      	bcc.n	80061f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	e043      	b.n	8006314 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800629e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062a2:	d118      	bne.n	80062d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	461a      	mov	r2, r3
 80062b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	e013      	b.n	80062e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062cc:	461a      	mov	r2, r3
 80062ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	e008      	b.n	80062e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	461a      	mov	r2, r3
 80062e4:	2300      	movs	r3, #0
 80062e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f4:	461a      	mov	r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006306:	461a      	mov	r2, r3
 8006308:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800630c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	3301      	adds	r3, #1
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	429a      	cmp	r2, r3
 800631a:	d3b7      	bcc.n	800628c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800632a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800632e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800633c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	f043 0210 	orr.w	r2, r3, #16
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699a      	ldr	r2, [r3, #24]
 8006354:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <USB_DevInit+0x2c4>)
 8006356:	4313      	orrs	r3, r2
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800635c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	f043 0208 	orr.w	r2, r3, #8
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800636e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d107      	bne.n	8006384 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800637c:	f043 0304 	orr.w	r3, r3, #4
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006384:	7dfb      	ldrb	r3, [r7, #23]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006390:	b004      	add	sp, #16
 8006392:	4770      	bx	lr
 8006394:	803c3800 	.word	0x803c3800

08006398 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3301      	adds	r3, #1
 80063aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4a13      	ldr	r2, [pc, #76]	; (80063fc <USB_FlushTxFifo+0x64>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d901      	bls.n	80063b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e01b      	b.n	80063f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	daf2      	bge.n	80063a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	019b      	lsls	r3, r3, #6
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3301      	adds	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a08      	ldr	r2, [pc, #32]	; (80063fc <USB_FlushTxFifo+0x64>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d901      	bls.n	80063e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e006      	b.n	80063f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d0f0      	beq.n	80063d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	00030d40 	.word	0x00030d40

08006400 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4a11      	ldr	r2, [pc, #68]	; (800645c <USB_FlushRxFifo+0x5c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d901      	bls.n	800641e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e018      	b.n	8006450 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	daf2      	bge.n	800640c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2210      	movs	r2, #16
 800642e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3301      	adds	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4a08      	ldr	r2, [pc, #32]	; (800645c <USB_FlushRxFifo+0x5c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d901      	bls.n	8006442 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e006      	b.n	8006450 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b10      	cmp	r3, #16
 800644c:	d0f0      	beq.n	8006430 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	00030d40 	.word	0x00030d40

08006460 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	68f9      	ldr	r1, [r7, #12]
 800647c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006480:	4313      	orrs	r3, r2
 8006482:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006492:	b480      	push	{r7}
 8006494:	b087      	sub	sp, #28
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0306 	and.w	r3, r3, #6
 80064aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d102      	bne.n	80064b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80064b2:	2300      	movs	r3, #0
 80064b4:	75fb      	strb	r3, [r7, #23]
 80064b6:	e00a      	b.n	80064ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d002      	beq.n	80064c4 <USB_GetDevSpeed+0x32>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b06      	cmp	r3, #6
 80064c2:	d102      	bne.n	80064ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80064c4:	2302      	movs	r3, #2
 80064c6:	75fb      	strb	r3, [r7, #23]
 80064c8:	e001      	b.n	80064ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80064ca:	230f      	movs	r3, #15
 80064cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d13a      	bne.n	800656e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fe:	69da      	ldr	r2, [r3, #28]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	2101      	movs	r1, #1
 800650a:	fa01 f303 	lsl.w	r3, r1, r3
 800650e:	b29b      	uxth	r3, r3
 8006510:	68f9      	ldr	r1, [r7, #12]
 8006512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006516:	4313      	orrs	r3, r2
 8006518:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d155      	bne.n	80065dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	791b      	ldrb	r3, [r3, #4]
 800654a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800654c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	059b      	lsls	r3, r3, #22
 8006552:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006554:	4313      	orrs	r3, r2
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	440a      	add	r2, r1
 800655e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	e036      	b.n	80065dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006574:	69da      	ldr	r2, [r3, #28]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	2101      	movs	r1, #1
 8006580:	fa01 f303 	lsl.w	r3, r1, r3
 8006584:	041b      	lsls	r3, r3, #16
 8006586:	68f9      	ldr	r1, [r7, #12]
 8006588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800658c:	4313      	orrs	r3, r2
 800658e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d11a      	bne.n	80065dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	791b      	ldrb	r3, [r3, #4]
 80065c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065c2:	430b      	orrs	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d161      	bne.n	80066cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800661a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800661e:	d11f      	bne.n	8006660 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	440a      	add	r2, r1
 8006636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800663e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800665e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	2101      	movs	r1, #1
 8006672:	fa01 f303 	lsl.w	r3, r1, r3
 8006676:	b29b      	uxth	r3, r3
 8006678:	43db      	mvns	r3, r3
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006680:	4013      	ands	r3, r2
 8006682:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	2101      	movs	r1, #1
 8006696:	fa01 f303 	lsl.w	r3, r1, r3
 800669a:	b29b      	uxth	r3, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a4:	4013      	ands	r3, r2
 80066a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	0159      	lsls	r1, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	440b      	add	r3, r1
 80066be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c2:	4619      	mov	r1, r3
 80066c4:	4b35      	ldr	r3, [pc, #212]	; (800679c <USB_DeactivateEndpoint+0x1b0>)
 80066c6:	4013      	ands	r3, r2
 80066c8:	600b      	str	r3, [r1, #0]
 80066ca:	e060      	b.n	800678e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e2:	d11f      	bne.n	8006724 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006702:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	440a      	add	r2, r1
 800671a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006722:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	2101      	movs	r1, #1
 8006736:	fa01 f303 	lsl.w	r3, r1, r3
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	43db      	mvns	r3, r3
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006744:	4013      	ands	r3, r2
 8006746:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	2101      	movs	r1, #1
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	43db      	mvns	r3, r3
 8006762:	68f9      	ldr	r1, [r7, #12]
 8006764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006768:	4013      	ands	r3, r2
 800676a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	0159      	lsls	r1, r3, #5
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	440b      	add	r3, r1
 8006782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006786:	4619      	mov	r1, r3
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <USB_DeactivateEndpoint+0x1b4>)
 800678a:	4013      	ands	r3, r2
 800678c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	ec337800 	.word	0xec337800
 80067a0:	eff37800 	.word	0xeff37800

080067a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	; 0x28
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	785b      	ldrb	r3, [r3, #1]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	f040 815c 	bne.w	8006a7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d132      	bne.n	8006834 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	0151      	lsls	r1, r2, #5
 80067e0:	69fa      	ldr	r2, [r7, #28]
 80067e2:	440a      	add	r2, r1
 80067e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	440a      	add	r2, r1
 8006808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800680c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	69fa      	ldr	r2, [r7, #28]
 8006826:	440a      	add	r2, r1
 8006828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682c:	0cdb      	lsrs	r3, r3, #19
 800682e:	04db      	lsls	r3, r3, #19
 8006830:	6113      	str	r3, [r2, #16]
 8006832:	e074      	b.n	800691e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	440a      	add	r2, r1
 800684a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684e:	0cdb      	lsrs	r3, r3, #19
 8006850:	04db      	lsls	r3, r3, #19
 8006852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006872:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6999      	ldr	r1, [r3, #24]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	440b      	add	r3, r1
 8006890:	1e59      	subs	r1, r3, #1
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	fbb1 f3f3 	udiv	r3, r1, r3
 800689a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800689c:	4b9d      	ldr	r3, [pc, #628]	; (8006b14 <USB_EPStartXfer+0x370>)
 800689e:	400b      	ands	r3, r1
 80068a0:	69b9      	ldr	r1, [r7, #24]
 80068a2:	0148      	lsls	r0, r1, #5
 80068a4:	69f9      	ldr	r1, [r7, #28]
 80068a6:	4401      	add	r1, r0
 80068a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068ac:	4313      	orrs	r3, r2
 80068ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c6:	69b9      	ldr	r1, [r7, #24]
 80068c8:	0148      	lsls	r0, r1, #5
 80068ca:	69f9      	ldr	r1, [r7, #28]
 80068cc:	4401      	add	r1, r0
 80068ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068d2:	4313      	orrs	r3, r2
 80068d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	791b      	ldrb	r3, [r3, #4]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d11f      	bne.n	800691e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80068fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	440a      	add	r2, r1
 8006914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006918:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800691c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d14b      	bne.n	80069bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d009      	beq.n	8006940 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006938:	461a      	mov	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	791b      	ldrb	r3, [r3, #4]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d128      	bne.n	800699a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006954:	2b00      	cmp	r3, #0
 8006956:	d110      	bne.n	800697a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	0151      	lsls	r1, r2, #5
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	440a      	add	r2, r1
 800696e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006972:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	e00f      	b.n	800699a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006998:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	e133      	b.n	8006c24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	791b      	ldrb	r3, [r3, #4]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d015      	beq.n	8006a10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 811b 	beq.w	8006c24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	2101      	movs	r1, #1
 8006a00:	fa01 f303 	lsl.w	r3, r1, r3
 8006a04:	69f9      	ldr	r1, [r7, #28]
 8006a06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	634b      	str	r3, [r1, #52]	; 0x34
 8006a0e:	e109      	b.n	8006c24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d110      	bne.n	8006a42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	e00f      	b.n	8006a62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	0151      	lsls	r1, r2, #5
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	440a      	add	r2, r1
 8006a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6919      	ldr	r1, [r3, #16]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	b298      	uxth	r0, r3
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	4603      	mov	r3, r0
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fade 	bl	8007038 <USB_WritePacket>
 8006a7c:	e0d2      	b.n	8006c24 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	0151      	lsls	r1, r2, #5
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	440a      	add	r2, r1
 8006a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a98:	0cdb      	lsrs	r3, r3, #19
 8006a9a:	04db      	lsls	r3, r3, #19
 8006a9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	0151      	lsls	r1, r2, #5
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	440a      	add	r2, r1
 8006ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006abc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ac0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d126      	bne.n	8006b18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae0:	69b9      	ldr	r1, [r7, #24]
 8006ae2:	0148      	lsls	r0, r1, #5
 8006ae4:	69f9      	ldr	r1, [r7, #28]
 8006ae6:	4401      	add	r1, r0
 8006ae8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006aec:	4313      	orrs	r3, r2
 8006aee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b0e:	6113      	str	r3, [r2, #16]
 8006b10:	e03a      	b.n	8006b88 <USB_EPStartXfer+0x3e4>
 8006b12:	bf00      	nop
 8006b14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	1e5a      	subs	r2, r3, #1
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	8afa      	ldrh	r2, [r7, #22]
 8006b34:	fb03 f202 	mul.w	r2, r3, r2
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b48:	691a      	ldr	r2, [r3, #16]
 8006b4a:	8afb      	ldrh	r3, [r7, #22]
 8006b4c:	04d9      	lsls	r1, r3, #19
 8006b4e:	4b38      	ldr	r3, [pc, #224]	; (8006c30 <USB_EPStartXfer+0x48c>)
 8006b50:	400b      	ands	r3, r1
 8006b52:	69b9      	ldr	r1, [r7, #24]
 8006b54:	0148      	lsls	r0, r1, #5
 8006b56:	69f9      	ldr	r1, [r7, #28]
 8006b58:	4401      	add	r1, r0
 8006b5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b78:	69b9      	ldr	r1, [r7, #24]
 8006b7a:	0148      	lsls	r0, r1, #5
 8006b7c:	69f9      	ldr	r1, [r7, #28]
 8006b7e:	4401      	add	r1, r0
 8006b80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b84:	4313      	orrs	r3, r2
 8006b86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d10d      	bne.n	8006baa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6919      	ldr	r1, [r3, #16]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	791b      	ldrb	r3, [r3, #4]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d128      	bne.n	8006c04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d110      	bne.n	8006be4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	0151      	lsls	r1, r2, #5
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	440a      	add	r2, r1
 8006bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	e00f      	b.n	8006c04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	0151      	lsls	r1, r2, #5
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	440a      	add	r2, r1
 8006c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	1ff80000 	.word	0x1ff80000

08006c34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	f040 80ce 	bne.w	8006df2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d132      	bne.n	8006cc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	0151      	lsls	r1, r2, #5
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	440a      	add	r2, r1
 8006c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbc:	0cdb      	lsrs	r3, r3, #19
 8006cbe:	04db      	lsls	r3, r3, #19
 8006cc0:	6113      	str	r3, [r2, #16]
 8006cc2:	e04e      	b.n	8006d62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cde:	0cdb      	lsrs	r3, r3, #19
 8006ce0:	04db      	lsls	r3, r3, #19
 8006ce2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	0151      	lsls	r1, r2, #5
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	440a      	add	r2, r1
 8006cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	699a      	ldr	r2, [r3, #24]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d903      	bls.n	8006d1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d52:	6939      	ldr	r1, [r7, #16]
 8006d54:	0148      	lsls	r0, r1, #5
 8006d56:	6979      	ldr	r1, [r7, #20]
 8006d58:	4401      	add	r1, r0
 8006d5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d11e      	bne.n	8006da6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	0151      	lsls	r1, r2, #5
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	440a      	add	r2, r1
 8006d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	e097      	b.n	8006ed6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	0151      	lsls	r1, r2, #5
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	440a      	add	r2, r1
 8006dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8083 	beq.w	8006ed6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	2101      	movs	r1, #1
 8006de2:	fa01 f303 	lsl.w	r3, r1, r3
 8006de6:	6979      	ldr	r1, [r7, #20]
 8006de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dec:	4313      	orrs	r3, r2
 8006dee:	634b      	str	r3, [r1, #52]	; 0x34
 8006df0:	e071      	b.n	8006ed6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	0151      	lsls	r1, r2, #5
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	440a      	add	r2, r1
 8006e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e0c:	0cdb      	lsrs	r3, r3, #19
 8006e0e:	04db      	lsls	r3, r3, #19
 8006e10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	0151      	lsls	r1, r2, #5
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	440a      	add	r2, r1
 8006e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	0151      	lsls	r1, r2, #5
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	440a      	add	r2, r1
 8006e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e84:	6939      	ldr	r1, [r7, #16]
 8006e86:	0148      	lsls	r0, r1, #5
 8006e88:	6979      	ldr	r1, [r7, #20]
 8006e8a:	4401      	add	r1, r0
 8006e8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e90:	4313      	orrs	r3, r2
 8006e92:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d10d      	bne.n	8006eb6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d009      	beq.n	8006eb6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6919      	ldr	r1, [r3, #16]
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb2:	460a      	mov	r2, r1
 8006eb4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ed4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d14a      	bne.n	8006f98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1a:	f040 8086 	bne.w	800702a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	7812      	ldrb	r2, [r2, #0]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	7812      	ldrb	r2, [r2, #0]
 8006f56:	0151      	lsls	r1, r2, #5
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	440a      	add	r2, r1
 8006f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d902      	bls.n	8006f7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	75fb      	strb	r3, [r7, #23]
          break;
 8006f7a:	e056      	b.n	800702a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f94:	d0e7      	beq.n	8006f66 <USB_EPStopXfer+0x82>
 8006f96:	e048      	b.n	800702a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fb0:	d13b      	bne.n	800702a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	7812      	ldrb	r2, [r2, #0]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	7812      	ldrb	r2, [r2, #0]
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ff8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f242 7210 	movw	r2, #10000	; 0x2710
 8007006:	4293      	cmp	r3, r2
 8007008:	d902      	bls.n	8007010 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	75fb      	strb	r3, [r7, #23]
          break;
 800700e:	e00c      	b.n	800702a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007028:	d0e7      	beq.n	8006ffa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
}
 800702c:	4618      	mov	r0, r3
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007038:	b480      	push	{r7}
 800703a:	b089      	sub	sp, #36	; 0x24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	4611      	mov	r1, r2
 8007044:	461a      	mov	r2, r3
 8007046:	460b      	mov	r3, r1
 8007048:	71fb      	strb	r3, [r7, #7]
 800704a:	4613      	mov	r3, r2
 800704c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007056:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800705a:	2b00      	cmp	r3, #0
 800705c:	d123      	bne.n	80070a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800705e:	88bb      	ldrh	r3, [r7, #4]
 8007060:	3303      	adds	r3, #3
 8007062:	089b      	lsrs	r3, r3, #2
 8007064:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007066:	2300      	movs	r3, #0
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	e018      	b.n	800709e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	031a      	lsls	r2, r3, #12
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	4413      	add	r3, r2
 8007074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007078:	461a      	mov	r2, r3
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	3301      	adds	r3, #1
 8007084:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	3301      	adds	r3, #1
 800708a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	3301      	adds	r3, #1
 8007090:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	3301      	adds	r3, #1
 8007096:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	3301      	adds	r3, #1
 800709c:	61bb      	str	r3, [r7, #24]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d3e2      	bcc.n	800706c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3724      	adds	r7, #36	; 0x24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b08b      	sub	sp, #44	; 0x2c
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80070ca:	88fb      	ldrh	r3, [r7, #6]
 80070cc:	089b      	lsrs	r3, r3, #2
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	f003 0303 	and.w	r3, r3, #3
 80070d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070da:	2300      	movs	r3, #0
 80070dc:	623b      	str	r3, [r7, #32]
 80070de:	e014      	b.n	800710a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	3301      	adds	r3, #1
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	3301      	adds	r3, #1
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	3301      	adds	r3, #1
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	3301      	adds	r3, #1
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	3301      	adds	r3, #1
 8007108:	623b      	str	r3, [r7, #32]
 800710a:	6a3a      	ldr	r2, [r7, #32]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	429a      	cmp	r2, r3
 8007110:	d3e6      	bcc.n	80070e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007112:	8bfb      	ldrh	r3, [r7, #30]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01e      	beq.n	8007156 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007122:	461a      	mov	r2, r3
 8007124:	f107 0310 	add.w	r3, r7, #16
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	fa22 f303 	lsr.w	r3, r2, r3
 8007138:	b2da      	uxtb	r2, r3
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	701a      	strb	r2, [r3, #0]
      i++;
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	3301      	adds	r3, #1
 8007142:	623b      	str	r3, [r7, #32]
      pDest++;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	3301      	adds	r3, #1
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800714a:	8bfb      	ldrh	r3, [r7, #30]
 800714c:	3b01      	subs	r3, #1
 800714e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007150:	8bfb      	ldrh	r3, [r7, #30]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1ea      	bne.n	800712c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007158:	4618      	mov	r0, r3
 800715a:	372c      	adds	r7, #44	; 0x2c
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d12c      	bne.n	80071da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	db12      	blt.n	80071b8 <USB_EPSetStall+0x54>
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00f      	beq.n	80071b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	0151      	lsls	r1, r2, #5
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	440a      	add	r2, r1
 80071ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	0151      	lsls	r1, r2, #5
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	440a      	add	r2, r1
 80071ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	e02b      	b.n	8007232 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	db12      	blt.n	8007212 <USB_EPSetStall+0xae>
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00f      	beq.n	8007212 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007210:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007230:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d128      	bne.n	80072ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800727a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	791b      	ldrb	r3, [r3, #4]
 8007280:	2b03      	cmp	r3, #3
 8007282:	d003      	beq.n	800728c <USB_EPClearStall+0x4c>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	791b      	ldrb	r3, [r3, #4]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d138      	bne.n	80072fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	e027      	b.n	80072fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	791b      	ldrb	r3, [r3, #4]
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d003      	beq.n	80072de <USB_EPClearStall+0x9e>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	791b      	ldrb	r3, [r3, #4]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d10f      	bne.n	80072fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800732e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007340:	68f9      	ldr	r1, [r7, #12]
 8007342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007346:	4313      	orrs	r3, r2
 8007348:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007372:	f023 0303 	bic.w	r3, r3, #3
 8007376:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007386:	f023 0302 	bic.w	r3, r3, #2
 800738a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800739a:	b480      	push	{r7}
 800739c:	b085      	sub	sp, #20
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073b4:	f023 0303 	bic.w	r3, r3, #3
 80073b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073c8:	f043 0302 	orr.w	r3, r3, #2
 80073cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4013      	ands	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073f4:	68fb      	ldr	r3, [r7, #12]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007402:	b480      	push	{r7}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	4013      	ands	r3, r2
 8007424:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	0c1b      	lsrs	r3, r3, #16
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	4013      	ands	r3, r2
 8007458:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	b29b      	uxth	r3, r3
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800746a:	b480      	push	{r7}
 800746c:	b085      	sub	sp, #20
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	4013      	ands	r3, r2
 8007496:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007498:	68bb      	ldr	r3, [r7, #8]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b087      	sub	sp, #28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80074ca:	78fb      	ldrb	r3, [r7, #3]
 80074cc:	f003 030f 	and.w	r3, r3, #15
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	fa22 f303 	lsr.w	r3, r2, r3
 80074d6:	01db      	lsls	r3, r3, #7
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4013      	ands	r3, r2
 80074f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074f4:	68bb      	ldr	r3, [r7, #8]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	f003 0301 	and.w	r3, r3, #1
}
 8007512:	4618      	mov	r0, r3
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007538:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800753c:	f023 0307 	bic.w	r3, r3, #7
 8007540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	460b      	mov	r3, r1
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	333c      	adds	r3, #60	; 0x3c
 800757a:	3304      	adds	r3, #4
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	4a26      	ldr	r2, [pc, #152]	; (800761c <USB_EP0_OutStart+0xb8>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d90a      	bls.n	800759e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007598:	d101      	bne.n	800759e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	e037      	b.n	800760e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a4:	461a      	mov	r2, r3
 80075a6:	2300      	movs	r3, #0
 80075a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075cc:	f043 0318 	orr.w	r3, r3, #24
 80075d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80075e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80075e6:	7afb      	ldrb	r3, [r7, #11]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d10f      	bne.n	800760c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f2:	461a      	mov	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007606:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800760a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	4f54300a 	.word	0x4f54300a

08007620 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4a13      	ldr	r2, [pc, #76]	; (8007684 <USB_CoreReset+0x64>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e01b      	b.n	8007676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	daf2      	bge.n	800762c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f043 0201 	orr.w	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4a09      	ldr	r2, [pc, #36]	; (8007684 <USB_CoreReset+0x64>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d901      	bls.n	8007668 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e006      	b.n	8007676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b01      	cmp	r3, #1
 8007672:	d0f0      	beq.n	8007656 <USB_CoreReset+0x36>

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	00030d40 	.word	0x00030d40

08007688 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007694:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007698:	f002 fc8a 	bl	8009fb0 <USBD_static_malloc>
 800769c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d109      	bne.n	80076b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	32b0      	adds	r2, #176	; 0xb0
 80076ae:	2100      	movs	r1, #0
 80076b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80076b4:	2302      	movs	r3, #2
 80076b6:	e0d4      	b.n	8007862 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80076b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80076bc:	2100      	movs	r1, #0
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f002 fcee 	bl	800a0a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	32b0      	adds	r2, #176	; 0xb0
 80076ce:	68f9      	ldr	r1, [r7, #12]
 80076d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	32b0      	adds	r2, #176	; 0xb0
 80076de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7c1b      	ldrb	r3, [r3, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d138      	bne.n	8007762 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80076f0:	4b5e      	ldr	r3, [pc, #376]	; (800786c <USBD_CDC_Init+0x1e4>)
 80076f2:	7819      	ldrb	r1, [r3, #0]
 80076f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076f8:	2202      	movs	r2, #2
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f002 fb35 	bl	8009d6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007700:	4b5a      	ldr	r3, [pc, #360]	; (800786c <USBD_CDC_Init+0x1e4>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	3324      	adds	r3, #36	; 0x24
 8007716:	2201      	movs	r2, #1
 8007718:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800771a:	4b55      	ldr	r3, [pc, #340]	; (8007870 <USBD_CDC_Init+0x1e8>)
 800771c:	7819      	ldrb	r1, [r3, #0]
 800771e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007722:	2202      	movs	r2, #2
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f002 fb20 	bl	8009d6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800772a:	4b51      	ldr	r3, [pc, #324]	; (8007870 <USBD_CDC_Init+0x1e8>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	f003 020f 	and.w	r2, r3, #15
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	440b      	add	r3, r1
 800773e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007742:	2201      	movs	r2, #1
 8007744:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007746:	4b4b      	ldr	r3, [pc, #300]	; (8007874 <USBD_CDC_Init+0x1ec>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f003 020f 	and.w	r2, r3, #15
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	3326      	adds	r3, #38	; 0x26
 800775c:	2210      	movs	r2, #16
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	e035      	b.n	80077ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007762:	4b42      	ldr	r3, [pc, #264]	; (800786c <USBD_CDC_Init+0x1e4>)
 8007764:	7819      	ldrb	r1, [r3, #0]
 8007766:	2340      	movs	r3, #64	; 0x40
 8007768:	2202      	movs	r2, #2
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f002 fafd 	bl	8009d6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007770:	4b3e      	ldr	r3, [pc, #248]	; (800786c <USBD_CDC_Init+0x1e4>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	f003 020f 	and.w	r2, r3, #15
 8007778:	6879      	ldr	r1, [r7, #4]
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	440b      	add	r3, r1
 8007784:	3324      	adds	r3, #36	; 0x24
 8007786:	2201      	movs	r2, #1
 8007788:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800778a:	4b39      	ldr	r3, [pc, #228]	; (8007870 <USBD_CDC_Init+0x1e8>)
 800778c:	7819      	ldrb	r1, [r3, #0]
 800778e:	2340      	movs	r3, #64	; 0x40
 8007790:	2202      	movs	r2, #2
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f002 fae9 	bl	8009d6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007798:	4b35      	ldr	r3, [pc, #212]	; (8007870 <USBD_CDC_Init+0x1e8>)
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	f003 020f 	and.w	r2, r3, #15
 80077a0:	6879      	ldr	r1, [r7, #4]
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	440b      	add	r3, r1
 80077ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077b0:	2201      	movs	r2, #1
 80077b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80077b4:	4b2f      	ldr	r3, [pc, #188]	; (8007874 <USBD_CDC_Init+0x1ec>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f003 020f 	and.w	r2, r3, #15
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	3326      	adds	r3, #38	; 0x26
 80077ca:	2210      	movs	r2, #16
 80077cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80077ce:	4b29      	ldr	r3, [pc, #164]	; (8007874 <USBD_CDC_Init+0x1ec>)
 80077d0:	7819      	ldrb	r1, [r3, #0]
 80077d2:	2308      	movs	r3, #8
 80077d4:	2203      	movs	r2, #3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f002 fac7 	bl	8009d6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80077dc:	4b25      	ldr	r3, [pc, #148]	; (8007874 <USBD_CDC_Init+0x1ec>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 020f 	and.w	r2, r3, #15
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	3324      	adds	r3, #36	; 0x24
 80077f2:	2201      	movs	r2, #1
 80077f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	33b0      	adds	r3, #176	; 0xb0
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800782c:	2302      	movs	r3, #2
 800782e:	e018      	b.n	8007862 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	7c1b      	ldrb	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007838:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <USBD_CDC_Init+0x1e8>)
 800783a:	7819      	ldrb	r1, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f002 fb7e 	bl	8009f48 <USBD_LL_PrepareReceive>
 800784c:	e008      	b.n	8007860 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800784e:	4b08      	ldr	r3, [pc, #32]	; (8007870 <USBD_CDC_Init+0x1e8>)
 8007850:	7819      	ldrb	r1, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007858:	2340      	movs	r3, #64	; 0x40
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f002 fb74 	bl	8009f48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000093 	.word	0x20000093
 8007870:	20000094 	.word	0x20000094
 8007874:	20000095 	.word	0x20000095

08007878 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007884:	4b3a      	ldr	r3, [pc, #232]	; (8007970 <USBD_CDC_DeInit+0xf8>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f002 fa93 	bl	8009db6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007890:	4b37      	ldr	r3, [pc, #220]	; (8007970 <USBD_CDC_DeInit+0xf8>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f003 020f 	and.w	r2, r3, #15
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	3324      	adds	r3, #36	; 0x24
 80078a6:	2200      	movs	r2, #0
 80078a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80078aa:	4b32      	ldr	r3, [pc, #200]	; (8007974 <USBD_CDC_DeInit+0xfc>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f002 fa80 	bl	8009db6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80078b6:	4b2f      	ldr	r3, [pc, #188]	; (8007974 <USBD_CDC_DeInit+0xfc>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	f003 020f 	and.w	r2, r3, #15
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	4613      	mov	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	440b      	add	r3, r1
 80078ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078ce:	2200      	movs	r2, #0
 80078d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80078d2:	4b29      	ldr	r3, [pc, #164]	; (8007978 <USBD_CDC_DeInit+0x100>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f002 fa6c 	bl	8009db6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80078de:	4b26      	ldr	r3, [pc, #152]	; (8007978 <USBD_CDC_DeInit+0x100>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	f003 020f 	and.w	r2, r3, #15
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	440b      	add	r3, r1
 80078f2:	3324      	adds	r3, #36	; 0x24
 80078f4:	2200      	movs	r2, #0
 80078f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80078f8:	4b1f      	ldr	r3, [pc, #124]	; (8007978 <USBD_CDC_DeInit+0x100>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	f003 020f 	and.w	r2, r3, #15
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	440b      	add	r3, r1
 800790c:	3326      	adds	r3, #38	; 0x26
 800790e:	2200      	movs	r2, #0
 8007910:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	32b0      	adds	r2, #176	; 0xb0
 800791c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d01f      	beq.n	8007964 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	33b0      	adds	r3, #176	; 0xb0
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	32b0      	adds	r2, #176	; 0xb0
 8007942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007946:	4618      	mov	r0, r3
 8007948:	f002 fb40 	bl	8009fcc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	32b0      	adds	r2, #176	; 0xb0
 8007956:	2100      	movs	r1, #0
 8007958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000093 	.word	0x20000093
 8007974:	20000094 	.word	0x20000094
 8007978:	20000095 	.word	0x20000095

0800797c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	32b0      	adds	r2, #176	; 0xb0
 8007990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007994:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e0bf      	b.n	8007b2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d050      	beq.n	8007a5a <USBD_CDC_Setup+0xde>
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	f040 80af 	bne.w	8007b1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	88db      	ldrh	r3, [r3, #6]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d03a      	beq.n	8007a3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	b25b      	sxtb	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	da1b      	bge.n	8007a08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	33b0      	adds	r3, #176	; 0xb0
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80079e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	88d2      	ldrh	r2, [r2, #6]
 80079ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	88db      	ldrh	r3, [r3, #6]
 80079f2:	2b07      	cmp	r3, #7
 80079f4:	bf28      	it	cs
 80079f6:	2307      	movcs	r3, #7
 80079f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	89fa      	ldrh	r2, [r7, #14]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 fd89 	bl	8009518 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007a06:	e090      	b.n	8007b2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	785a      	ldrb	r2, [r3, #1]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	88db      	ldrh	r3, [r3, #6]
 8007a16:	2b3f      	cmp	r3, #63	; 0x3f
 8007a18:	d803      	bhi.n	8007a22 <USBD_CDC_Setup+0xa6>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	88db      	ldrh	r3, [r3, #6]
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	e000      	b.n	8007a24 <USBD_CDC_Setup+0xa8>
 8007a22:	2240      	movs	r2, #64	; 0x40
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007a2a:	6939      	ldr	r1, [r7, #16]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007a32:	461a      	mov	r2, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 fd9b 	bl	8009570 <USBD_CtlPrepareRx>
      break;
 8007a3a:	e076      	b.n	8007b2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	33b0      	adds	r3, #176	; 0xb0
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	7850      	ldrb	r0, [r2, #1]
 8007a52:	2200      	movs	r2, #0
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	4798      	blx	r3
      break;
 8007a58:	e067      	b.n	8007b2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b0b      	cmp	r3, #11
 8007a60:	d851      	bhi.n	8007b06 <USBD_CDC_Setup+0x18a>
 8007a62:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <USBD_CDC_Setup+0xec>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a99 	.word	0x08007a99
 8007a6c:	08007b15 	.word	0x08007b15
 8007a70:	08007b07 	.word	0x08007b07
 8007a74:	08007b07 	.word	0x08007b07
 8007a78:	08007b07 	.word	0x08007b07
 8007a7c:	08007b07 	.word	0x08007b07
 8007a80:	08007b07 	.word	0x08007b07
 8007a84:	08007b07 	.word	0x08007b07
 8007a88:	08007b07 	.word	0x08007b07
 8007a8c:	08007b07 	.word	0x08007b07
 8007a90:	08007ac3 	.word	0x08007ac3
 8007a94:	08007aed 	.word	0x08007aed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d107      	bne.n	8007ab4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007aa4:	f107 030a 	add.w	r3, r7, #10
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 fd33 	bl	8009518 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ab2:	e032      	b.n	8007b1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fcbd 	bl	8009436 <USBD_CtlError>
            ret = USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	75fb      	strb	r3, [r7, #23]
          break;
 8007ac0:	e02b      	b.n	8007b1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d107      	bne.n	8007ade <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ace:	f107 030d 	add.w	r3, r7, #13
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 fd1e 	bl	8009518 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007adc:	e01d      	b.n	8007b1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 fca8 	bl	8009436 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8007aea:	e016      	b.n	8007b1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d00f      	beq.n	8007b18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fc9b 	bl	8009436 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b04:	e008      	b.n	8007b18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 fc94 	bl	8009436 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	75fb      	strb	r3, [r7, #23]
          break;
 8007b12:	e002      	b.n	8007b1a <USBD_CDC_Setup+0x19e>
          break;
 8007b14:	bf00      	nop
 8007b16:	e008      	b.n	8007b2a <USBD_CDC_Setup+0x1ae>
          break;
 8007b18:	bf00      	nop
      }
      break;
 8007b1a:	e006      	b.n	8007b2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fc89 	bl	8009436 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	75fb      	strb	r3, [r7, #23]
      break;
 8007b28:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	32b0      	adds	r2, #176	; 0xb0
 8007b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e065      	b.n	8007c2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	32b0      	adds	r2, #176	; 0xb0
 8007b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b6e:	78fb      	ldrb	r3, [r7, #3]
 8007b70:	f003 020f 	and.w	r2, r3, #15
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	3318      	adds	r3, #24
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d02f      	beq.n	8007be8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	f003 020f 	and.w	r2, r3, #15
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	f003 010f 	and.w	r1, r3, #15
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	440b      	add	r3, r1
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4403      	add	r3, r0
 8007bb0:	3348      	adds	r3, #72	; 0x48
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bb8:	fb01 f303 	mul.w	r3, r1, r3
 8007bbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d112      	bne.n	8007be8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	f003 020f 	and.w	r2, r3, #15
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	3318      	adds	r3, #24
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007bda:	78f9      	ldrb	r1, [r7, #3]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	2200      	movs	r2, #0
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f002 f990 	bl	8009f06 <USBD_LL_Transmit>
 8007be6:	e01f      	b.n	8007c28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	33b0      	adds	r3, #176	; 0xb0
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d010      	beq.n	8007c28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	33b0      	adds	r3, #176	; 0xb0
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c24:	78fa      	ldrb	r2, [r7, #3]
 8007c26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	32b0      	adds	r2, #176	; 0xb0
 8007c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	32b0      	adds	r2, #176	; 0xb0
 8007c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e01a      	b.n	8007c9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f002 f98e 	bl	8009f8a <USBD_LL_GetRxDataSize>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	33b0      	adds	r3, #176	; 0xb0
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c94:	4611      	mov	r1, r2
 8007c96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	32b0      	adds	r2, #176	; 0xb0
 8007cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e025      	b.n	8007d10 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	33b0      	adds	r3, #176	; 0xb0
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01a      	beq.n	8007d0e <USBD_CDC_EP0_RxReady+0x6c>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cde:	2bff      	cmp	r3, #255	; 0xff
 8007ce0:	d015      	beq.n	8007d0e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	33b0      	adds	r3, #176	; 0xb0
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007cfa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d02:	b292      	uxth	r2, r2
 8007d04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	22ff      	movs	r2, #255	; 0xff
 8007d0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d20:	2182      	movs	r1, #130	; 0x82
 8007d22:	4818      	ldr	r0, [pc, #96]	; (8007d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d24:	f000 fd4f 	bl	80087c6 <USBD_GetEpDesc>
 8007d28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	4815      	ldr	r0, [pc, #84]	; (8007d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d2e:	f000 fd4a 	bl	80087c6 <USBD_GetEpDesc>
 8007d32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d34:	2181      	movs	r1, #129	; 0x81
 8007d36:	4813      	ldr	r0, [pc, #76]	; (8007d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d38:	f000 fd45 	bl	80087c6 <USBD_GetEpDesc>
 8007d3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	2210      	movs	r2, #16
 8007d48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d006      	beq.n	8007d5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d58:	711a      	strb	r2, [r3, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d006      	beq.n	8007d72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d6c:	711a      	strb	r2, [r3, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2243      	movs	r2, #67	; 0x43
 8007d76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d78:	4b02      	ldr	r3, [pc, #8]	; (8007d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000050 	.word	0x20000050

08007d88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d90:	2182      	movs	r1, #130	; 0x82
 8007d92:	4818      	ldr	r0, [pc, #96]	; (8007df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d94:	f000 fd17 	bl	80087c6 <USBD_GetEpDesc>
 8007d98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	4815      	ldr	r0, [pc, #84]	; (8007df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d9e:	f000 fd12 	bl	80087c6 <USBD_GetEpDesc>
 8007da2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007da4:	2181      	movs	r1, #129	; 0x81
 8007da6:	4813      	ldr	r0, [pc, #76]	; (8007df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007da8:	f000 fd0d 	bl	80087c6 <USBD_GetEpDesc>
 8007dac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2210      	movs	r2, #16
 8007db8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d006      	beq.n	8007dce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	711a      	strb	r2, [r3, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f042 0202 	orr.w	r2, r2, #2
 8007dcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d006      	beq.n	8007de2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	711a      	strb	r2, [r3, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f042 0202 	orr.w	r2, r2, #2
 8007de0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2243      	movs	r2, #67	; 0x43
 8007de6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007de8:	4b02      	ldr	r3, [pc, #8]	; (8007df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000050 	.word	0x20000050

08007df8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e00:	2182      	movs	r1, #130	; 0x82
 8007e02:	4818      	ldr	r0, [pc, #96]	; (8007e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e04:	f000 fcdf 	bl	80087c6 <USBD_GetEpDesc>
 8007e08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	4815      	ldr	r0, [pc, #84]	; (8007e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e0e:	f000 fcda 	bl	80087c6 <USBD_GetEpDesc>
 8007e12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e14:	2181      	movs	r1, #129	; 0x81
 8007e16:	4813      	ldr	r0, [pc, #76]	; (8007e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e18:	f000 fcd5 	bl	80087c6 <USBD_GetEpDesc>
 8007e1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2210      	movs	r2, #16
 8007e28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d006      	beq.n	8007e3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e38:	711a      	strb	r2, [r3, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d006      	beq.n	8007e52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e4c:	711a      	strb	r2, [r3, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2243      	movs	r2, #67	; 0x43
 8007e56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e58:	4b02      	ldr	r3, [pc, #8]	; (8007e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000050 	.word	0x20000050

08007e68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	220a      	movs	r2, #10
 8007e74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e76:	4b03      	ldr	r3, [pc, #12]	; (8007e84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	2000000c 	.word	0x2000000c

08007e88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e009      	b.n	8007eb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	33b0      	adds	r3, #176	; 0xb0
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	32b0      	adds	r2, #176	; 0xb0
 8007ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e008      	b.n	8007ef4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	371c      	adds	r7, #28
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	32b0      	adds	r2, #176	; 0xb0
 8007f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e004      	b.n	8007f2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	32b0      	adds	r2, #176	; 0xb0
 8007f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f52:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007f54:	2301      	movs	r3, #1
 8007f56:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	32b0      	adds	r2, #176	; 0xb0
 8007f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e025      	b.n	8007fba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d11f      	bne.n	8007fb8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007f80:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <USBD_CDC_TransmitPacket+0x88>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	f003 020f 	and.w	r2, r3, #15
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4403      	add	r3, r0
 8007f9a:	3318      	adds	r3, #24
 8007f9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007f9e:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <USBD_CDC_TransmitPacket+0x88>)
 8007fa0:	7819      	ldrb	r1, [r3, #0]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 ffa9 	bl	8009f06 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000093 	.word	0x20000093

08007fc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	32b0      	adds	r2, #176	; 0xb0
 8007fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	32b0      	adds	r2, #176	; 0xb0
 8007fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e018      	b.n	8008028 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	7c1b      	ldrb	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <USBD_CDC_ReceivePacket+0x68>)
 8008000:	7819      	ldrb	r1, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 ff9b 	bl	8009f48 <USBD_LL_PrepareReceive>
 8008012:	e008      	b.n	8008026 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008014:	4b06      	ldr	r3, [pc, #24]	; (8008030 <USBD_CDC_ReceivePacket+0x68>)
 8008016:	7819      	ldrb	r1, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800801e:	2340      	movs	r3, #64	; 0x40
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 ff91 	bl	8009f48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20000094 	.word	0x20000094

08008034 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008048:	2303      	movs	r3, #3
 800804a:	e01f      	b.n	800808c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	79fa      	ldrb	r2, [r7, #7]
 800807e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f001 fe0b 	bl	8009c9c <USBD_LL_Init>
 8008086:	4603      	mov	r3, r0
 8008088:	75fb      	strb	r3, [r7, #23]

  return ret;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e025      	b.n	80080f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	32ae      	adds	r2, #174	; 0xae
 80080be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00f      	beq.n	80080e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32ae      	adds	r2, #174	; 0xae
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	f107 020e 	add.w	r2, r7, #14
 80080dc:	4610      	mov	r0, r2
 80080de:	4798      	blx	r3
 80080e0:	4602      	mov	r2, r0
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 fe13 	bl	8009d34 <USBD_LL_Start>
 800810e:	4603      	mov	r3, r0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008120:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	460b      	mov	r3, r1
 8008138:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008144:	2b00      	cmp	r3, #0
 8008146:	d009      	beq.n	800815c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	4611      	mov	r1, r2
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800815c:	7bfb      	ldrb	r3, [r7, #15]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	78fa      	ldrb	r2, [r7, #3]
 8008180:	4611      	mov	r1, r2
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	4798      	blx	r3
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800818c:	2303      	movs	r3, #3
 800818e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 f908 	bl	80093c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80081c0:	461a      	mov	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081ce:	f003 031f 	and.w	r3, r3, #31
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d01a      	beq.n	800820c <USBD_LL_SetupStage+0x72>
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d822      	bhi.n	8008220 <USBD_LL_SetupStage+0x86>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <USBD_LL_SetupStage+0x4a>
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d00a      	beq.n	80081f8 <USBD_LL_SetupStage+0x5e>
 80081e2:	e01d      	b.n	8008220 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fb5f 	bl	80088b0 <USBD_StdDevReq>
 80081f2:	4603      	mov	r3, r0
 80081f4:	73fb      	strb	r3, [r7, #15]
      break;
 80081f6:	e020      	b.n	800823a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fbc7 	bl	8008994 <USBD_StdItfReq>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]
      break;
 800820a:	e016      	b.n	800823a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fc29 	bl	8008a6c <USBD_StdEPReq>
 800821a:	4603      	mov	r3, r0
 800821c:	73fb      	strb	r3, [r7, #15]
      break;
 800821e:	e00c      	b.n	800823a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008226:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800822a:	b2db      	uxtb	r3, r3
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 fde0 	bl	8009df4 <USBD_LL_StallEP>
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
      break;
 8008238:	bf00      	nop
  }

  return ret;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	460b      	mov	r3, r1
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008256:	7afb      	ldrb	r3, [r7, #11]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d16e      	bne.n	800833a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008262:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800826a:	2b03      	cmp	r3, #3
 800826c:	f040 8098 	bne.w	80083a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	429a      	cmp	r2, r3
 800827a:	d913      	bls.n	80082a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	1ad2      	subs	r2, r2, r3
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	4293      	cmp	r3, r2
 8008294:	bf28      	it	cs
 8008296:	4613      	movcs	r3, r2
 8008298:	461a      	mov	r2, r3
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f001 f984 	bl	80095aa <USBD_CtlContinueRx>
 80082a2:	e07d      	b.n	80083a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082aa:	f003 031f 	and.w	r3, r3, #31
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d014      	beq.n	80082dc <USBD_LL_DataOutStage+0x98>
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d81d      	bhi.n	80082f2 <USBD_LL_DataOutStage+0xae>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <USBD_LL_DataOutStage+0x7c>
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d003      	beq.n	80082c6 <USBD_LL_DataOutStage+0x82>
 80082be:	e018      	b.n	80082f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	75bb      	strb	r3, [r7, #22]
            break;
 80082c4:	e018      	b.n	80082f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	4619      	mov	r1, r3
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 fa5e 	bl	8008792 <USBD_CoreFindIF>
 80082d6:	4603      	mov	r3, r0
 80082d8:	75bb      	strb	r3, [r7, #22]
            break;
 80082da:	e00d      	b.n	80082f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	4619      	mov	r1, r3
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 fa60 	bl	80087ac <USBD_CoreFindEP>
 80082ec:	4603      	mov	r3, r0
 80082ee:	75bb      	strb	r3, [r7, #22]
            break;
 80082f0:	e002      	b.n	80082f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	75bb      	strb	r3, [r7, #22]
            break;
 80082f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80082f8:	7dbb      	ldrb	r3, [r7, #22]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d119      	bne.n	8008332 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b03      	cmp	r3, #3
 8008308:	d113      	bne.n	8008332 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800830a:	7dba      	ldrb	r2, [r7, #22]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	32ae      	adds	r2, #174	; 0xae
 8008310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00b      	beq.n	8008332 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800831a:	7dba      	ldrb	r2, [r7, #22]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008322:	7dba      	ldrb	r2, [r7, #22]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	32ae      	adds	r2, #174	; 0xae
 8008328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f001 f94a 	bl	80095cc <USBD_CtlSendStatus>
 8008338:	e032      	b.n	80083a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800833a:	7afb      	ldrb	r3, [r7, #11]
 800833c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008340:	b2db      	uxtb	r3, r3
 8008342:	4619      	mov	r1, r3
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 fa31 	bl	80087ac <USBD_CoreFindEP>
 800834a:	4603      	mov	r3, r0
 800834c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800834e:	7dbb      	ldrb	r3, [r7, #22]
 8008350:	2bff      	cmp	r3, #255	; 0xff
 8008352:	d025      	beq.n	80083a0 <USBD_LL_DataOutStage+0x15c>
 8008354:	7dbb      	ldrb	r3, [r7, #22]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d122      	bne.n	80083a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b03      	cmp	r3, #3
 8008364:	d117      	bne.n	8008396 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008366:	7dba      	ldrb	r2, [r7, #22]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	32ae      	adds	r2, #174	; 0xae
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00f      	beq.n	8008396 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008376:	7dba      	ldrb	r2, [r7, #22]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800837e:	7dba      	ldrb	r2, [r7, #22]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	32ae      	adds	r2, #174	; 0xae
 8008384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	7afa      	ldrb	r2, [r7, #11]
 800838c:	4611      	mov	r1, r2
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	4798      	blx	r3
 8008392:	4603      	mov	r3, r0
 8008394:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	e000      	b.n	80083a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b086      	sub	sp, #24
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	460b      	mov	r3, r1
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80083b8:	7afb      	ldrb	r3, [r7, #11]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d16f      	bne.n	800849e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3314      	adds	r3, #20
 80083c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d15a      	bne.n	8008484 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d914      	bls.n	8008404 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	689a      	ldr	r2, [r3, #8]
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	1ad2      	subs	r2, r2, r3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	461a      	mov	r2, r3
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f001 f8ac 	bl	800954e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083f6:	2300      	movs	r3, #0
 80083f8:	2200      	movs	r2, #0
 80083fa:	2100      	movs	r1, #0
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f001 fda3 	bl	8009f48 <USBD_LL_PrepareReceive>
 8008402:	e03f      	b.n	8008484 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	68da      	ldr	r2, [r3, #12]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	429a      	cmp	r2, r3
 800840e:	d11c      	bne.n	800844a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008418:	429a      	cmp	r2, r3
 800841a:	d316      	bcc.n	800844a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008426:	429a      	cmp	r2, r3
 8008428:	d20f      	bcs.n	800844a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800842a:	2200      	movs	r2, #0
 800842c:	2100      	movs	r1, #0
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f001 f88d 	bl	800954e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800843c:	2300      	movs	r3, #0
 800843e:	2200      	movs	r2, #0
 8008440:	2100      	movs	r1, #0
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f001 fd80 	bl	8009f48 <USBD_LL_PrepareReceive>
 8008448:	e01c      	b.n	8008484 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d10f      	bne.n	8008476 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d009      	beq.n	8008476 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008476:	2180      	movs	r1, #128	; 0x80
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f001 fcbb 	bl	8009df4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f001 f8b7 	bl	80095f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d03a      	beq.n	8008504 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7ff fe42 	bl	8008118 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800849c:	e032      	b.n	8008504 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800849e:	7afb      	ldrb	r3, [r7, #11]
 80084a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	4619      	mov	r1, r3
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f97f 	bl	80087ac <USBD_CoreFindEP>
 80084ae:	4603      	mov	r3, r0
 80084b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	2bff      	cmp	r3, #255	; 0xff
 80084b6:	d025      	beq.n	8008504 <USBD_LL_DataInStage+0x15a>
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d122      	bne.n	8008504 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d11c      	bne.n	8008504 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80084ca:	7dfa      	ldrb	r2, [r7, #23]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	32ae      	adds	r2, #174	; 0xae
 80084d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d014      	beq.n	8008504 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80084da:	7dfa      	ldrb	r2, [r7, #23]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80084e2:	7dfa      	ldrb	r2, [r7, #23]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	32ae      	adds	r2, #174	; 0xae
 80084e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	7afa      	ldrb	r2, [r7, #11]
 80084f0:	4611      	mov	r1, r2
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	4798      	blx	r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80084fa:	7dbb      	ldrb	r3, [r7, #22]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008500:	7dbb      	ldrb	r3, [r7, #22]
 8008502:	e000      	b.n	8008506 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008546:	2b00      	cmp	r3, #0
 8008548:	d014      	beq.n	8008574 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00e      	beq.n	8008574 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	6852      	ldr	r2, [r2, #4]
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	4611      	mov	r1, r2
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	4798      	blx	r3
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008570:	2303      	movs	r3, #3
 8008572:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008574:	2340      	movs	r3, #64	; 0x40
 8008576:	2200      	movs	r2, #0
 8008578:	2100      	movs	r1, #0
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f001 fbf5 	bl	8009d6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2240      	movs	r2, #64	; 0x40
 800858c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008590:	2340      	movs	r3, #64	; 0x40
 8008592:	2200      	movs	r2, #0
 8008594:	2180      	movs	r1, #128	; 0x80
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 fbe7 	bl	8009d6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2240      	movs	r2, #64	; 0x40
 80085a6:	621a      	str	r2, [r3, #32]

  return ret;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	460b      	mov	r3, r1
 80085bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	78fa      	ldrb	r2, [r7, #3]
 80085c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2204      	movs	r2, #4
 80085ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b04      	cmp	r3, #4
 8008610:	d106      	bne.n	8008620 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008618:	b2da      	uxtb	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b03      	cmp	r3, #3
 8008640:	d110      	bne.n	8008664 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d005      	beq.n	8008664 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b082      	sub	sp, #8
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	32ae      	adds	r2, #174	; 0xae
 8008684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800868c:	2303      	movs	r3, #3
 800868e:	e01c      	b.n	80086ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b03      	cmp	r3, #3
 800869a:	d115      	bne.n	80086c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	32ae      	adds	r2, #174	; 0xae
 80086a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00b      	beq.n	80086c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	32ae      	adds	r2, #174	; 0xae
 80086ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	78fa      	ldrb	r2, [r7, #3]
 80086c2:	4611      	mov	r1, r2
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b082      	sub	sp, #8
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	460b      	mov	r3, r1
 80086dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	32ae      	adds	r2, #174	; 0xae
 80086e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e01c      	b.n	800872e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d115      	bne.n	800872c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	32ae      	adds	r2, #174	; 0xae
 800870a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	32ae      	adds	r2, #174	; 0xae
 800871e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	78fa      	ldrb	r2, [r7, #3]
 8008726:	4611      	mov	r1, r2
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00e      	beq.n	8008788 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6852      	ldr	r2, [r2, #4]
 8008776:	b2d2      	uxtb	r2, r2
 8008778:	4611      	mov	r1, r2
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008784:	2303      	movs	r3, #3
 8008786:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008788:	7bfb      	ldrb	r3, [r7, #15]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008792:	b480      	push	{r7}
 8008794:	b083      	sub	sp, #12
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800879e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80087b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b086      	sub	sp, #24
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	885b      	ldrh	r3, [r3, #2]
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d920      	bls.n	8008830 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80087f6:	e013      	b.n	8008820 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80087f8:	f107 030a 	add.w	r3, r7, #10
 80087fc:	4619      	mov	r1, r3
 80087fe:	6978      	ldr	r0, [r7, #20]
 8008800:	f000 f81b 	bl	800883a <USBD_GetNextDesc>
 8008804:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	2b05      	cmp	r3, #5
 800880c:	d108      	bne.n	8008820 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	789b      	ldrb	r3, [r3, #2]
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	429a      	cmp	r2, r3
 800881a:	d008      	beq.n	800882e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800881c:	2300      	movs	r3, #0
 800881e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	885b      	ldrh	r3, [r3, #2]
 8008824:	b29a      	uxth	r2, r3
 8008826:	897b      	ldrh	r3, [r7, #10]
 8008828:	429a      	cmp	r2, r3
 800882a:	d8e5      	bhi.n	80087f8 <USBD_GetEpDesc+0x32>
 800882c:	e000      	b.n	8008830 <USBD_GetEpDesc+0x6a>
          break;
 800882e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008830:	693b      	ldr	r3, [r7, #16]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800883a:	b480      	push	{r7}
 800883c:	b085      	sub	sp, #20
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	881a      	ldrh	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	b29b      	uxth	r3, r3
 8008852:	4413      	add	r3, r2
 8008854:	b29a      	uxth	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4413      	add	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008866:	68fb      	ldr	r3, [r7, #12]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	3301      	adds	r3, #1
 800888a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008892:	8a3b      	ldrh	r3, [r7, #16]
 8008894:	021b      	lsls	r3, r3, #8
 8008896:	b21a      	sxth	r2, r3
 8008898:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800889c:	4313      	orrs	r3, r2
 800889e:	b21b      	sxth	r3, r3
 80088a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088a2:	89fb      	ldrh	r3, [r7, #14]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088c6:	2b40      	cmp	r3, #64	; 0x40
 80088c8:	d005      	beq.n	80088d6 <USBD_StdDevReq+0x26>
 80088ca:	2b40      	cmp	r3, #64	; 0x40
 80088cc:	d857      	bhi.n	800897e <USBD_StdDevReq+0xce>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00f      	beq.n	80088f2 <USBD_StdDevReq+0x42>
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	d153      	bne.n	800897e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	32ae      	adds	r2, #174	; 0xae
 80088e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	4798      	blx	r3
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]
      break;
 80088f0:	e04a      	b.n	8008988 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b09      	cmp	r3, #9
 80088f8:	d83b      	bhi.n	8008972 <USBD_StdDevReq+0xc2>
 80088fa:	a201      	add	r2, pc, #4	; (adr r2, 8008900 <USBD_StdDevReq+0x50>)
 80088fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008900:	08008955 	.word	0x08008955
 8008904:	08008969 	.word	0x08008969
 8008908:	08008973 	.word	0x08008973
 800890c:	0800895f 	.word	0x0800895f
 8008910:	08008973 	.word	0x08008973
 8008914:	08008933 	.word	0x08008933
 8008918:	08008929 	.word	0x08008929
 800891c:	08008973 	.word	0x08008973
 8008920:	0800894b 	.word	0x0800894b
 8008924:	0800893d 	.word	0x0800893d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa3c 	bl	8008da8 <USBD_GetDescriptor>
          break;
 8008930:	e024      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fba1 	bl	800907c <USBD_SetAddress>
          break;
 800893a:	e01f      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fbe0 	bl	8009104 <USBD_SetConfig>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
          break;
 8008948:	e018      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fc83 	bl	8009258 <USBD_GetConfig>
          break;
 8008952:	e013      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fcb4 	bl	80092c4 <USBD_GetStatus>
          break;
 800895c:	e00e      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fce3 	bl	800932c <USBD_SetFeature>
          break;
 8008966:	e009      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fd07 	bl	800937e <USBD_ClrFeature>
          break;
 8008970:	e004      	b.n	800897c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fd5e 	bl	8009436 <USBD_CtlError>
          break;
 800897a:	bf00      	nop
      }
      break;
 800897c:	e004      	b.n	8008988 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fd58 	bl	8009436 <USBD_CtlError>
      break;
 8008986:	bf00      	nop
  }

  return ret;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop

08008994 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089aa:	2b40      	cmp	r3, #64	; 0x40
 80089ac:	d005      	beq.n	80089ba <USBD_StdItfReq+0x26>
 80089ae:	2b40      	cmp	r3, #64	; 0x40
 80089b0:	d852      	bhi.n	8008a58 <USBD_StdItfReq+0xc4>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <USBD_StdItfReq+0x26>
 80089b6:	2b20      	cmp	r3, #32
 80089b8:	d14e      	bne.n	8008a58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	3b01      	subs	r3, #1
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d840      	bhi.n	8008a4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	889b      	ldrh	r3, [r3, #4]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d836      	bhi.n	8008a40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	889b      	ldrh	r3, [r3, #4]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7ff fed9 	bl	8008792 <USBD_CoreFindIF>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	2bff      	cmp	r3, #255	; 0xff
 80089e8:	d01d      	beq.n	8008a26 <USBD_StdItfReq+0x92>
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d11a      	bne.n	8008a26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80089f0:	7bba      	ldrb	r2, [r7, #14]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	32ae      	adds	r2, #174	; 0xae
 80089f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00f      	beq.n	8008a20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008a00:	7bba      	ldrb	r2, [r7, #14]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a08:	7bba      	ldrb	r2, [r7, #14]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	32ae      	adds	r2, #174	; 0xae
 8008a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	4798      	blx	r3
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a1e:	e004      	b.n	8008a2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008a20:	2303      	movs	r3, #3
 8008a22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a24:	e001      	b.n	8008a2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008a26:	2303      	movs	r3, #3
 8008a28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	88db      	ldrh	r3, [r3, #6]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d110      	bne.n	8008a54 <USBD_StdItfReq+0xc0>
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10d      	bne.n	8008a54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fdc7 	bl	80095cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a3e:	e009      	b.n	8008a54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fcf7 	bl	8009436 <USBD_CtlError>
          break;
 8008a48:	e004      	b.n	8008a54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fcf2 	bl	8009436 <USBD_CtlError>
          break;
 8008a52:	e000      	b.n	8008a56 <USBD_StdItfReq+0xc2>
          break;
 8008a54:	bf00      	nop
      }
      break;
 8008a56:	e004      	b.n	8008a62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fceb 	bl	8009436 <USBD_CtlError>
      break;
 8008a60:	bf00      	nop
  }

  return ret;
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	889b      	ldrh	r3, [r3, #4]
 8008a7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a88:	2b40      	cmp	r3, #64	; 0x40
 8008a8a:	d007      	beq.n	8008a9c <USBD_StdEPReq+0x30>
 8008a8c:	2b40      	cmp	r3, #64	; 0x40
 8008a8e:	f200 817f 	bhi.w	8008d90 <USBD_StdEPReq+0x324>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d02a      	beq.n	8008aec <USBD_StdEPReq+0x80>
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	f040 817a 	bne.w	8008d90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff fe83 	bl	80087ac <USBD_CoreFindEP>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008aaa:	7b7b      	ldrb	r3, [r7, #13]
 8008aac:	2bff      	cmp	r3, #255	; 0xff
 8008aae:	f000 8174 	beq.w	8008d9a <USBD_StdEPReq+0x32e>
 8008ab2:	7b7b      	ldrb	r3, [r7, #13]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f040 8170 	bne.w	8008d9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008aba:	7b7a      	ldrb	r2, [r7, #13]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008ac2:	7b7a      	ldrb	r2, [r7, #13]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	32ae      	adds	r2, #174	; 0xae
 8008ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 8163 	beq.w	8008d9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008ad4:	7b7a      	ldrb	r2, [r7, #13]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	32ae      	adds	r2, #174	; 0xae
 8008ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	4798      	blx	r3
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008aea:	e156      	b.n	8008d9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d008      	beq.n	8008b06 <USBD_StdEPReq+0x9a>
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	f300 8145 	bgt.w	8008d84 <USBD_StdEPReq+0x318>
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 809b 	beq.w	8008c36 <USBD_StdEPReq+0x1ca>
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d03c      	beq.n	8008b7e <USBD_StdEPReq+0x112>
 8008b04:	e13e      	b.n	8008d84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d002      	beq.n	8008b18 <USBD_StdEPReq+0xac>
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d016      	beq.n	8008b44 <USBD_StdEPReq+0xd8>
 8008b16:	e02c      	b.n	8008b72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <USBD_StdEPReq+0xce>
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	2b80      	cmp	r3, #128	; 0x80
 8008b22:	d00a      	beq.n	8008b3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 f963 	bl	8009df4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b2e:	2180      	movs	r1, #128	; 0x80
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 f95f 	bl	8009df4 <USBD_LL_StallEP>
 8008b36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b38:	e020      	b.n	8008b7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fc7a 	bl	8009436 <USBD_CtlError>
              break;
 8008b42:	e01b      	b.n	8008b7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	885b      	ldrh	r3, [r3, #2]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10e      	bne.n	8008b6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00b      	beq.n	8008b6a <USBD_StdEPReq+0xfe>
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b80      	cmp	r3, #128	; 0x80
 8008b56:	d008      	beq.n	8008b6a <USBD_StdEPReq+0xfe>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	88db      	ldrh	r3, [r3, #6]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f001 f945 	bl	8009df4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fd2e 	bl	80095cc <USBD_CtlSendStatus>

              break;
 8008b70:	e004      	b.n	8008b7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fc5e 	bl	8009436 <USBD_CtlError>
              break;
 8008b7a:	bf00      	nop
          }
          break;
 8008b7c:	e107      	b.n	8008d8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d002      	beq.n	8008b90 <USBD_StdEPReq+0x124>
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d016      	beq.n	8008bbc <USBD_StdEPReq+0x150>
 8008b8e:	e04b      	b.n	8008c28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00d      	beq.n	8008bb2 <USBD_StdEPReq+0x146>
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b80      	cmp	r3, #128	; 0x80
 8008b9a:	d00a      	beq.n	8008bb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 f927 	bl	8009df4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ba6:	2180      	movs	r1, #128	; 0x80
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f923 	bl	8009df4 <USBD_LL_StallEP>
 8008bae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bb0:	e040      	b.n	8008c34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fc3e 	bl	8009436 <USBD_CtlError>
              break;
 8008bba:	e03b      	b.n	8008c34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d136      	bne.n	8008c32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 f92d 	bl	8009e32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fcf7 	bl	80095cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff fde2 	bl	80087ac <USBD_CoreFindEP>
 8008be8:	4603      	mov	r3, r0
 8008bea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bec:	7b7b      	ldrb	r3, [r7, #13]
 8008bee:	2bff      	cmp	r3, #255	; 0xff
 8008bf0:	d01f      	beq.n	8008c32 <USBD_StdEPReq+0x1c6>
 8008bf2:	7b7b      	ldrb	r3, [r7, #13]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d11c      	bne.n	8008c32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008bf8:	7b7a      	ldrb	r2, [r7, #13]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008c00:	7b7a      	ldrb	r2, [r7, #13]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	32ae      	adds	r2, #174	; 0xae
 8008c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d010      	beq.n	8008c32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c10:	7b7a      	ldrb	r2, [r7, #13]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	32ae      	adds	r2, #174	; 0xae
 8008c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	4798      	blx	r3
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008c26:	e004      	b.n	8008c32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fc03 	bl	8009436 <USBD_CtlError>
              break;
 8008c30:	e000      	b.n	8008c34 <USBD_StdEPReq+0x1c8>
              break;
 8008c32:	bf00      	nop
          }
          break;
 8008c34:	e0ab      	b.n	8008d8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d002      	beq.n	8008c48 <USBD_StdEPReq+0x1dc>
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d032      	beq.n	8008cac <USBD_StdEPReq+0x240>
 8008c46:	e097      	b.n	8008d78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d007      	beq.n	8008c5e <USBD_StdEPReq+0x1f2>
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b80      	cmp	r3, #128	; 0x80
 8008c52:	d004      	beq.n	8008c5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fbed 	bl	8009436 <USBD_CtlError>
                break;
 8008c5c:	e091      	b.n	8008d82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	da0b      	bge.n	8008c7e <USBD_StdEPReq+0x212>
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	3310      	adds	r3, #16
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	e00b      	b.n	8008c96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	4413      	add	r3, r2
 8008c94:	3304      	adds	r3, #4
 8008c96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fc37 	bl	8009518 <USBD_CtlSendData>
              break;
 8008caa:	e06a      	b.n	8008d82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	da11      	bge.n	8008cd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	f003 020f 	and.w	r2, r3, #15
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	3324      	adds	r3, #36	; 0x24
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d117      	bne.n	8008cfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fbb0 	bl	8009436 <USBD_CtlError>
                  break;
 8008cd6:	e054      	b.n	8008d82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	f003 020f 	and.w	r2, r3, #15
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	440b      	add	r3, r1
 8008cea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d104      	bne.n	8008cfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fb9d 	bl	8009436 <USBD_CtlError>
                  break;
 8008cfc:	e041      	b.n	8008d82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	da0b      	bge.n	8008d1e <USBD_StdEPReq+0x2b2>
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	3310      	adds	r3, #16
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	4413      	add	r3, r2
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	e00b      	b.n	8008d36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d24:	4613      	mov	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	4413      	add	r3, r2
 8008d34:	3304      	adds	r3, #4
 8008d36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <USBD_StdEPReq+0x2d8>
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b80      	cmp	r3, #128	; 0x80
 8008d42:	d103      	bne.n	8008d4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	e00e      	b.n	8008d6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 f88d 	bl	8009e70 <USBD_LL_IsStallEP>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	e002      	b.n	8008d6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fbd1 	bl	8009518 <USBD_CtlSendData>
              break;
 8008d76:	e004      	b.n	8008d82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fb5b 	bl	8009436 <USBD_CtlError>
              break;
 8008d80:	bf00      	nop
          }
          break;
 8008d82:	e004      	b.n	8008d8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fb55 	bl	8009436 <USBD_CtlError>
          break;
 8008d8c:	bf00      	nop
      }
      break;
 8008d8e:	e005      	b.n	8008d9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fb4f 	bl	8009436 <USBD_CtlError>
      break;
 8008d98:	e000      	b.n	8008d9c <USBD_StdEPReq+0x330>
      break;
 8008d9a:	bf00      	nop
  }

  return ret;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	885b      	ldrh	r3, [r3, #2]
 8008dc2:	0a1b      	lsrs	r3, r3, #8
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	2b06      	cmp	r3, #6
 8008dca:	f200 8128 	bhi.w	800901e <USBD_GetDescriptor+0x276>
 8008dce:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <USBD_GetDescriptor+0x2c>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008df1 	.word	0x08008df1
 8008dd8:	08008e09 	.word	0x08008e09
 8008ddc:	08008e49 	.word	0x08008e49
 8008de0:	0800901f 	.word	0x0800901f
 8008de4:	0800901f 	.word	0x0800901f
 8008de8:	08008fbf 	.word	0x08008fbf
 8008dec:	08008feb 	.word	0x08008feb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	7c12      	ldrb	r2, [r2, #16]
 8008dfc:	f107 0108 	add.w	r1, r7, #8
 8008e00:	4610      	mov	r0, r2
 8008e02:	4798      	blx	r3
 8008e04:	60f8      	str	r0, [r7, #12]
      break;
 8008e06:	e112      	b.n	800902e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	7c1b      	ldrb	r3, [r3, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10d      	bne.n	8008e2c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e18:	f107 0208 	add.w	r2, r7, #8
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4798      	blx	r3
 8008e20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3301      	adds	r3, #1
 8008e26:	2202      	movs	r2, #2
 8008e28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e2a:	e100      	b.n	800902e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	f107 0208 	add.w	r2, r7, #8
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4798      	blx	r3
 8008e3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3301      	adds	r3, #1
 8008e42:	2202      	movs	r2, #2
 8008e44:	701a      	strb	r2, [r3, #0]
      break;
 8008e46:	e0f2      	b.n	800902e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	885b      	ldrh	r3, [r3, #2]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b05      	cmp	r3, #5
 8008e50:	f200 80ac 	bhi.w	8008fac <USBD_GetDescriptor+0x204>
 8008e54:	a201      	add	r2, pc, #4	; (adr r2, 8008e5c <USBD_GetDescriptor+0xb4>)
 8008e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5a:	bf00      	nop
 8008e5c:	08008e75 	.word	0x08008e75
 8008e60:	08008ea9 	.word	0x08008ea9
 8008e64:	08008edd 	.word	0x08008edd
 8008e68:	08008f11 	.word	0x08008f11
 8008e6c:	08008f45 	.word	0x08008f45
 8008e70:	08008f79 	.word	0x08008f79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00b      	beq.n	8008e98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	7c12      	ldrb	r2, [r2, #16]
 8008e8c:	f107 0108 	add.w	r1, r7, #8
 8008e90:	4610      	mov	r0, r2
 8008e92:	4798      	blx	r3
 8008e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e96:	e091      	b.n	8008fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 facb 	bl	8009436 <USBD_CtlError>
            err++;
 8008ea0:	7afb      	ldrb	r3, [r7, #11]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ea6:	e089      	b.n	8008fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00b      	beq.n	8008ecc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	7c12      	ldrb	r2, [r2, #16]
 8008ec0:	f107 0108 	add.w	r1, r7, #8
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4798      	blx	r3
 8008ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eca:	e077      	b.n	8008fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fab1 	bl	8009436 <USBD_CtlError>
            err++;
 8008ed4:	7afb      	ldrb	r3, [r7, #11]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eda:	e06f      	b.n	8008fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00b      	beq.n	8008f00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	7c12      	ldrb	r2, [r2, #16]
 8008ef4:	f107 0108 	add.w	r1, r7, #8
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4798      	blx	r3
 8008efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008efe:	e05d      	b.n	8008fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fa97 	bl	8009436 <USBD_CtlError>
            err++;
 8008f08:	7afb      	ldrb	r3, [r7, #11]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f0e:	e055      	b.n	8008fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	7c12      	ldrb	r2, [r2, #16]
 8008f28:	f107 0108 	add.w	r1, r7, #8
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
 8008f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f32:	e043      	b.n	8008fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fa7d 	bl	8009436 <USBD_CtlError>
            err++;
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	72fb      	strb	r3, [r7, #11]
          break;
 8008f42:	e03b      	b.n	8008fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	7c12      	ldrb	r2, [r2, #16]
 8008f5c:	f107 0108 	add.w	r1, r7, #8
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
 8008f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f66:	e029      	b.n	8008fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fa63 	bl	8009436 <USBD_CtlError>
            err++;
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	3301      	adds	r3, #1
 8008f74:	72fb      	strb	r3, [r7, #11]
          break;
 8008f76:	e021      	b.n	8008fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00b      	beq.n	8008f9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	7c12      	ldrb	r2, [r2, #16]
 8008f90:	f107 0108 	add.w	r1, r7, #8
 8008f94:	4610      	mov	r0, r2
 8008f96:	4798      	blx	r3
 8008f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f9a:	e00f      	b.n	8008fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa49 	bl	8009436 <USBD_CtlError>
            err++;
 8008fa4:	7afb      	ldrb	r3, [r7, #11]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8008faa:	e007      	b.n	8008fbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa41 	bl	8009436 <USBD_CtlError>
          err++;
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008fba:	bf00      	nop
      }
      break;
 8008fbc:	e037      	b.n	800902e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	7c1b      	ldrb	r3, [r3, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d109      	bne.n	8008fda <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fce:	f107 0208 	add.w	r2, r7, #8
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4798      	blx	r3
 8008fd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fd8:	e029      	b.n	800902e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fa2a 	bl	8009436 <USBD_CtlError>
        err++;
 8008fe2:	7afb      	ldrb	r3, [r7, #11]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fe8:	e021      	b.n	800902e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	7c1b      	ldrb	r3, [r3, #16]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10d      	bne.n	800900e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffa:	f107 0208 	add.w	r2, r7, #8
 8008ffe:	4610      	mov	r0, r2
 8009000:	4798      	blx	r3
 8009002:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3301      	adds	r3, #1
 8009008:	2207      	movs	r2, #7
 800900a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800900c:	e00f      	b.n	800902e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fa10 	bl	8009436 <USBD_CtlError>
        err++;
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	3301      	adds	r3, #1
 800901a:	72fb      	strb	r3, [r7, #11]
      break;
 800901c:	e007      	b.n	800902e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fa08 	bl	8009436 <USBD_CtlError>
      err++;
 8009026:	7afb      	ldrb	r3, [r7, #11]
 8009028:	3301      	adds	r3, #1
 800902a:	72fb      	strb	r3, [r7, #11]
      break;
 800902c:	bf00      	nop
  }

  if (err != 0U)
 800902e:	7afb      	ldrb	r3, [r7, #11]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d11e      	bne.n	8009072 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	88db      	ldrh	r3, [r3, #6]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d016      	beq.n	800906a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800903c:	893b      	ldrh	r3, [r7, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00e      	beq.n	8009060 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	88da      	ldrh	r2, [r3, #6]
 8009046:	893b      	ldrh	r3, [r7, #8]
 8009048:	4293      	cmp	r3, r2
 800904a:	bf28      	it	cs
 800904c:	4613      	movcs	r3, r2
 800904e:	b29b      	uxth	r3, r3
 8009050:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009052:	893b      	ldrh	r3, [r7, #8]
 8009054:	461a      	mov	r2, r3
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fa5d 	bl	8009518 <USBD_CtlSendData>
 800905e:	e009      	b.n	8009074 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f9e7 	bl	8009436 <USBD_CtlError>
 8009068:	e004      	b.n	8009074 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 faae 	bl	80095cc <USBD_CtlSendStatus>
 8009070:	e000      	b.n	8009074 <USBD_GetDescriptor+0x2cc>
    return;
 8009072:	bf00      	nop
  }
}
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop

0800907c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	889b      	ldrh	r3, [r3, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d131      	bne.n	80090f2 <USBD_SetAddress+0x76>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	88db      	ldrh	r3, [r3, #6]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d12d      	bne.n	80090f2 <USBD_SetAddress+0x76>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	885b      	ldrh	r3, [r3, #2]
 800909a:	2b7f      	cmp	r3, #127	; 0x7f
 800909c:	d829      	bhi.n	80090f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	885b      	ldrh	r3, [r3, #2]
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d104      	bne.n	80090c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f9bc 	bl	8009436 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090be:	e01d      	b.n	80090fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7bfa      	ldrb	r2, [r7, #15]
 80090c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fefb 	bl	8009ec8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa7a 	bl	80095cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d004      	beq.n	80090e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2202      	movs	r2, #2
 80090e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e6:	e009      	b.n	80090fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f0:	e004      	b.n	80090fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f99e 	bl	8009436 <USBD_CtlError>
  }
}
 80090fa:	bf00      	nop
 80090fc:	bf00      	nop
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	885b      	ldrh	r3, [r3, #2]
 8009116:	b2da      	uxtb	r2, r3
 8009118:	4b4e      	ldr	r3, [pc, #312]	; (8009254 <USBD_SetConfig+0x150>)
 800911a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800911c:	4b4d      	ldr	r3, [pc, #308]	; (8009254 <USBD_SetConfig+0x150>)
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d905      	bls.n	8009130 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f985 	bl	8009436 <USBD_CtlError>
    return USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	e08c      	b.n	800924a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d002      	beq.n	8009142 <USBD_SetConfig+0x3e>
 800913c:	2b03      	cmp	r3, #3
 800913e:	d029      	beq.n	8009194 <USBD_SetConfig+0x90>
 8009140:	e075      	b.n	800922e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009142:	4b44      	ldr	r3, [pc, #272]	; (8009254 <USBD_SetConfig+0x150>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d020      	beq.n	800918c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800914a:	4b42      	ldr	r3, [pc, #264]	; (8009254 <USBD_SetConfig+0x150>)
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009154:	4b3f      	ldr	r3, [pc, #252]	; (8009254 <USBD_SetConfig+0x150>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7fe ffe7 	bl	800812e <USBD_SetClassConfig>
 8009160:	4603      	mov	r3, r0
 8009162:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d008      	beq.n	800917c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f962 	bl	8009436 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2202      	movs	r2, #2
 8009176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800917a:	e065      	b.n	8009248 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fa25 	bl	80095cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2203      	movs	r2, #3
 8009186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800918a:	e05d      	b.n	8009248 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fa1d 	bl	80095cc <USBD_CtlSendStatus>
      break;
 8009192:	e059      	b.n	8009248 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009194:	4b2f      	ldr	r3, [pc, #188]	; (8009254 <USBD_SetConfig+0x150>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d112      	bne.n	80091c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80091a4:	4b2b      	ldr	r3, [pc, #172]	; (8009254 <USBD_SetConfig+0x150>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	461a      	mov	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091ae:	4b29      	ldr	r3, [pc, #164]	; (8009254 <USBD_SetConfig+0x150>)
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7fe ffd6 	bl	8008166 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa06 	bl	80095cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091c0:	e042      	b.n	8009248 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80091c2:	4b24      	ldr	r3, [pc, #144]	; (8009254 <USBD_SetConfig+0x150>)
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d02a      	beq.n	8009226 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7fe ffc4 	bl	8008166 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80091de:	4b1d      	ldr	r3, [pc, #116]	; (8009254 <USBD_SetConfig+0x150>)
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091e8:	4b1a      	ldr	r3, [pc, #104]	; (8009254 <USBD_SetConfig+0x150>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7fe ff9d 	bl	800812e <USBD_SetClassConfig>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00f      	beq.n	800921e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f918 	bl	8009436 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	b2db      	uxtb	r3, r3
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7fe ffa9 	bl	8008166 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800921c:	e014      	b.n	8009248 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f9d4 	bl	80095cc <USBD_CtlSendStatus>
      break;
 8009224:	e010      	b.n	8009248 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f9d0 	bl	80095cc <USBD_CtlSendStatus>
      break;
 800922c:	e00c      	b.n	8009248 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f900 	bl	8009436 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009236:	4b07      	ldr	r3, [pc, #28]	; (8009254 <USBD_SetConfig+0x150>)
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7fe ff92 	bl	8008166 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009242:	2303      	movs	r3, #3
 8009244:	73fb      	strb	r3, [r7, #15]
      break;
 8009246:	bf00      	nop
  }

  return ret;
 8009248:	7bfb      	ldrb	r3, [r7, #15]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20001394 	.word	0x20001394

08009258 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	88db      	ldrh	r3, [r3, #6]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d004      	beq.n	8009274 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f8e2 	bl	8009436 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009272:	e023      	b.n	80092bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	dc02      	bgt.n	8009286 <USBD_GetConfig+0x2e>
 8009280:	2b00      	cmp	r3, #0
 8009282:	dc03      	bgt.n	800928c <USBD_GetConfig+0x34>
 8009284:	e015      	b.n	80092b2 <USBD_GetConfig+0x5a>
 8009286:	2b03      	cmp	r3, #3
 8009288:	d00b      	beq.n	80092a2 <USBD_GetConfig+0x4a>
 800928a:	e012      	b.n	80092b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	3308      	adds	r3, #8
 8009296:	2201      	movs	r2, #1
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f93c 	bl	8009518 <USBD_CtlSendData>
        break;
 80092a0:	e00c      	b.n	80092bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3304      	adds	r3, #4
 80092a6:	2201      	movs	r2, #1
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f934 	bl	8009518 <USBD_CtlSendData>
        break;
 80092b0:	e004      	b.n	80092bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f8be 	bl	8009436 <USBD_CtlError>
        break;
 80092ba:	bf00      	nop
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d81e      	bhi.n	800931a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	88db      	ldrh	r3, [r3, #6]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d004      	beq.n	80092ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f8a5 	bl	8009436 <USBD_CtlError>
        break;
 80092ec:	e01a      	b.n	8009324 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d005      	beq.n	800930a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f043 0202 	orr.w	r2, r3, #2
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	330c      	adds	r3, #12
 800930e:	2202      	movs	r2, #2
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f900 	bl	8009518 <USBD_CtlSendData>
      break;
 8009318:	e004      	b.n	8009324 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f88a 	bl	8009436 <USBD_CtlError>
      break;
 8009322:	bf00      	nop
  }
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	885b      	ldrh	r3, [r3, #2]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d107      	bne.n	800934e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f940 	bl	80095cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800934c:	e013      	b.n	8009376 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	885b      	ldrh	r3, [r3, #2]
 8009352:	2b02      	cmp	r3, #2
 8009354:	d10b      	bne.n	800936e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	889b      	ldrh	r3, [r3, #4]
 800935a:	0a1b      	lsrs	r3, r3, #8
 800935c:	b29b      	uxth	r3, r3
 800935e:	b2da      	uxtb	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f930 	bl	80095cc <USBD_CtlSendStatus>
}
 800936c:	e003      	b.n	8009376 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f860 	bl	8009436 <USBD_CtlError>
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938e:	b2db      	uxtb	r3, r3
 8009390:	3b01      	subs	r3, #1
 8009392:	2b02      	cmp	r3, #2
 8009394:	d80b      	bhi.n	80093ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	885b      	ldrh	r3, [r3, #2]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d10c      	bne.n	80093b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f910 	bl	80095cc <USBD_CtlSendStatus>
      }
      break;
 80093ac:	e004      	b.n	80093b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f840 	bl	8009436 <USBD_CtlError>
      break;
 80093b6:	e000      	b.n	80093ba <USBD_ClrFeature+0x3c>
      break;
 80093b8:	bf00      	nop
  }
}
 80093ba:	bf00      	nop
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	781a      	ldrb	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3301      	adds	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	781a      	ldrb	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7ff fa41 	bl	8008874 <SWAPBYTE>
 80093f2:	4603      	mov	r3, r0
 80093f4:	461a      	mov	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3301      	adds	r3, #1
 80093fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3301      	adds	r3, #1
 8009404:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f7ff fa34 	bl	8008874 <SWAPBYTE>
 800940c:	4603      	mov	r3, r0
 800940e:	461a      	mov	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	3301      	adds	r3, #1
 8009418:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3301      	adds	r3, #1
 800941e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f7ff fa27 	bl	8008874 <SWAPBYTE>
 8009426:	4603      	mov	r3, r0
 8009428:	461a      	mov	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	80da      	strh	r2, [r3, #6]
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009440:	2180      	movs	r1, #128	; 0x80
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fcd6 	bl	8009df4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009448:	2100      	movs	r1, #0
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fcd2 	bl	8009df4 <USBD_LL_StallEP>
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009464:	2300      	movs	r3, #0
 8009466:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d036      	beq.n	80094dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009472:	6938      	ldr	r0, [r7, #16]
 8009474:	f000 f836 	bl	80094e4 <USBD_GetLen>
 8009478:	4603      	mov	r3, r0
 800947a:	3301      	adds	r3, #1
 800947c:	b29b      	uxth	r3, r3
 800947e:	005b      	lsls	r3, r3, #1
 8009480:	b29a      	uxth	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009486:	7dfb      	ldrb	r3, [r7, #23]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	4413      	add	r3, r2
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	7812      	ldrb	r2, [r2, #0]
 8009490:	701a      	strb	r2, [r3, #0]
  idx++;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	3301      	adds	r3, #1
 8009496:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	4413      	add	r3, r2
 800949e:	2203      	movs	r2, #3
 80094a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	3301      	adds	r3, #1
 80094a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80094a8:	e013      	b.n	80094d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	4413      	add	r3, r2
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	7812      	ldrb	r2, [r2, #0]
 80094b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	3301      	adds	r3, #1
 80094ba:	613b      	str	r3, [r7, #16]
    idx++;
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	3301      	adds	r3, #1
 80094c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	4413      	add	r3, r2
 80094c8:	2200      	movs	r2, #0
 80094ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	3301      	adds	r3, #1
 80094d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e7      	bne.n	80094aa <USBD_GetString+0x52>
 80094da:	e000      	b.n	80094de <USBD_GetString+0x86>
    return;
 80094dc:	bf00      	nop
  }
}
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80094f4:	e005      	b.n	8009502 <USBD_GetLen+0x1e>
  {
    len++;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
 80094f8:	3301      	adds	r3, #1
 80094fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	3301      	adds	r3, #1
 8009500:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1f5      	bne.n	80094f6 <USBD_GetLen+0x12>
  }

  return len;
 800950a:	7bfb      	ldrb	r3, [r7, #15]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2202      	movs	r2, #2
 8009528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	2100      	movs	r1, #0
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 fce1 	bl	8009f06 <USBD_LL_Transmit>

  return USBD_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	2100      	movs	r1, #0
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 fcd0 	bl	8009f06 <USBD_LL_Transmit>

  return USBD_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2203      	movs	r2, #3
 8009580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	2100      	movs	r1, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fcd4 	bl	8009f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	60f8      	str	r0, [r7, #12]
 80095b2:	60b9      	str	r1, [r7, #8]
 80095b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	2100      	movs	r1, #0
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fcc3 	bl	8009f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2204      	movs	r2, #4
 80095d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095dc:	2300      	movs	r3, #0
 80095de:	2200      	movs	r2, #0
 80095e0:	2100      	movs	r1, #0
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fc8f 	bl	8009f06 <USBD_LL_Transmit>

  return USBD_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2205      	movs	r2, #5
 80095fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009602:	2300      	movs	r3, #0
 8009604:	2200      	movs	r2, #0
 8009606:	2100      	movs	r1, #0
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fc9d 	bl	8009f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800961c:	2200      	movs	r2, #0
 800961e:	4912      	ldr	r1, [pc, #72]	; (8009668 <MX_USB_DEVICE_Init+0x50>)
 8009620:	4812      	ldr	r0, [pc, #72]	; (800966c <MX_USB_DEVICE_Init+0x54>)
 8009622:	f7fe fd07 	bl	8008034 <USBD_Init>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800962c:	f7f8 f838 	bl	80016a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009630:	490f      	ldr	r1, [pc, #60]	; (8009670 <MX_USB_DEVICE_Init+0x58>)
 8009632:	480e      	ldr	r0, [pc, #56]	; (800966c <MX_USB_DEVICE_Init+0x54>)
 8009634:	f7fe fd2e 	bl	8008094 <USBD_RegisterClass>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800963e:	f7f8 f82f 	bl	80016a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009642:	490c      	ldr	r1, [pc, #48]	; (8009674 <MX_USB_DEVICE_Init+0x5c>)
 8009644:	4809      	ldr	r0, [pc, #36]	; (800966c <MX_USB_DEVICE_Init+0x54>)
 8009646:	f7fe fc1f 	bl	8007e88 <USBD_CDC_RegisterInterface>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009650:	f7f8 f826 	bl	80016a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009654:	4805      	ldr	r0, [pc, #20]	; (800966c <MX_USB_DEVICE_Init+0x54>)
 8009656:	f7fe fd53 	bl	8008100 <USBD_Start>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009660:	f7f8 f81e 	bl	80016a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009664:	bf00      	nop
 8009666:	bd80      	pop	{r7, pc}
 8009668:	200000ac 	.word	0x200000ac
 800966c:	20001398 	.word	0x20001398
 8009670:	20000018 	.word	0x20000018
 8009674:	20000098 	.word	0x20000098

08009678 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800967c:	2200      	movs	r2, #0
 800967e:	4905      	ldr	r1, [pc, #20]	; (8009694 <CDC_Init_FS+0x1c>)
 8009680:	4805      	ldr	r0, [pc, #20]	; (8009698 <CDC_Init_FS+0x20>)
 8009682:	f7fe fc1b 	bl	8007ebc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009686:	4905      	ldr	r1, [pc, #20]	; (800969c <CDC_Init_FS+0x24>)
 8009688:	4803      	ldr	r0, [pc, #12]	; (8009698 <CDC_Init_FS+0x20>)
 800968a:	f7fe fc39 	bl	8007f00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800968e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009690:	4618      	mov	r0, r3
 8009692:	bd80      	pop	{r7, pc}
 8009694:	20001e74 	.word	0x20001e74
 8009698:	20001398 	.word	0x20001398
 800969c:	20001674 	.word	0x20001674

080096a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	6039      	str	r1, [r7, #0]
 80096ba:	71fb      	strb	r3, [r7, #7]
 80096bc:	4613      	mov	r3, r2
 80096be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	2b23      	cmp	r3, #35	; 0x23
 80096c4:	d84a      	bhi.n	800975c <CDC_Control_FS+0xac>
 80096c6:	a201      	add	r2, pc, #4	; (adr r2, 80096cc <CDC_Control_FS+0x1c>)
 80096c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096cc:	0800975d 	.word	0x0800975d
 80096d0:	0800975d 	.word	0x0800975d
 80096d4:	0800975d 	.word	0x0800975d
 80096d8:	0800975d 	.word	0x0800975d
 80096dc:	0800975d 	.word	0x0800975d
 80096e0:	0800975d 	.word	0x0800975d
 80096e4:	0800975d 	.word	0x0800975d
 80096e8:	0800975d 	.word	0x0800975d
 80096ec:	0800975d 	.word	0x0800975d
 80096f0:	0800975d 	.word	0x0800975d
 80096f4:	0800975d 	.word	0x0800975d
 80096f8:	0800975d 	.word	0x0800975d
 80096fc:	0800975d 	.word	0x0800975d
 8009700:	0800975d 	.word	0x0800975d
 8009704:	0800975d 	.word	0x0800975d
 8009708:	0800975d 	.word	0x0800975d
 800970c:	0800975d 	.word	0x0800975d
 8009710:	0800975d 	.word	0x0800975d
 8009714:	0800975d 	.word	0x0800975d
 8009718:	0800975d 	.word	0x0800975d
 800971c:	0800975d 	.word	0x0800975d
 8009720:	0800975d 	.word	0x0800975d
 8009724:	0800975d 	.word	0x0800975d
 8009728:	0800975d 	.word	0x0800975d
 800972c:	0800975d 	.word	0x0800975d
 8009730:	0800975d 	.word	0x0800975d
 8009734:	0800975d 	.word	0x0800975d
 8009738:	0800975d 	.word	0x0800975d
 800973c:	0800975d 	.word	0x0800975d
 8009740:	0800975d 	.word	0x0800975d
 8009744:	0800975d 	.word	0x0800975d
 8009748:	0800975d 	.word	0x0800975d
 800974c:	0800975d 	.word	0x0800975d
 8009750:	0800975d 	.word	0x0800975d
 8009754:	0800975d 	.word	0x0800975d
 8009758:	0800975d 	.word	0x0800975d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800975c:	bf00      	nop
  }

  return (USBD_OK);
 800975e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	4805      	ldr	r0, [pc, #20]	; (8009790 <CDC_Receive_FS+0x24>)
 800977a:	f7fe fbc1 	bl	8007f00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800977e:	4804      	ldr	r0, [pc, #16]	; (8009790 <CDC_Receive_FS+0x24>)
 8009780:	f7fe fc22 	bl	8007fc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009784:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009786:	4618      	mov	r0, r3
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20001398 	.word	0x20001398

08009794 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80097a4:	4b0d      	ldr	r3, [pc, #52]	; (80097dc <CDC_Transmit_FS+0x48>)
 80097a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e00b      	b.n	80097d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80097ba:	887b      	ldrh	r3, [r7, #2]
 80097bc:	461a      	mov	r2, r3
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	4806      	ldr	r0, [pc, #24]	; (80097dc <CDC_Transmit_FS+0x48>)
 80097c2:	f7fe fb7b 	bl	8007ebc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80097c6:	4805      	ldr	r0, [pc, #20]	; (80097dc <CDC_Transmit_FS+0x48>)
 80097c8:	f7fe fbb8 	bl	8007f3c <USBD_CDC_TransmitPacket>
 80097cc:	4603      	mov	r3, r0
 80097ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20001398 	.word	0x20001398

080097e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	4613      	mov	r3, r2
 80097ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80097f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	371c      	adds	r7, #28
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
	...

08009804 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	6039      	str	r1, [r7, #0]
 800980e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2212      	movs	r2, #18
 8009814:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009816:	4b03      	ldr	r3, [pc, #12]	; (8009824 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	200000c8 	.word	0x200000c8

08009828 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	6039      	str	r1, [r7, #0]
 8009832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	2204      	movs	r2, #4
 8009838:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800983a:	4b03      	ldr	r3, [pc, #12]	; (8009848 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800983c:	4618      	mov	r0, r3
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	200000dc 	.word	0x200000dc

0800984c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d105      	bne.n	800986a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	4907      	ldr	r1, [pc, #28]	; (8009880 <USBD_FS_ProductStrDescriptor+0x34>)
 8009862:	4808      	ldr	r0, [pc, #32]	; (8009884 <USBD_FS_ProductStrDescriptor+0x38>)
 8009864:	f7ff fdf8 	bl	8009458 <USBD_GetString>
 8009868:	e004      	b.n	8009874 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	4904      	ldr	r1, [pc, #16]	; (8009880 <USBD_FS_ProductStrDescriptor+0x34>)
 800986e:	4805      	ldr	r0, [pc, #20]	; (8009884 <USBD_FS_ProductStrDescriptor+0x38>)
 8009870:	f7ff fdf2 	bl	8009458 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009874:	4b02      	ldr	r3, [pc, #8]	; (8009880 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20002674 	.word	0x20002674
 8009884:	0800ba64 	.word	0x0800ba64

08009888 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	6039      	str	r1, [r7, #0]
 8009892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	4904      	ldr	r1, [pc, #16]	; (80098a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009898:	4804      	ldr	r0, [pc, #16]	; (80098ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800989a:	f7ff fddd 	bl	8009458 <USBD_GetString>
  return USBD_StrDesc;
 800989e:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20002674 	.word	0x20002674
 80098ac:	0800ba7c 	.word	0x0800ba7c

080098b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	6039      	str	r1, [r7, #0]
 80098ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	221a      	movs	r2, #26
 80098c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80098c2:	f000 f843 	bl	800994c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80098c6:	4b02      	ldr	r3, [pc, #8]	; (80098d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	200000e0 	.word	0x200000e0

080098d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	4603      	mov	r3, r0
 80098dc:	6039      	str	r1, [r7, #0]
 80098de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098e0:	79fb      	ldrb	r3, [r7, #7]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d105      	bne.n	80098f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	4907      	ldr	r1, [pc, #28]	; (8009908 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098ea:	4808      	ldr	r0, [pc, #32]	; (800990c <USBD_FS_ConfigStrDescriptor+0x38>)
 80098ec:	f7ff fdb4 	bl	8009458 <USBD_GetString>
 80098f0:	e004      	b.n	80098fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	4904      	ldr	r1, [pc, #16]	; (8009908 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098f6:	4805      	ldr	r0, [pc, #20]	; (800990c <USBD_FS_ConfigStrDescriptor+0x38>)
 80098f8:	f7ff fdae 	bl	8009458 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098fc:	4b02      	ldr	r3, [pc, #8]	; (8009908 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	20002674 	.word	0x20002674
 800990c:	0800ba90 	.word	0x0800ba90

08009910 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d105      	bne.n	800992e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	4907      	ldr	r1, [pc, #28]	; (8009944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009926:	4808      	ldr	r0, [pc, #32]	; (8009948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009928:	f7ff fd96 	bl	8009458 <USBD_GetString>
 800992c:	e004      	b.n	8009938 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	4904      	ldr	r1, [pc, #16]	; (8009944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009932:	4805      	ldr	r0, [pc, #20]	; (8009948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009934:	f7ff fd90 	bl	8009458 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009938:	4b02      	ldr	r3, [pc, #8]	; (8009944 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20002674 	.word	0x20002674
 8009948:	0800ba9c 	.word	0x0800ba9c

0800994c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009952:	4b0f      	ldr	r3, [pc, #60]	; (8009990 <Get_SerialNum+0x44>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009958:	4b0e      	ldr	r3, [pc, #56]	; (8009994 <Get_SerialNum+0x48>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800995e:	4b0e      	ldr	r3, [pc, #56]	; (8009998 <Get_SerialNum+0x4c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4413      	add	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d009      	beq.n	8009986 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009972:	2208      	movs	r2, #8
 8009974:	4909      	ldr	r1, [pc, #36]	; (800999c <Get_SerialNum+0x50>)
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 f814 	bl	80099a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800997c:	2204      	movs	r2, #4
 800997e:	4908      	ldr	r1, [pc, #32]	; (80099a0 <Get_SerialNum+0x54>)
 8009980:	68b8      	ldr	r0, [r7, #8]
 8009982:	f000 f80f 	bl	80099a4 <IntToUnicode>
  }
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	1fff7a10 	.word	0x1fff7a10
 8009994:	1fff7a14 	.word	0x1fff7a14
 8009998:	1fff7a18 	.word	0x1fff7a18
 800999c:	200000e2 	.word	0x200000e2
 80099a0:	200000f2 	.word	0x200000f2

080099a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	4613      	mov	r3, r2
 80099b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099b6:	2300      	movs	r3, #0
 80099b8:	75fb      	strb	r3, [r7, #23]
 80099ba:	e027      	b.n	8009a0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	0f1b      	lsrs	r3, r3, #28
 80099c0:	2b09      	cmp	r3, #9
 80099c2:	d80b      	bhi.n	80099dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	0f1b      	lsrs	r3, r3, #28
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	005b      	lsls	r3, r3, #1
 80099ce:	4619      	mov	r1, r3
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	440b      	add	r3, r1
 80099d4:	3230      	adds	r2, #48	; 0x30
 80099d6:	b2d2      	uxtb	r2, r2
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	e00a      	b.n	80099f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	0f1b      	lsrs	r3, r3, #28
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	4619      	mov	r1, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	440b      	add	r3, r1
 80099ec:	3237      	adds	r2, #55	; 0x37
 80099ee:	b2d2      	uxtb	r2, r2
 80099f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	011b      	lsls	r3, r3, #4
 80099f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	3301      	adds	r3, #1
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	4413      	add	r3, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	75fb      	strb	r3, [r7, #23]
 8009a0c:	7dfa      	ldrb	r2, [r7, #23]
 8009a0e:	79fb      	ldrb	r3, [r7, #7]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d3d3      	bcc.n	80099bc <IntToUnicode+0x18>
  }
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop
 8009a18:	371c      	adds	r7, #28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
	...

08009a24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b08a      	sub	sp, #40	; 0x28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a2c:	f107 0314 	add.w	r3, r7, #20
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	605a      	str	r2, [r3, #4]
 8009a36:	609a      	str	r2, [r3, #8]
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a44:	d13a      	bne.n	8009abc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a46:	2300      	movs	r3, #0
 8009a48:	613b      	str	r3, [r7, #16]
 8009a4a:	4b1e      	ldr	r3, [pc, #120]	; (8009ac4 <HAL_PCD_MspInit+0xa0>)
 8009a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4e:	4a1d      	ldr	r2, [pc, #116]	; (8009ac4 <HAL_PCD_MspInit+0xa0>)
 8009a50:	f043 0301 	orr.w	r3, r3, #1
 8009a54:	6313      	str	r3, [r2, #48]	; 0x30
 8009a56:	4b1b      	ldr	r3, [pc, #108]	; (8009ac4 <HAL_PCD_MspInit+0xa0>)
 8009a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	613b      	str	r3, [r7, #16]
 8009a60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a68:	2302      	movs	r3, #2
 8009a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a70:	2303      	movs	r3, #3
 8009a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a74:	230a      	movs	r3, #10
 8009a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a78:	f107 0314 	add.w	r3, r7, #20
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4812      	ldr	r0, [pc, #72]	; (8009ac8 <HAL_PCD_MspInit+0xa4>)
 8009a80:	f7f8 fed0 	bl	8002824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a84:	4b0f      	ldr	r3, [pc, #60]	; (8009ac4 <HAL_PCD_MspInit+0xa0>)
 8009a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a88:	4a0e      	ldr	r2, [pc, #56]	; (8009ac4 <HAL_PCD_MspInit+0xa0>)
 8009a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a8e:	6353      	str	r3, [r2, #52]	; 0x34
 8009a90:	2300      	movs	r3, #0
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <HAL_PCD_MspInit+0xa0>)
 8009a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a98:	4a0a      	ldr	r2, [pc, #40]	; (8009ac4 <HAL_PCD_MspInit+0xa0>)
 8009a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8009aa0:	4b08      	ldr	r3, [pc, #32]	; (8009ac4 <HAL_PCD_MspInit+0xa0>)
 8009aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009aa8:	60fb      	str	r3, [r7, #12]
 8009aaa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	2043      	movs	r0, #67	; 0x43
 8009ab2:	f7f8 fe80 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ab6:	2043      	movs	r0, #67	; 0x43
 8009ab8:	f7f8 fe99 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009abc:	bf00      	nop
 8009abe:	3728      	adds	r7, #40	; 0x28
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	40023800 	.word	0x40023800
 8009ac8:	40020000 	.word	0x40020000

08009acc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f7fe fb59 	bl	800819a <USBD_LL_SetupStage>
}
 8009ae8:	bf00      	nop
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	460b      	mov	r3, r1
 8009afa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009b02:	78fa      	ldrb	r2, [r7, #3]
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	4613      	mov	r3, r2
 8009b08:	00db      	lsls	r3, r3, #3
 8009b0a:	4413      	add	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	440b      	add	r3, r1
 8009b10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	78fb      	ldrb	r3, [r7, #3]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	f7fe fb93 	bl	8008244 <USBD_LL_DataOutStage>
}
 8009b1e:	bf00      	nop
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b082      	sub	sp, #8
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	460b      	mov	r3, r1
 8009b30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009b38:	78fa      	ldrb	r2, [r7, #3]
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	00db      	lsls	r3, r3, #3
 8009b40:	4413      	add	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	440b      	add	r3, r1
 8009b46:	334c      	adds	r3, #76	; 0x4c
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	78fb      	ldrb	r3, [r7, #3]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f7fe fc2c 	bl	80083aa <USBD_LL_DataInStage>
}
 8009b52:	bf00      	nop
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe fd60 	bl	800862e <USBD_LL_SOF>
}
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b084      	sub	sp, #16
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d001      	beq.n	8009b8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b8a:	f7f7 fd89 	bl	80016a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b94:	7bfa      	ldrb	r2, [r7, #15]
 8009b96:	4611      	mov	r1, r2
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe fd0a 	bl	80085b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7fe fcb2 	bl	800850e <USBD_LL_Reset>
}
 8009baa:	bf00      	nop
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
	...

08009bb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fe fd05 	bl	80085d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	6812      	ldr	r2, [r2, #0]
 8009bd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bda:	f043 0301 	orr.w	r3, r3, #1
 8009bde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d005      	beq.n	8009bf4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009be8:	4b04      	ldr	r3, [pc, #16]	; (8009bfc <HAL_PCD_SuspendCallback+0x48>)
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	4a03      	ldr	r2, [pc, #12]	; (8009bfc <HAL_PCD_SuspendCallback+0x48>)
 8009bee:	f043 0306 	orr.w	r3, r3, #6
 8009bf2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	e000ed00 	.word	0xe000ed00

08009c00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fcf5 	bl	80085fe <USBD_LL_Resume>
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c2e:	78fa      	ldrb	r2, [r7, #3]
 8009c30:	4611      	mov	r1, r2
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fd4d 	bl	80086d2 <USBD_LL_IsoOUTIncomplete>
}
 8009c38:	bf00      	nop
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c52:	78fa      	ldrb	r2, [r7, #3]
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fe fd09 	bl	800866e <USBD_LL_IsoINIncomplete>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fd5f 	bl	8008736 <USBD_LL_DevConnected>
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe fd5c 	bl	800874c <USBD_LL_DevDisconnected>
}
 8009c94:	bf00      	nop
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d13c      	bne.n	8009d26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009cac:	4a20      	ldr	r2, [pc, #128]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a1e      	ldr	r2, [pc, #120]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cb8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009cbc:	4b1c      	ldr	r3, [pc, #112]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009cc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009cc4:	4b1a      	ldr	r3, [pc, #104]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cc6:	2204      	movs	r2, #4
 8009cc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009cca:	4b19      	ldr	r3, [pc, #100]	; (8009d30 <USBD_LL_Init+0x94>)
 8009ccc:	2202      	movs	r2, #2
 8009cce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009cd0:	4b17      	ldr	r3, [pc, #92]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009cd6:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cd8:	2202      	movs	r2, #2
 8009cda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009cdc:	4b14      	ldr	r3, [pc, #80]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ce2:	4b13      	ldr	r3, [pc, #76]	; (8009d30 <USBD_LL_Init+0x94>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ce8:	4b11      	ldr	r3, [pc, #68]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009cee:	4b10      	ldr	r3, [pc, #64]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009cfa:	480d      	ldr	r0, [pc, #52]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cfc:	f7f9 f898 	bl	8002e30 <HAL_PCD_Init>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009d06:	f7f7 fccb 	bl	80016a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d0a:	2180      	movs	r1, #128	; 0x80
 8009d0c:	4808      	ldr	r0, [pc, #32]	; (8009d30 <USBD_LL_Init+0x94>)
 8009d0e:	f7fa faf0 	bl	80042f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d12:	2240      	movs	r2, #64	; 0x40
 8009d14:	2100      	movs	r1, #0
 8009d16:	4806      	ldr	r0, [pc, #24]	; (8009d30 <USBD_LL_Init+0x94>)
 8009d18:	f7fa faa4 	bl	8004264 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d1c:	2280      	movs	r2, #128	; 0x80
 8009d1e:	2101      	movs	r1, #1
 8009d20:	4803      	ldr	r0, [pc, #12]	; (8009d30 <USBD_LL_Init+0x94>)
 8009d22:	f7fa fa9f 	bl	8004264 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	20002874 	.word	0x20002874

08009d34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7f9 f98d 	bl	800306a <HAL_PCD_Start>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 f942 	bl	8009fe0 <USBD_Get_USB_Status>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	4608      	mov	r0, r1
 8009d74:	4611      	mov	r1, r2
 8009d76:	461a      	mov	r2, r3
 8009d78:	4603      	mov	r3, r0
 8009d7a:	70fb      	strb	r3, [r7, #3]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70bb      	strb	r3, [r7, #2]
 8009d80:	4613      	mov	r3, r2
 8009d82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009d92:	78bb      	ldrb	r3, [r7, #2]
 8009d94:	883a      	ldrh	r2, [r7, #0]
 8009d96:	78f9      	ldrb	r1, [r7, #3]
 8009d98:	f7f9 fe5e 	bl	8003a58 <HAL_PCD_EP_Open>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 f91c 	bl	8009fe0 <USBD_Get_USB_Status>
 8009da8:	4603      	mov	r3, r0
 8009daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dd0:	78fa      	ldrb	r2, [r7, #3]
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7f9 fea7 	bl	8003b28 <HAL_PCD_EP_Close>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 f8fd 	bl	8009fe0 <USBD_Get_USB_Status>
 8009de6:	4603      	mov	r3, r0
 8009de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e0e:	78fa      	ldrb	r2, [r7, #3]
 8009e10:	4611      	mov	r1, r2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7f9 ff7f 	bl	8003d16 <HAL_PCD_EP_SetStall>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 f8de 	bl	8009fe0 <USBD_Get_USB_Status>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e4c:	78fa      	ldrb	r2, [r7, #3]
 8009e4e:	4611      	mov	r1, r2
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7f9 ffc4 	bl	8003dde <HAL_PCD_EP_ClrStall>
 8009e56:	4603      	mov	r3, r0
 8009e58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 f8bf 	bl	8009fe0 <USBD_Get_USB_Status>
 8009e62:	4603      	mov	r3, r0
 8009e64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da0b      	bge.n	8009ea4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e8c:	78fb      	ldrb	r3, [r7, #3]
 8009e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e92:	68f9      	ldr	r1, [r7, #12]
 8009e94:	4613      	mov	r3, r2
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	4413      	add	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	440b      	add	r3, r1
 8009e9e:	333e      	adds	r3, #62	; 0x3e
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	e00b      	b.n	8009ebc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eaa:	68f9      	ldr	r1, [r7, #12]
 8009eac:	4613      	mov	r3, r2
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009eba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ee2:	78fa      	ldrb	r2, [r7, #3]
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7f9 fd91 	bl	8003a0e <HAL_PCD_SetAddress>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 f874 	bl	8009fe0 <USBD_Get_USB_Status>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b086      	sub	sp, #24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	603b      	str	r3, [r7, #0]
 8009f12:	460b      	mov	r3, r1
 8009f14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f24:	7af9      	ldrb	r1, [r7, #11]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	f7f9 feaa 	bl	8003c82 <HAL_PCD_EP_Transmit>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 f853 	bl	8009fe0 <USBD_Get_USB_Status>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	607a      	str	r2, [r7, #4]
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	460b      	mov	r3, r1
 8009f56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f66:	7af9      	ldrb	r1, [r7, #11]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	f7f9 fe26 	bl	8003bbc <HAL_PCD_EP_Receive>
 8009f70:	4603      	mov	r3, r0
 8009f72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 f832 	bl	8009fe0 <USBD_Get_USB_Status>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f80:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f9c:	78fa      	ldrb	r2, [r7, #3]
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7f9 fe56 	bl	8003c52 <HAL_PCD_EP_GetRxCount>
 8009fa6:	4603      	mov	r3, r0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fb8:	4b03      	ldr	r3, [pc, #12]	; (8009fc8 <USBD_static_malloc+0x18>)
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	20002d80 	.word	0x20002d80

08009fcc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]

}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fee:	79fb      	ldrb	r3, [r7, #7]
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d817      	bhi.n	800a024 <USBD_Get_USB_Status+0x44>
 8009ff4:	a201      	add	r2, pc, #4	; (adr r2, 8009ffc <USBD_Get_USB_Status+0x1c>)
 8009ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffa:	bf00      	nop
 8009ffc:	0800a00d 	.word	0x0800a00d
 800a000:	0800a013 	.word	0x0800a013
 800a004:	0800a019 	.word	0x0800a019
 800a008:	0800a01f 	.word	0x0800a01f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73fb      	strb	r3, [r7, #15]
    break;
 800a010:	e00b      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a012:	2303      	movs	r3, #3
 800a014:	73fb      	strb	r3, [r7, #15]
    break;
 800a016:	e008      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a018:	2301      	movs	r3, #1
 800a01a:	73fb      	strb	r3, [r7, #15]
    break;
 800a01c:	e005      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a01e:	2303      	movs	r3, #3
 800a020:	73fb      	strb	r3, [r7, #15]
    break;
 800a022:	e002      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a024:	2303      	movs	r3, #3
 800a026:	73fb      	strb	r3, [r7, #15]
    break;
 800a028:	bf00      	nop
  }
  return usb_status;
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3714      	adds	r7, #20
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <sniprintf>:
 800a038:	b40c      	push	{r2, r3}
 800a03a:	b530      	push	{r4, r5, lr}
 800a03c:	4b17      	ldr	r3, [pc, #92]	; (800a09c <sniprintf+0x64>)
 800a03e:	1e0c      	subs	r4, r1, #0
 800a040:	681d      	ldr	r5, [r3, #0]
 800a042:	b09d      	sub	sp, #116	; 0x74
 800a044:	da08      	bge.n	800a058 <sniprintf+0x20>
 800a046:	238b      	movs	r3, #139	; 0x8b
 800a048:	602b      	str	r3, [r5, #0]
 800a04a:	f04f 30ff 	mov.w	r0, #4294967295
 800a04e:	b01d      	add	sp, #116	; 0x74
 800a050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a054:	b002      	add	sp, #8
 800a056:	4770      	bx	lr
 800a058:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a05c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a060:	bf14      	ite	ne
 800a062:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a066:	4623      	moveq	r3, r4
 800a068:	9304      	str	r3, [sp, #16]
 800a06a:	9307      	str	r3, [sp, #28]
 800a06c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a070:	9002      	str	r0, [sp, #8]
 800a072:	9006      	str	r0, [sp, #24]
 800a074:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a078:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a07a:	ab21      	add	r3, sp, #132	; 0x84
 800a07c:	a902      	add	r1, sp, #8
 800a07e:	4628      	mov	r0, r5
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	f000 f993 	bl	800a3ac <_svfiprintf_r>
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	bfbc      	itt	lt
 800a08a:	238b      	movlt	r3, #139	; 0x8b
 800a08c:	602b      	strlt	r3, [r5, #0]
 800a08e:	2c00      	cmp	r4, #0
 800a090:	d0dd      	beq.n	800a04e <sniprintf+0x16>
 800a092:	9b02      	ldr	r3, [sp, #8]
 800a094:	2200      	movs	r2, #0
 800a096:	701a      	strb	r2, [r3, #0]
 800a098:	e7d9      	b.n	800a04e <sniprintf+0x16>
 800a09a:	bf00      	nop
 800a09c:	20000148 	.word	0x20000148

0800a0a0 <memset>:
 800a0a0:	4402      	add	r2, r0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d100      	bne.n	800a0aa <memset+0xa>
 800a0a8:	4770      	bx	lr
 800a0aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ae:	e7f9      	b.n	800a0a4 <memset+0x4>

0800a0b0 <__errno>:
 800a0b0:	4b01      	ldr	r3, [pc, #4]	; (800a0b8 <__errno+0x8>)
 800a0b2:	6818      	ldr	r0, [r3, #0]
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	20000148 	.word	0x20000148

0800a0bc <__libc_init_array>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	4d0d      	ldr	r5, [pc, #52]	; (800a0f4 <__libc_init_array+0x38>)
 800a0c0:	4c0d      	ldr	r4, [pc, #52]	; (800a0f8 <__libc_init_array+0x3c>)
 800a0c2:	1b64      	subs	r4, r4, r5
 800a0c4:	10a4      	asrs	r4, r4, #2
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	42a6      	cmp	r6, r4
 800a0ca:	d109      	bne.n	800a0e0 <__libc_init_array+0x24>
 800a0cc:	4d0b      	ldr	r5, [pc, #44]	; (800a0fc <__libc_init_array+0x40>)
 800a0ce:	4c0c      	ldr	r4, [pc, #48]	; (800a100 <__libc_init_array+0x44>)
 800a0d0:	f001 fcaa 	bl	800ba28 <_init>
 800a0d4:	1b64      	subs	r4, r4, r5
 800a0d6:	10a4      	asrs	r4, r4, #2
 800a0d8:	2600      	movs	r6, #0
 800a0da:	42a6      	cmp	r6, r4
 800a0dc:	d105      	bne.n	800a0ea <__libc_init_array+0x2e>
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e4:	4798      	blx	r3
 800a0e6:	3601      	adds	r6, #1
 800a0e8:	e7ee      	b.n	800a0c8 <__libc_init_array+0xc>
 800a0ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ee:	4798      	blx	r3
 800a0f0:	3601      	adds	r6, #1
 800a0f2:	e7f2      	b.n	800a0da <__libc_init_array+0x1e>
 800a0f4:	0800bcd8 	.word	0x0800bcd8
 800a0f8:	0800bcd8 	.word	0x0800bcd8
 800a0fc:	0800bcd8 	.word	0x0800bcd8
 800a100:	0800bcdc 	.word	0x0800bcdc

0800a104 <__retarget_lock_acquire_recursive>:
 800a104:	4770      	bx	lr

0800a106 <__retarget_lock_release_recursive>:
 800a106:	4770      	bx	lr

0800a108 <_free_r>:
 800a108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a10a:	2900      	cmp	r1, #0
 800a10c:	d044      	beq.n	800a198 <_free_r+0x90>
 800a10e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a112:	9001      	str	r0, [sp, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	f1a1 0404 	sub.w	r4, r1, #4
 800a11a:	bfb8      	it	lt
 800a11c:	18e4      	addlt	r4, r4, r3
 800a11e:	f000 f8df 	bl	800a2e0 <__malloc_lock>
 800a122:	4a1e      	ldr	r2, [pc, #120]	; (800a19c <_free_r+0x94>)
 800a124:	9801      	ldr	r0, [sp, #4]
 800a126:	6813      	ldr	r3, [r2, #0]
 800a128:	b933      	cbnz	r3, 800a138 <_free_r+0x30>
 800a12a:	6063      	str	r3, [r4, #4]
 800a12c:	6014      	str	r4, [r2, #0]
 800a12e:	b003      	add	sp, #12
 800a130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a134:	f000 b8da 	b.w	800a2ec <__malloc_unlock>
 800a138:	42a3      	cmp	r3, r4
 800a13a:	d908      	bls.n	800a14e <_free_r+0x46>
 800a13c:	6825      	ldr	r5, [r4, #0]
 800a13e:	1961      	adds	r1, r4, r5
 800a140:	428b      	cmp	r3, r1
 800a142:	bf01      	itttt	eq
 800a144:	6819      	ldreq	r1, [r3, #0]
 800a146:	685b      	ldreq	r3, [r3, #4]
 800a148:	1949      	addeq	r1, r1, r5
 800a14a:	6021      	streq	r1, [r4, #0]
 800a14c:	e7ed      	b.n	800a12a <_free_r+0x22>
 800a14e:	461a      	mov	r2, r3
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	b10b      	cbz	r3, 800a158 <_free_r+0x50>
 800a154:	42a3      	cmp	r3, r4
 800a156:	d9fa      	bls.n	800a14e <_free_r+0x46>
 800a158:	6811      	ldr	r1, [r2, #0]
 800a15a:	1855      	adds	r5, r2, r1
 800a15c:	42a5      	cmp	r5, r4
 800a15e:	d10b      	bne.n	800a178 <_free_r+0x70>
 800a160:	6824      	ldr	r4, [r4, #0]
 800a162:	4421      	add	r1, r4
 800a164:	1854      	adds	r4, r2, r1
 800a166:	42a3      	cmp	r3, r4
 800a168:	6011      	str	r1, [r2, #0]
 800a16a:	d1e0      	bne.n	800a12e <_free_r+0x26>
 800a16c:	681c      	ldr	r4, [r3, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	6053      	str	r3, [r2, #4]
 800a172:	440c      	add	r4, r1
 800a174:	6014      	str	r4, [r2, #0]
 800a176:	e7da      	b.n	800a12e <_free_r+0x26>
 800a178:	d902      	bls.n	800a180 <_free_r+0x78>
 800a17a:	230c      	movs	r3, #12
 800a17c:	6003      	str	r3, [r0, #0]
 800a17e:	e7d6      	b.n	800a12e <_free_r+0x26>
 800a180:	6825      	ldr	r5, [r4, #0]
 800a182:	1961      	adds	r1, r4, r5
 800a184:	428b      	cmp	r3, r1
 800a186:	bf04      	itt	eq
 800a188:	6819      	ldreq	r1, [r3, #0]
 800a18a:	685b      	ldreq	r3, [r3, #4]
 800a18c:	6063      	str	r3, [r4, #4]
 800a18e:	bf04      	itt	eq
 800a190:	1949      	addeq	r1, r1, r5
 800a192:	6021      	streq	r1, [r4, #0]
 800a194:	6054      	str	r4, [r2, #4]
 800a196:	e7ca      	b.n	800a12e <_free_r+0x26>
 800a198:	b003      	add	sp, #12
 800a19a:	bd30      	pop	{r4, r5, pc}
 800a19c:	200030e0 	.word	0x200030e0

0800a1a0 <sbrk_aligned>:
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	4e0e      	ldr	r6, [pc, #56]	; (800a1dc <sbrk_aligned+0x3c>)
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	6831      	ldr	r1, [r6, #0]
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	b911      	cbnz	r1, 800a1b2 <sbrk_aligned+0x12>
 800a1ac:	f000 fba6 	bl	800a8fc <_sbrk_r>
 800a1b0:	6030      	str	r0, [r6, #0]
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f000 fba1 	bl	800a8fc <_sbrk_r>
 800a1ba:	1c43      	adds	r3, r0, #1
 800a1bc:	d00a      	beq.n	800a1d4 <sbrk_aligned+0x34>
 800a1be:	1cc4      	adds	r4, r0, #3
 800a1c0:	f024 0403 	bic.w	r4, r4, #3
 800a1c4:	42a0      	cmp	r0, r4
 800a1c6:	d007      	beq.n	800a1d8 <sbrk_aligned+0x38>
 800a1c8:	1a21      	subs	r1, r4, r0
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f000 fb96 	bl	800a8fc <_sbrk_r>
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	d101      	bne.n	800a1d8 <sbrk_aligned+0x38>
 800a1d4:	f04f 34ff 	mov.w	r4, #4294967295
 800a1d8:	4620      	mov	r0, r4
 800a1da:	bd70      	pop	{r4, r5, r6, pc}
 800a1dc:	200030e4 	.word	0x200030e4

0800a1e0 <_malloc_r>:
 800a1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e4:	1ccd      	adds	r5, r1, #3
 800a1e6:	f025 0503 	bic.w	r5, r5, #3
 800a1ea:	3508      	adds	r5, #8
 800a1ec:	2d0c      	cmp	r5, #12
 800a1ee:	bf38      	it	cc
 800a1f0:	250c      	movcc	r5, #12
 800a1f2:	2d00      	cmp	r5, #0
 800a1f4:	4607      	mov	r7, r0
 800a1f6:	db01      	blt.n	800a1fc <_malloc_r+0x1c>
 800a1f8:	42a9      	cmp	r1, r5
 800a1fa:	d905      	bls.n	800a208 <_malloc_r+0x28>
 800a1fc:	230c      	movs	r3, #12
 800a1fe:	603b      	str	r3, [r7, #0]
 800a200:	2600      	movs	r6, #0
 800a202:	4630      	mov	r0, r6
 800a204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a208:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2dc <_malloc_r+0xfc>
 800a20c:	f000 f868 	bl	800a2e0 <__malloc_lock>
 800a210:	f8d8 3000 	ldr.w	r3, [r8]
 800a214:	461c      	mov	r4, r3
 800a216:	bb5c      	cbnz	r4, 800a270 <_malloc_r+0x90>
 800a218:	4629      	mov	r1, r5
 800a21a:	4638      	mov	r0, r7
 800a21c:	f7ff ffc0 	bl	800a1a0 <sbrk_aligned>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	4604      	mov	r4, r0
 800a224:	d155      	bne.n	800a2d2 <_malloc_r+0xf2>
 800a226:	f8d8 4000 	ldr.w	r4, [r8]
 800a22a:	4626      	mov	r6, r4
 800a22c:	2e00      	cmp	r6, #0
 800a22e:	d145      	bne.n	800a2bc <_malloc_r+0xdc>
 800a230:	2c00      	cmp	r4, #0
 800a232:	d048      	beq.n	800a2c6 <_malloc_r+0xe6>
 800a234:	6823      	ldr	r3, [r4, #0]
 800a236:	4631      	mov	r1, r6
 800a238:	4638      	mov	r0, r7
 800a23a:	eb04 0903 	add.w	r9, r4, r3
 800a23e:	f000 fb5d 	bl	800a8fc <_sbrk_r>
 800a242:	4581      	cmp	r9, r0
 800a244:	d13f      	bne.n	800a2c6 <_malloc_r+0xe6>
 800a246:	6821      	ldr	r1, [r4, #0]
 800a248:	1a6d      	subs	r5, r5, r1
 800a24a:	4629      	mov	r1, r5
 800a24c:	4638      	mov	r0, r7
 800a24e:	f7ff ffa7 	bl	800a1a0 <sbrk_aligned>
 800a252:	3001      	adds	r0, #1
 800a254:	d037      	beq.n	800a2c6 <_malloc_r+0xe6>
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	442b      	add	r3, r5
 800a25a:	6023      	str	r3, [r4, #0]
 800a25c:	f8d8 3000 	ldr.w	r3, [r8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d038      	beq.n	800a2d6 <_malloc_r+0xf6>
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	42a2      	cmp	r2, r4
 800a268:	d12b      	bne.n	800a2c2 <_malloc_r+0xe2>
 800a26a:	2200      	movs	r2, #0
 800a26c:	605a      	str	r2, [r3, #4]
 800a26e:	e00f      	b.n	800a290 <_malloc_r+0xb0>
 800a270:	6822      	ldr	r2, [r4, #0]
 800a272:	1b52      	subs	r2, r2, r5
 800a274:	d41f      	bmi.n	800a2b6 <_malloc_r+0xd6>
 800a276:	2a0b      	cmp	r2, #11
 800a278:	d917      	bls.n	800a2aa <_malloc_r+0xca>
 800a27a:	1961      	adds	r1, r4, r5
 800a27c:	42a3      	cmp	r3, r4
 800a27e:	6025      	str	r5, [r4, #0]
 800a280:	bf18      	it	ne
 800a282:	6059      	strne	r1, [r3, #4]
 800a284:	6863      	ldr	r3, [r4, #4]
 800a286:	bf08      	it	eq
 800a288:	f8c8 1000 	streq.w	r1, [r8]
 800a28c:	5162      	str	r2, [r4, r5]
 800a28e:	604b      	str	r3, [r1, #4]
 800a290:	4638      	mov	r0, r7
 800a292:	f104 060b 	add.w	r6, r4, #11
 800a296:	f000 f829 	bl	800a2ec <__malloc_unlock>
 800a29a:	f026 0607 	bic.w	r6, r6, #7
 800a29e:	1d23      	adds	r3, r4, #4
 800a2a0:	1af2      	subs	r2, r6, r3
 800a2a2:	d0ae      	beq.n	800a202 <_malloc_r+0x22>
 800a2a4:	1b9b      	subs	r3, r3, r6
 800a2a6:	50a3      	str	r3, [r4, r2]
 800a2a8:	e7ab      	b.n	800a202 <_malloc_r+0x22>
 800a2aa:	42a3      	cmp	r3, r4
 800a2ac:	6862      	ldr	r2, [r4, #4]
 800a2ae:	d1dd      	bne.n	800a26c <_malloc_r+0x8c>
 800a2b0:	f8c8 2000 	str.w	r2, [r8]
 800a2b4:	e7ec      	b.n	800a290 <_malloc_r+0xb0>
 800a2b6:	4623      	mov	r3, r4
 800a2b8:	6864      	ldr	r4, [r4, #4]
 800a2ba:	e7ac      	b.n	800a216 <_malloc_r+0x36>
 800a2bc:	4634      	mov	r4, r6
 800a2be:	6876      	ldr	r6, [r6, #4]
 800a2c0:	e7b4      	b.n	800a22c <_malloc_r+0x4c>
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	e7cc      	b.n	800a260 <_malloc_r+0x80>
 800a2c6:	230c      	movs	r3, #12
 800a2c8:	603b      	str	r3, [r7, #0]
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	f000 f80e 	bl	800a2ec <__malloc_unlock>
 800a2d0:	e797      	b.n	800a202 <_malloc_r+0x22>
 800a2d2:	6025      	str	r5, [r4, #0]
 800a2d4:	e7dc      	b.n	800a290 <_malloc_r+0xb0>
 800a2d6:	605b      	str	r3, [r3, #4]
 800a2d8:	deff      	udf	#255	; 0xff
 800a2da:	bf00      	nop
 800a2dc:	200030e0 	.word	0x200030e0

0800a2e0 <__malloc_lock>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	; (800a2e8 <__malloc_lock+0x8>)
 800a2e2:	f7ff bf0f 	b.w	800a104 <__retarget_lock_acquire_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	200030dc 	.word	0x200030dc

0800a2ec <__malloc_unlock>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	; (800a2f4 <__malloc_unlock+0x8>)
 800a2ee:	f7ff bf0a 	b.w	800a106 <__retarget_lock_release_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	200030dc 	.word	0x200030dc

0800a2f8 <__ssputs_r>:
 800a2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	688e      	ldr	r6, [r1, #8]
 800a2fe:	461f      	mov	r7, r3
 800a300:	42be      	cmp	r6, r7
 800a302:	680b      	ldr	r3, [r1, #0]
 800a304:	4682      	mov	sl, r0
 800a306:	460c      	mov	r4, r1
 800a308:	4690      	mov	r8, r2
 800a30a:	d82c      	bhi.n	800a366 <__ssputs_r+0x6e>
 800a30c:	898a      	ldrh	r2, [r1, #12]
 800a30e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a312:	d026      	beq.n	800a362 <__ssputs_r+0x6a>
 800a314:	6965      	ldr	r5, [r4, #20]
 800a316:	6909      	ldr	r1, [r1, #16]
 800a318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a31c:	eba3 0901 	sub.w	r9, r3, r1
 800a320:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a324:	1c7b      	adds	r3, r7, #1
 800a326:	444b      	add	r3, r9
 800a328:	106d      	asrs	r5, r5, #1
 800a32a:	429d      	cmp	r5, r3
 800a32c:	bf38      	it	cc
 800a32e:	461d      	movcc	r5, r3
 800a330:	0553      	lsls	r3, r2, #21
 800a332:	d527      	bpl.n	800a384 <__ssputs_r+0x8c>
 800a334:	4629      	mov	r1, r5
 800a336:	f7ff ff53 	bl	800a1e0 <_malloc_r>
 800a33a:	4606      	mov	r6, r0
 800a33c:	b360      	cbz	r0, 800a398 <__ssputs_r+0xa0>
 800a33e:	6921      	ldr	r1, [r4, #16]
 800a340:	464a      	mov	r2, r9
 800a342:	f000 faeb 	bl	800a91c <memcpy>
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a34c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a350:	81a3      	strh	r3, [r4, #12]
 800a352:	6126      	str	r6, [r4, #16]
 800a354:	6165      	str	r5, [r4, #20]
 800a356:	444e      	add	r6, r9
 800a358:	eba5 0509 	sub.w	r5, r5, r9
 800a35c:	6026      	str	r6, [r4, #0]
 800a35e:	60a5      	str	r5, [r4, #8]
 800a360:	463e      	mov	r6, r7
 800a362:	42be      	cmp	r6, r7
 800a364:	d900      	bls.n	800a368 <__ssputs_r+0x70>
 800a366:	463e      	mov	r6, r7
 800a368:	6820      	ldr	r0, [r4, #0]
 800a36a:	4632      	mov	r2, r6
 800a36c:	4641      	mov	r1, r8
 800a36e:	f000 faab 	bl	800a8c8 <memmove>
 800a372:	68a3      	ldr	r3, [r4, #8]
 800a374:	1b9b      	subs	r3, r3, r6
 800a376:	60a3      	str	r3, [r4, #8]
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	4433      	add	r3, r6
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	2000      	movs	r0, #0
 800a380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a384:	462a      	mov	r2, r5
 800a386:	f000 fad7 	bl	800a938 <_realloc_r>
 800a38a:	4606      	mov	r6, r0
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d1e0      	bne.n	800a352 <__ssputs_r+0x5a>
 800a390:	6921      	ldr	r1, [r4, #16]
 800a392:	4650      	mov	r0, sl
 800a394:	f7ff feb8 	bl	800a108 <_free_r>
 800a398:	230c      	movs	r3, #12
 800a39a:	f8ca 3000 	str.w	r3, [sl]
 800a39e:	89a3      	ldrh	r3, [r4, #12]
 800a3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a4:	81a3      	strh	r3, [r4, #12]
 800a3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3aa:	e7e9      	b.n	800a380 <__ssputs_r+0x88>

0800a3ac <_svfiprintf_r>:
 800a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b0:	4698      	mov	r8, r3
 800a3b2:	898b      	ldrh	r3, [r1, #12]
 800a3b4:	061b      	lsls	r3, r3, #24
 800a3b6:	b09d      	sub	sp, #116	; 0x74
 800a3b8:	4607      	mov	r7, r0
 800a3ba:	460d      	mov	r5, r1
 800a3bc:	4614      	mov	r4, r2
 800a3be:	d50e      	bpl.n	800a3de <_svfiprintf_r+0x32>
 800a3c0:	690b      	ldr	r3, [r1, #16]
 800a3c2:	b963      	cbnz	r3, 800a3de <_svfiprintf_r+0x32>
 800a3c4:	2140      	movs	r1, #64	; 0x40
 800a3c6:	f7ff ff0b 	bl	800a1e0 <_malloc_r>
 800a3ca:	6028      	str	r0, [r5, #0]
 800a3cc:	6128      	str	r0, [r5, #16]
 800a3ce:	b920      	cbnz	r0, 800a3da <_svfiprintf_r+0x2e>
 800a3d0:	230c      	movs	r3, #12
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d8:	e0d0      	b.n	800a57c <_svfiprintf_r+0x1d0>
 800a3da:	2340      	movs	r3, #64	; 0x40
 800a3dc:	616b      	str	r3, [r5, #20]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e2:	2320      	movs	r3, #32
 800a3e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ec:	2330      	movs	r3, #48	; 0x30
 800a3ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a594 <_svfiprintf_r+0x1e8>
 800a3f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3f6:	f04f 0901 	mov.w	r9, #1
 800a3fa:	4623      	mov	r3, r4
 800a3fc:	469a      	mov	sl, r3
 800a3fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a402:	b10a      	cbz	r2, 800a408 <_svfiprintf_r+0x5c>
 800a404:	2a25      	cmp	r2, #37	; 0x25
 800a406:	d1f9      	bne.n	800a3fc <_svfiprintf_r+0x50>
 800a408:	ebba 0b04 	subs.w	fp, sl, r4
 800a40c:	d00b      	beq.n	800a426 <_svfiprintf_r+0x7a>
 800a40e:	465b      	mov	r3, fp
 800a410:	4622      	mov	r2, r4
 800a412:	4629      	mov	r1, r5
 800a414:	4638      	mov	r0, r7
 800a416:	f7ff ff6f 	bl	800a2f8 <__ssputs_r>
 800a41a:	3001      	adds	r0, #1
 800a41c:	f000 80a9 	beq.w	800a572 <_svfiprintf_r+0x1c6>
 800a420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a422:	445a      	add	r2, fp
 800a424:	9209      	str	r2, [sp, #36]	; 0x24
 800a426:	f89a 3000 	ldrb.w	r3, [sl]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 80a1 	beq.w	800a572 <_svfiprintf_r+0x1c6>
 800a430:	2300      	movs	r3, #0
 800a432:	f04f 32ff 	mov.w	r2, #4294967295
 800a436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a43a:	f10a 0a01 	add.w	sl, sl, #1
 800a43e:	9304      	str	r3, [sp, #16]
 800a440:	9307      	str	r3, [sp, #28]
 800a442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a446:	931a      	str	r3, [sp, #104]	; 0x68
 800a448:	4654      	mov	r4, sl
 800a44a:	2205      	movs	r2, #5
 800a44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a450:	4850      	ldr	r0, [pc, #320]	; (800a594 <_svfiprintf_r+0x1e8>)
 800a452:	f7f5 fec5 	bl	80001e0 <memchr>
 800a456:	9a04      	ldr	r2, [sp, #16]
 800a458:	b9d8      	cbnz	r0, 800a492 <_svfiprintf_r+0xe6>
 800a45a:	06d0      	lsls	r0, r2, #27
 800a45c:	bf44      	itt	mi
 800a45e:	2320      	movmi	r3, #32
 800a460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a464:	0711      	lsls	r1, r2, #28
 800a466:	bf44      	itt	mi
 800a468:	232b      	movmi	r3, #43	; 0x2b
 800a46a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a46e:	f89a 3000 	ldrb.w	r3, [sl]
 800a472:	2b2a      	cmp	r3, #42	; 0x2a
 800a474:	d015      	beq.n	800a4a2 <_svfiprintf_r+0xf6>
 800a476:	9a07      	ldr	r2, [sp, #28]
 800a478:	4654      	mov	r4, sl
 800a47a:	2000      	movs	r0, #0
 800a47c:	f04f 0c0a 	mov.w	ip, #10
 800a480:	4621      	mov	r1, r4
 800a482:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a486:	3b30      	subs	r3, #48	; 0x30
 800a488:	2b09      	cmp	r3, #9
 800a48a:	d94d      	bls.n	800a528 <_svfiprintf_r+0x17c>
 800a48c:	b1b0      	cbz	r0, 800a4bc <_svfiprintf_r+0x110>
 800a48e:	9207      	str	r2, [sp, #28]
 800a490:	e014      	b.n	800a4bc <_svfiprintf_r+0x110>
 800a492:	eba0 0308 	sub.w	r3, r0, r8
 800a496:	fa09 f303 	lsl.w	r3, r9, r3
 800a49a:	4313      	orrs	r3, r2
 800a49c:	9304      	str	r3, [sp, #16]
 800a49e:	46a2      	mov	sl, r4
 800a4a0:	e7d2      	b.n	800a448 <_svfiprintf_r+0x9c>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	1d19      	adds	r1, r3, #4
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	9103      	str	r1, [sp, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bfbb      	ittet	lt
 800a4ae:	425b      	neglt	r3, r3
 800a4b0:	f042 0202 	orrlt.w	r2, r2, #2
 800a4b4:	9307      	strge	r3, [sp, #28]
 800a4b6:	9307      	strlt	r3, [sp, #28]
 800a4b8:	bfb8      	it	lt
 800a4ba:	9204      	strlt	r2, [sp, #16]
 800a4bc:	7823      	ldrb	r3, [r4, #0]
 800a4be:	2b2e      	cmp	r3, #46	; 0x2e
 800a4c0:	d10c      	bne.n	800a4dc <_svfiprintf_r+0x130>
 800a4c2:	7863      	ldrb	r3, [r4, #1]
 800a4c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c6:	d134      	bne.n	800a532 <_svfiprintf_r+0x186>
 800a4c8:	9b03      	ldr	r3, [sp, #12]
 800a4ca:	1d1a      	adds	r2, r3, #4
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	9203      	str	r2, [sp, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	bfb8      	it	lt
 800a4d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4d8:	3402      	adds	r4, #2
 800a4da:	9305      	str	r3, [sp, #20]
 800a4dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a5a4 <_svfiprintf_r+0x1f8>
 800a4e0:	7821      	ldrb	r1, [r4, #0]
 800a4e2:	2203      	movs	r2, #3
 800a4e4:	4650      	mov	r0, sl
 800a4e6:	f7f5 fe7b 	bl	80001e0 <memchr>
 800a4ea:	b138      	cbz	r0, 800a4fc <_svfiprintf_r+0x150>
 800a4ec:	9b04      	ldr	r3, [sp, #16]
 800a4ee:	eba0 000a 	sub.w	r0, r0, sl
 800a4f2:	2240      	movs	r2, #64	; 0x40
 800a4f4:	4082      	lsls	r2, r0
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	3401      	adds	r4, #1
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a500:	4825      	ldr	r0, [pc, #148]	; (800a598 <_svfiprintf_r+0x1ec>)
 800a502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a506:	2206      	movs	r2, #6
 800a508:	f7f5 fe6a 	bl	80001e0 <memchr>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d038      	beq.n	800a582 <_svfiprintf_r+0x1d6>
 800a510:	4b22      	ldr	r3, [pc, #136]	; (800a59c <_svfiprintf_r+0x1f0>)
 800a512:	bb1b      	cbnz	r3, 800a55c <_svfiprintf_r+0x1b0>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	3307      	adds	r3, #7
 800a518:	f023 0307 	bic.w	r3, r3, #7
 800a51c:	3308      	adds	r3, #8
 800a51e:	9303      	str	r3, [sp, #12]
 800a520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a522:	4433      	add	r3, r6
 800a524:	9309      	str	r3, [sp, #36]	; 0x24
 800a526:	e768      	b.n	800a3fa <_svfiprintf_r+0x4e>
 800a528:	fb0c 3202 	mla	r2, ip, r2, r3
 800a52c:	460c      	mov	r4, r1
 800a52e:	2001      	movs	r0, #1
 800a530:	e7a6      	b.n	800a480 <_svfiprintf_r+0xd4>
 800a532:	2300      	movs	r3, #0
 800a534:	3401      	adds	r4, #1
 800a536:	9305      	str	r3, [sp, #20]
 800a538:	4619      	mov	r1, r3
 800a53a:	f04f 0c0a 	mov.w	ip, #10
 800a53e:	4620      	mov	r0, r4
 800a540:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a544:	3a30      	subs	r2, #48	; 0x30
 800a546:	2a09      	cmp	r2, #9
 800a548:	d903      	bls.n	800a552 <_svfiprintf_r+0x1a6>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0c6      	beq.n	800a4dc <_svfiprintf_r+0x130>
 800a54e:	9105      	str	r1, [sp, #20]
 800a550:	e7c4      	b.n	800a4dc <_svfiprintf_r+0x130>
 800a552:	fb0c 2101 	mla	r1, ip, r1, r2
 800a556:	4604      	mov	r4, r0
 800a558:	2301      	movs	r3, #1
 800a55a:	e7f0      	b.n	800a53e <_svfiprintf_r+0x192>
 800a55c:	ab03      	add	r3, sp, #12
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	462a      	mov	r2, r5
 800a562:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <_svfiprintf_r+0x1f4>)
 800a564:	a904      	add	r1, sp, #16
 800a566:	4638      	mov	r0, r7
 800a568:	f3af 8000 	nop.w
 800a56c:	1c42      	adds	r2, r0, #1
 800a56e:	4606      	mov	r6, r0
 800a570:	d1d6      	bne.n	800a520 <_svfiprintf_r+0x174>
 800a572:	89ab      	ldrh	r3, [r5, #12]
 800a574:	065b      	lsls	r3, r3, #25
 800a576:	f53f af2d 	bmi.w	800a3d4 <_svfiprintf_r+0x28>
 800a57a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a57c:	b01d      	add	sp, #116	; 0x74
 800a57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a582:	ab03      	add	r3, sp, #12
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	462a      	mov	r2, r5
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <_svfiprintf_r+0x1f4>)
 800a58a:	a904      	add	r1, sp, #16
 800a58c:	4638      	mov	r0, r7
 800a58e:	f000 f879 	bl	800a684 <_printf_i>
 800a592:	e7eb      	b.n	800a56c <_svfiprintf_r+0x1c0>
 800a594:	0800bac4 	.word	0x0800bac4
 800a598:	0800bace 	.word	0x0800bace
 800a59c:	00000000 	.word	0x00000000
 800a5a0:	0800a2f9 	.word	0x0800a2f9
 800a5a4:	0800baca 	.word	0x0800baca

0800a5a8 <_printf_common>:
 800a5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ac:	4616      	mov	r6, r2
 800a5ae:	4699      	mov	r9, r3
 800a5b0:	688a      	ldr	r2, [r1, #8]
 800a5b2:	690b      	ldr	r3, [r1, #16]
 800a5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	bfb8      	it	lt
 800a5bc:	4613      	movlt	r3, r2
 800a5be:	6033      	str	r3, [r6, #0]
 800a5c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5c4:	4607      	mov	r7, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	b10a      	cbz	r2, 800a5ce <_printf_common+0x26>
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	6033      	str	r3, [r6, #0]
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	0699      	lsls	r1, r3, #26
 800a5d2:	bf42      	ittt	mi
 800a5d4:	6833      	ldrmi	r3, [r6, #0]
 800a5d6:	3302      	addmi	r3, #2
 800a5d8:	6033      	strmi	r3, [r6, #0]
 800a5da:	6825      	ldr	r5, [r4, #0]
 800a5dc:	f015 0506 	ands.w	r5, r5, #6
 800a5e0:	d106      	bne.n	800a5f0 <_printf_common+0x48>
 800a5e2:	f104 0a19 	add.w	sl, r4, #25
 800a5e6:	68e3      	ldr	r3, [r4, #12]
 800a5e8:	6832      	ldr	r2, [r6, #0]
 800a5ea:	1a9b      	subs	r3, r3, r2
 800a5ec:	42ab      	cmp	r3, r5
 800a5ee:	dc26      	bgt.n	800a63e <_printf_common+0x96>
 800a5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5f4:	1e13      	subs	r3, r2, #0
 800a5f6:	6822      	ldr	r2, [r4, #0]
 800a5f8:	bf18      	it	ne
 800a5fa:	2301      	movne	r3, #1
 800a5fc:	0692      	lsls	r2, r2, #26
 800a5fe:	d42b      	bmi.n	800a658 <_printf_common+0xb0>
 800a600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a604:	4649      	mov	r1, r9
 800a606:	4638      	mov	r0, r7
 800a608:	47c0      	blx	r8
 800a60a:	3001      	adds	r0, #1
 800a60c:	d01e      	beq.n	800a64c <_printf_common+0xa4>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	6922      	ldr	r2, [r4, #16]
 800a612:	f003 0306 	and.w	r3, r3, #6
 800a616:	2b04      	cmp	r3, #4
 800a618:	bf02      	ittt	eq
 800a61a:	68e5      	ldreq	r5, [r4, #12]
 800a61c:	6833      	ldreq	r3, [r6, #0]
 800a61e:	1aed      	subeq	r5, r5, r3
 800a620:	68a3      	ldr	r3, [r4, #8]
 800a622:	bf0c      	ite	eq
 800a624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a628:	2500      	movne	r5, #0
 800a62a:	4293      	cmp	r3, r2
 800a62c:	bfc4      	itt	gt
 800a62e:	1a9b      	subgt	r3, r3, r2
 800a630:	18ed      	addgt	r5, r5, r3
 800a632:	2600      	movs	r6, #0
 800a634:	341a      	adds	r4, #26
 800a636:	42b5      	cmp	r5, r6
 800a638:	d11a      	bne.n	800a670 <_printf_common+0xc8>
 800a63a:	2000      	movs	r0, #0
 800a63c:	e008      	b.n	800a650 <_printf_common+0xa8>
 800a63e:	2301      	movs	r3, #1
 800a640:	4652      	mov	r2, sl
 800a642:	4649      	mov	r1, r9
 800a644:	4638      	mov	r0, r7
 800a646:	47c0      	blx	r8
 800a648:	3001      	adds	r0, #1
 800a64a:	d103      	bne.n	800a654 <_printf_common+0xac>
 800a64c:	f04f 30ff 	mov.w	r0, #4294967295
 800a650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a654:	3501      	adds	r5, #1
 800a656:	e7c6      	b.n	800a5e6 <_printf_common+0x3e>
 800a658:	18e1      	adds	r1, r4, r3
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	2030      	movs	r0, #48	; 0x30
 800a65e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a662:	4422      	add	r2, r4
 800a664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a66c:	3302      	adds	r3, #2
 800a66e:	e7c7      	b.n	800a600 <_printf_common+0x58>
 800a670:	2301      	movs	r3, #1
 800a672:	4622      	mov	r2, r4
 800a674:	4649      	mov	r1, r9
 800a676:	4638      	mov	r0, r7
 800a678:	47c0      	blx	r8
 800a67a:	3001      	adds	r0, #1
 800a67c:	d0e6      	beq.n	800a64c <_printf_common+0xa4>
 800a67e:	3601      	adds	r6, #1
 800a680:	e7d9      	b.n	800a636 <_printf_common+0x8e>
	...

0800a684 <_printf_i>:
 800a684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a688:	7e0f      	ldrb	r7, [r1, #24]
 800a68a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a68c:	2f78      	cmp	r7, #120	; 0x78
 800a68e:	4691      	mov	r9, r2
 800a690:	4680      	mov	r8, r0
 800a692:	460c      	mov	r4, r1
 800a694:	469a      	mov	sl, r3
 800a696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a69a:	d807      	bhi.n	800a6ac <_printf_i+0x28>
 800a69c:	2f62      	cmp	r7, #98	; 0x62
 800a69e:	d80a      	bhi.n	800a6b6 <_printf_i+0x32>
 800a6a0:	2f00      	cmp	r7, #0
 800a6a2:	f000 80d4 	beq.w	800a84e <_printf_i+0x1ca>
 800a6a6:	2f58      	cmp	r7, #88	; 0x58
 800a6a8:	f000 80c0 	beq.w	800a82c <_printf_i+0x1a8>
 800a6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6b4:	e03a      	b.n	800a72c <_printf_i+0xa8>
 800a6b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6ba:	2b15      	cmp	r3, #21
 800a6bc:	d8f6      	bhi.n	800a6ac <_printf_i+0x28>
 800a6be:	a101      	add	r1, pc, #4	; (adr r1, 800a6c4 <_printf_i+0x40>)
 800a6c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6c4:	0800a71d 	.word	0x0800a71d
 800a6c8:	0800a731 	.word	0x0800a731
 800a6cc:	0800a6ad 	.word	0x0800a6ad
 800a6d0:	0800a6ad 	.word	0x0800a6ad
 800a6d4:	0800a6ad 	.word	0x0800a6ad
 800a6d8:	0800a6ad 	.word	0x0800a6ad
 800a6dc:	0800a731 	.word	0x0800a731
 800a6e0:	0800a6ad 	.word	0x0800a6ad
 800a6e4:	0800a6ad 	.word	0x0800a6ad
 800a6e8:	0800a6ad 	.word	0x0800a6ad
 800a6ec:	0800a6ad 	.word	0x0800a6ad
 800a6f0:	0800a835 	.word	0x0800a835
 800a6f4:	0800a75d 	.word	0x0800a75d
 800a6f8:	0800a7ef 	.word	0x0800a7ef
 800a6fc:	0800a6ad 	.word	0x0800a6ad
 800a700:	0800a6ad 	.word	0x0800a6ad
 800a704:	0800a857 	.word	0x0800a857
 800a708:	0800a6ad 	.word	0x0800a6ad
 800a70c:	0800a75d 	.word	0x0800a75d
 800a710:	0800a6ad 	.word	0x0800a6ad
 800a714:	0800a6ad 	.word	0x0800a6ad
 800a718:	0800a7f7 	.word	0x0800a7f7
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	1d1a      	adds	r2, r3, #4
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	602a      	str	r2, [r5, #0]
 800a724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a72c:	2301      	movs	r3, #1
 800a72e:	e09f      	b.n	800a870 <_printf_i+0x1ec>
 800a730:	6820      	ldr	r0, [r4, #0]
 800a732:	682b      	ldr	r3, [r5, #0]
 800a734:	0607      	lsls	r7, r0, #24
 800a736:	f103 0104 	add.w	r1, r3, #4
 800a73a:	6029      	str	r1, [r5, #0]
 800a73c:	d501      	bpl.n	800a742 <_printf_i+0xbe>
 800a73e:	681e      	ldr	r6, [r3, #0]
 800a740:	e003      	b.n	800a74a <_printf_i+0xc6>
 800a742:	0646      	lsls	r6, r0, #25
 800a744:	d5fb      	bpl.n	800a73e <_printf_i+0xba>
 800a746:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a74a:	2e00      	cmp	r6, #0
 800a74c:	da03      	bge.n	800a756 <_printf_i+0xd2>
 800a74e:	232d      	movs	r3, #45	; 0x2d
 800a750:	4276      	negs	r6, r6
 800a752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a756:	485a      	ldr	r0, [pc, #360]	; (800a8c0 <_printf_i+0x23c>)
 800a758:	230a      	movs	r3, #10
 800a75a:	e012      	b.n	800a782 <_printf_i+0xfe>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	6820      	ldr	r0, [r4, #0]
 800a760:	1d19      	adds	r1, r3, #4
 800a762:	6029      	str	r1, [r5, #0]
 800a764:	0605      	lsls	r5, r0, #24
 800a766:	d501      	bpl.n	800a76c <_printf_i+0xe8>
 800a768:	681e      	ldr	r6, [r3, #0]
 800a76a:	e002      	b.n	800a772 <_printf_i+0xee>
 800a76c:	0641      	lsls	r1, r0, #25
 800a76e:	d5fb      	bpl.n	800a768 <_printf_i+0xe4>
 800a770:	881e      	ldrh	r6, [r3, #0]
 800a772:	4853      	ldr	r0, [pc, #332]	; (800a8c0 <_printf_i+0x23c>)
 800a774:	2f6f      	cmp	r7, #111	; 0x6f
 800a776:	bf0c      	ite	eq
 800a778:	2308      	moveq	r3, #8
 800a77a:	230a      	movne	r3, #10
 800a77c:	2100      	movs	r1, #0
 800a77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a782:	6865      	ldr	r5, [r4, #4]
 800a784:	60a5      	str	r5, [r4, #8]
 800a786:	2d00      	cmp	r5, #0
 800a788:	bfa2      	ittt	ge
 800a78a:	6821      	ldrge	r1, [r4, #0]
 800a78c:	f021 0104 	bicge.w	r1, r1, #4
 800a790:	6021      	strge	r1, [r4, #0]
 800a792:	b90e      	cbnz	r6, 800a798 <_printf_i+0x114>
 800a794:	2d00      	cmp	r5, #0
 800a796:	d04b      	beq.n	800a830 <_printf_i+0x1ac>
 800a798:	4615      	mov	r5, r2
 800a79a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a79e:	fb03 6711 	mls	r7, r3, r1, r6
 800a7a2:	5dc7      	ldrb	r7, [r0, r7]
 800a7a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7a8:	4637      	mov	r7, r6
 800a7aa:	42bb      	cmp	r3, r7
 800a7ac:	460e      	mov	r6, r1
 800a7ae:	d9f4      	bls.n	800a79a <_printf_i+0x116>
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d10b      	bne.n	800a7cc <_printf_i+0x148>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	07de      	lsls	r6, r3, #31
 800a7b8:	d508      	bpl.n	800a7cc <_printf_i+0x148>
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	6861      	ldr	r1, [r4, #4]
 800a7be:	4299      	cmp	r1, r3
 800a7c0:	bfde      	ittt	le
 800a7c2:	2330      	movle	r3, #48	; 0x30
 800a7c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7cc:	1b52      	subs	r2, r2, r5
 800a7ce:	6122      	str	r2, [r4, #16]
 800a7d0:	f8cd a000 	str.w	sl, [sp]
 800a7d4:	464b      	mov	r3, r9
 800a7d6:	aa03      	add	r2, sp, #12
 800a7d8:	4621      	mov	r1, r4
 800a7da:	4640      	mov	r0, r8
 800a7dc:	f7ff fee4 	bl	800a5a8 <_printf_common>
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d14a      	bne.n	800a87a <_printf_i+0x1f6>
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e8:	b004      	add	sp, #16
 800a7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	f043 0320 	orr.w	r3, r3, #32
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	4833      	ldr	r0, [pc, #204]	; (800a8c4 <_printf_i+0x240>)
 800a7f8:	2778      	movs	r7, #120	; 0x78
 800a7fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	6829      	ldr	r1, [r5, #0]
 800a802:	061f      	lsls	r7, r3, #24
 800a804:	f851 6b04 	ldr.w	r6, [r1], #4
 800a808:	d402      	bmi.n	800a810 <_printf_i+0x18c>
 800a80a:	065f      	lsls	r7, r3, #25
 800a80c:	bf48      	it	mi
 800a80e:	b2b6      	uxthmi	r6, r6
 800a810:	07df      	lsls	r7, r3, #31
 800a812:	bf48      	it	mi
 800a814:	f043 0320 	orrmi.w	r3, r3, #32
 800a818:	6029      	str	r1, [r5, #0]
 800a81a:	bf48      	it	mi
 800a81c:	6023      	strmi	r3, [r4, #0]
 800a81e:	b91e      	cbnz	r6, 800a828 <_printf_i+0x1a4>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	f023 0320 	bic.w	r3, r3, #32
 800a826:	6023      	str	r3, [r4, #0]
 800a828:	2310      	movs	r3, #16
 800a82a:	e7a7      	b.n	800a77c <_printf_i+0xf8>
 800a82c:	4824      	ldr	r0, [pc, #144]	; (800a8c0 <_printf_i+0x23c>)
 800a82e:	e7e4      	b.n	800a7fa <_printf_i+0x176>
 800a830:	4615      	mov	r5, r2
 800a832:	e7bd      	b.n	800a7b0 <_printf_i+0x12c>
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	6826      	ldr	r6, [r4, #0]
 800a838:	6961      	ldr	r1, [r4, #20]
 800a83a:	1d18      	adds	r0, r3, #4
 800a83c:	6028      	str	r0, [r5, #0]
 800a83e:	0635      	lsls	r5, r6, #24
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	d501      	bpl.n	800a848 <_printf_i+0x1c4>
 800a844:	6019      	str	r1, [r3, #0]
 800a846:	e002      	b.n	800a84e <_printf_i+0x1ca>
 800a848:	0670      	lsls	r0, r6, #25
 800a84a:	d5fb      	bpl.n	800a844 <_printf_i+0x1c0>
 800a84c:	8019      	strh	r1, [r3, #0]
 800a84e:	2300      	movs	r3, #0
 800a850:	6123      	str	r3, [r4, #16]
 800a852:	4615      	mov	r5, r2
 800a854:	e7bc      	b.n	800a7d0 <_printf_i+0x14c>
 800a856:	682b      	ldr	r3, [r5, #0]
 800a858:	1d1a      	adds	r2, r3, #4
 800a85a:	602a      	str	r2, [r5, #0]
 800a85c:	681d      	ldr	r5, [r3, #0]
 800a85e:	6862      	ldr	r2, [r4, #4]
 800a860:	2100      	movs	r1, #0
 800a862:	4628      	mov	r0, r5
 800a864:	f7f5 fcbc 	bl	80001e0 <memchr>
 800a868:	b108      	cbz	r0, 800a86e <_printf_i+0x1ea>
 800a86a:	1b40      	subs	r0, r0, r5
 800a86c:	6060      	str	r0, [r4, #4]
 800a86e:	6863      	ldr	r3, [r4, #4]
 800a870:	6123      	str	r3, [r4, #16]
 800a872:	2300      	movs	r3, #0
 800a874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a878:	e7aa      	b.n	800a7d0 <_printf_i+0x14c>
 800a87a:	6923      	ldr	r3, [r4, #16]
 800a87c:	462a      	mov	r2, r5
 800a87e:	4649      	mov	r1, r9
 800a880:	4640      	mov	r0, r8
 800a882:	47d0      	blx	sl
 800a884:	3001      	adds	r0, #1
 800a886:	d0ad      	beq.n	800a7e4 <_printf_i+0x160>
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	079b      	lsls	r3, r3, #30
 800a88c:	d413      	bmi.n	800a8b6 <_printf_i+0x232>
 800a88e:	68e0      	ldr	r0, [r4, #12]
 800a890:	9b03      	ldr	r3, [sp, #12]
 800a892:	4298      	cmp	r0, r3
 800a894:	bfb8      	it	lt
 800a896:	4618      	movlt	r0, r3
 800a898:	e7a6      	b.n	800a7e8 <_printf_i+0x164>
 800a89a:	2301      	movs	r3, #1
 800a89c:	4632      	mov	r2, r6
 800a89e:	4649      	mov	r1, r9
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	47d0      	blx	sl
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d09d      	beq.n	800a7e4 <_printf_i+0x160>
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	68e3      	ldr	r3, [r4, #12]
 800a8ac:	9903      	ldr	r1, [sp, #12]
 800a8ae:	1a5b      	subs	r3, r3, r1
 800a8b0:	42ab      	cmp	r3, r5
 800a8b2:	dcf2      	bgt.n	800a89a <_printf_i+0x216>
 800a8b4:	e7eb      	b.n	800a88e <_printf_i+0x20a>
 800a8b6:	2500      	movs	r5, #0
 800a8b8:	f104 0619 	add.w	r6, r4, #25
 800a8bc:	e7f5      	b.n	800a8aa <_printf_i+0x226>
 800a8be:	bf00      	nop
 800a8c0:	0800bad5 	.word	0x0800bad5
 800a8c4:	0800bae6 	.word	0x0800bae6

0800a8c8 <memmove>:
 800a8c8:	4288      	cmp	r0, r1
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	eb01 0402 	add.w	r4, r1, r2
 800a8d0:	d902      	bls.n	800a8d8 <memmove+0x10>
 800a8d2:	4284      	cmp	r4, r0
 800a8d4:	4623      	mov	r3, r4
 800a8d6:	d807      	bhi.n	800a8e8 <memmove+0x20>
 800a8d8:	1e43      	subs	r3, r0, #1
 800a8da:	42a1      	cmp	r1, r4
 800a8dc:	d008      	beq.n	800a8f0 <memmove+0x28>
 800a8de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8e6:	e7f8      	b.n	800a8da <memmove+0x12>
 800a8e8:	4402      	add	r2, r0
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	428a      	cmp	r2, r1
 800a8ee:	d100      	bne.n	800a8f2 <memmove+0x2a>
 800a8f0:	bd10      	pop	{r4, pc}
 800a8f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8fa:	e7f7      	b.n	800a8ec <memmove+0x24>

0800a8fc <_sbrk_r>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4d06      	ldr	r5, [pc, #24]	; (800a918 <_sbrk_r+0x1c>)
 800a900:	2300      	movs	r3, #0
 800a902:	4604      	mov	r4, r0
 800a904:	4608      	mov	r0, r1
 800a906:	602b      	str	r3, [r5, #0]
 800a908:	f7f7 f9b4 	bl	8001c74 <_sbrk>
 800a90c:	1c43      	adds	r3, r0, #1
 800a90e:	d102      	bne.n	800a916 <_sbrk_r+0x1a>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	b103      	cbz	r3, 800a916 <_sbrk_r+0x1a>
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	200030d8 	.word	0x200030d8

0800a91c <memcpy>:
 800a91c:	440a      	add	r2, r1
 800a91e:	4291      	cmp	r1, r2
 800a920:	f100 33ff 	add.w	r3, r0, #4294967295
 800a924:	d100      	bne.n	800a928 <memcpy+0xc>
 800a926:	4770      	bx	lr
 800a928:	b510      	push	{r4, lr}
 800a92a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a92e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a932:	4291      	cmp	r1, r2
 800a934:	d1f9      	bne.n	800a92a <memcpy+0xe>
 800a936:	bd10      	pop	{r4, pc}

0800a938 <_realloc_r>:
 800a938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a93c:	4680      	mov	r8, r0
 800a93e:	4614      	mov	r4, r2
 800a940:	460e      	mov	r6, r1
 800a942:	b921      	cbnz	r1, 800a94e <_realloc_r+0x16>
 800a944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a948:	4611      	mov	r1, r2
 800a94a:	f7ff bc49 	b.w	800a1e0 <_malloc_r>
 800a94e:	b92a      	cbnz	r2, 800a95c <_realloc_r+0x24>
 800a950:	f7ff fbda 	bl	800a108 <_free_r>
 800a954:	4625      	mov	r5, r4
 800a956:	4628      	mov	r0, r5
 800a958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a95c:	f000 f81b 	bl	800a996 <_malloc_usable_size_r>
 800a960:	4284      	cmp	r4, r0
 800a962:	4607      	mov	r7, r0
 800a964:	d802      	bhi.n	800a96c <_realloc_r+0x34>
 800a966:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a96a:	d812      	bhi.n	800a992 <_realloc_r+0x5a>
 800a96c:	4621      	mov	r1, r4
 800a96e:	4640      	mov	r0, r8
 800a970:	f7ff fc36 	bl	800a1e0 <_malloc_r>
 800a974:	4605      	mov	r5, r0
 800a976:	2800      	cmp	r0, #0
 800a978:	d0ed      	beq.n	800a956 <_realloc_r+0x1e>
 800a97a:	42bc      	cmp	r4, r7
 800a97c:	4622      	mov	r2, r4
 800a97e:	4631      	mov	r1, r6
 800a980:	bf28      	it	cs
 800a982:	463a      	movcs	r2, r7
 800a984:	f7ff ffca 	bl	800a91c <memcpy>
 800a988:	4631      	mov	r1, r6
 800a98a:	4640      	mov	r0, r8
 800a98c:	f7ff fbbc 	bl	800a108 <_free_r>
 800a990:	e7e1      	b.n	800a956 <_realloc_r+0x1e>
 800a992:	4635      	mov	r5, r6
 800a994:	e7df      	b.n	800a956 <_realloc_r+0x1e>

0800a996 <_malloc_usable_size_r>:
 800a996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a99a:	1f18      	subs	r0, r3, #4
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bfbc      	itt	lt
 800a9a0:	580b      	ldrlt	r3, [r1, r0]
 800a9a2:	18c0      	addlt	r0, r0, r3
 800a9a4:	4770      	bx	lr
	...

0800a9a8 <sin>:
 800a9a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9aa:	ec53 2b10 	vmov	r2, r3, d0
 800a9ae:	4828      	ldr	r0, [pc, #160]	; (800aa50 <sin+0xa8>)
 800a9b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a9b4:	4281      	cmp	r1, r0
 800a9b6:	dc07      	bgt.n	800a9c8 <sin+0x20>
 800a9b8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800aa48 <sin+0xa0>
 800a9bc:	2000      	movs	r0, #0
 800a9be:	b005      	add	sp, #20
 800a9c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9c4:	f000 b910 	b.w	800abe8 <__kernel_sin>
 800a9c8:	4822      	ldr	r0, [pc, #136]	; (800aa54 <sin+0xac>)
 800a9ca:	4281      	cmp	r1, r0
 800a9cc:	dd09      	ble.n	800a9e2 <sin+0x3a>
 800a9ce:	ee10 0a10 	vmov	r0, s0
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	f7f5 fc58 	bl	8000288 <__aeabi_dsub>
 800a9d8:	ec41 0b10 	vmov	d0, r0, r1
 800a9dc:	b005      	add	sp, #20
 800a9de:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9e2:	4668      	mov	r0, sp
 800a9e4:	f000 f9c0 	bl	800ad68 <__ieee754_rem_pio2>
 800a9e8:	f000 0003 	and.w	r0, r0, #3
 800a9ec:	2801      	cmp	r0, #1
 800a9ee:	d00c      	beq.n	800aa0a <sin+0x62>
 800a9f0:	2802      	cmp	r0, #2
 800a9f2:	d011      	beq.n	800aa18 <sin+0x70>
 800a9f4:	b9f0      	cbnz	r0, 800aa34 <sin+0x8c>
 800a9f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9fa:	ed9d 0b00 	vldr	d0, [sp]
 800a9fe:	2001      	movs	r0, #1
 800aa00:	f000 f8f2 	bl	800abe8 <__kernel_sin>
 800aa04:	ec51 0b10 	vmov	r0, r1, d0
 800aa08:	e7e6      	b.n	800a9d8 <sin+0x30>
 800aa0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa0e:	ed9d 0b00 	vldr	d0, [sp]
 800aa12:	f000 f821 	bl	800aa58 <__kernel_cos>
 800aa16:	e7f5      	b.n	800aa04 <sin+0x5c>
 800aa18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa1c:	ed9d 0b00 	vldr	d0, [sp]
 800aa20:	2001      	movs	r0, #1
 800aa22:	f000 f8e1 	bl	800abe8 <__kernel_sin>
 800aa26:	ec53 2b10 	vmov	r2, r3, d0
 800aa2a:	ee10 0a10 	vmov	r0, s0
 800aa2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aa32:	e7d1      	b.n	800a9d8 <sin+0x30>
 800aa34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa38:	ed9d 0b00 	vldr	d0, [sp]
 800aa3c:	f000 f80c 	bl	800aa58 <__kernel_cos>
 800aa40:	e7f1      	b.n	800aa26 <sin+0x7e>
 800aa42:	bf00      	nop
 800aa44:	f3af 8000 	nop.w
	...
 800aa50:	3fe921fb 	.word	0x3fe921fb
 800aa54:	7fefffff 	.word	0x7fefffff

0800aa58 <__kernel_cos>:
 800aa58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	ec57 6b10 	vmov	r6, r7, d0
 800aa60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800aa64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800aa68:	ed8d 1b00 	vstr	d1, [sp]
 800aa6c:	da07      	bge.n	800aa7e <__kernel_cos+0x26>
 800aa6e:	ee10 0a10 	vmov	r0, s0
 800aa72:	4639      	mov	r1, r7
 800aa74:	f7f6 f85a 	bl	8000b2c <__aeabi_d2iz>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	f000 8088 	beq.w	800ab8e <__kernel_cos+0x136>
 800aa7e:	4632      	mov	r2, r6
 800aa80:	463b      	mov	r3, r7
 800aa82:	4630      	mov	r0, r6
 800aa84:	4639      	mov	r1, r7
 800aa86:	f7f5 fdb7 	bl	80005f8 <__aeabi_dmul>
 800aa8a:	4b51      	ldr	r3, [pc, #324]	; (800abd0 <__kernel_cos+0x178>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	460d      	mov	r5, r1
 800aa92:	f7f5 fdb1 	bl	80005f8 <__aeabi_dmul>
 800aa96:	a340      	add	r3, pc, #256	; (adr r3, 800ab98 <__kernel_cos+0x140>)
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	4682      	mov	sl, r0
 800aa9e:	468b      	mov	fp, r1
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	f7f5 fda8 	bl	80005f8 <__aeabi_dmul>
 800aaa8:	a33d      	add	r3, pc, #244	; (adr r3, 800aba0 <__kernel_cos+0x148>)
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f7f5 fbed 	bl	800028c <__adddf3>
 800aab2:	4622      	mov	r2, r4
 800aab4:	462b      	mov	r3, r5
 800aab6:	f7f5 fd9f 	bl	80005f8 <__aeabi_dmul>
 800aaba:	a33b      	add	r3, pc, #236	; (adr r3, 800aba8 <__kernel_cos+0x150>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fbe2 	bl	8000288 <__aeabi_dsub>
 800aac4:	4622      	mov	r2, r4
 800aac6:	462b      	mov	r3, r5
 800aac8:	f7f5 fd96 	bl	80005f8 <__aeabi_dmul>
 800aacc:	a338      	add	r3, pc, #224	; (adr r3, 800abb0 <__kernel_cos+0x158>)
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	f7f5 fbdb 	bl	800028c <__adddf3>
 800aad6:	4622      	mov	r2, r4
 800aad8:	462b      	mov	r3, r5
 800aada:	f7f5 fd8d 	bl	80005f8 <__aeabi_dmul>
 800aade:	a336      	add	r3, pc, #216	; (adr r3, 800abb8 <__kernel_cos+0x160>)
 800aae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae4:	f7f5 fbd0 	bl	8000288 <__aeabi_dsub>
 800aae8:	4622      	mov	r2, r4
 800aaea:	462b      	mov	r3, r5
 800aaec:	f7f5 fd84 	bl	80005f8 <__aeabi_dmul>
 800aaf0:	a333      	add	r3, pc, #204	; (adr r3, 800abc0 <__kernel_cos+0x168>)
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	f7f5 fbc9 	bl	800028c <__adddf3>
 800aafa:	4622      	mov	r2, r4
 800aafc:	462b      	mov	r3, r5
 800aafe:	f7f5 fd7b 	bl	80005f8 <__aeabi_dmul>
 800ab02:	4622      	mov	r2, r4
 800ab04:	462b      	mov	r3, r5
 800ab06:	f7f5 fd77 	bl	80005f8 <__aeabi_dmul>
 800ab0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab0e:	4604      	mov	r4, r0
 800ab10:	460d      	mov	r5, r1
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 fd6f 	bl	80005f8 <__aeabi_dmul>
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	4629      	mov	r1, r5
 800ab20:	4620      	mov	r0, r4
 800ab22:	f7f5 fbb1 	bl	8000288 <__aeabi_dsub>
 800ab26:	4b2b      	ldr	r3, [pc, #172]	; (800abd4 <__kernel_cos+0x17c>)
 800ab28:	4598      	cmp	r8, r3
 800ab2a:	4606      	mov	r6, r0
 800ab2c:	460f      	mov	r7, r1
 800ab2e:	dc10      	bgt.n	800ab52 <__kernel_cos+0xfa>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4650      	mov	r0, sl
 800ab36:	4659      	mov	r1, fp
 800ab38:	f7f5 fba6 	bl	8000288 <__aeabi_dsub>
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4926      	ldr	r1, [pc, #152]	; (800abd8 <__kernel_cos+0x180>)
 800ab40:	4602      	mov	r2, r0
 800ab42:	2000      	movs	r0, #0
 800ab44:	f7f5 fba0 	bl	8000288 <__aeabi_dsub>
 800ab48:	ec41 0b10 	vmov	d0, r0, r1
 800ab4c:	b003      	add	sp, #12
 800ab4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab52:	4b22      	ldr	r3, [pc, #136]	; (800abdc <__kernel_cos+0x184>)
 800ab54:	4920      	ldr	r1, [pc, #128]	; (800abd8 <__kernel_cos+0x180>)
 800ab56:	4598      	cmp	r8, r3
 800ab58:	bfcc      	ite	gt
 800ab5a:	4d21      	ldrgt	r5, [pc, #132]	; (800abe0 <__kernel_cos+0x188>)
 800ab5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ab60:	2400      	movs	r4, #0
 800ab62:	4622      	mov	r2, r4
 800ab64:	462b      	mov	r3, r5
 800ab66:	2000      	movs	r0, #0
 800ab68:	f7f5 fb8e 	bl	8000288 <__aeabi_dsub>
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	4680      	mov	r8, r0
 800ab70:	4689      	mov	r9, r1
 800ab72:	462b      	mov	r3, r5
 800ab74:	4650      	mov	r0, sl
 800ab76:	4659      	mov	r1, fp
 800ab78:	f7f5 fb86 	bl	8000288 <__aeabi_dsub>
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	463b      	mov	r3, r7
 800ab80:	f7f5 fb82 	bl	8000288 <__aeabi_dsub>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4640      	mov	r0, r8
 800ab8a:	4649      	mov	r1, r9
 800ab8c:	e7da      	b.n	800ab44 <__kernel_cos+0xec>
 800ab8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800abc8 <__kernel_cos+0x170>
 800ab92:	e7db      	b.n	800ab4c <__kernel_cos+0xf4>
 800ab94:	f3af 8000 	nop.w
 800ab98:	be8838d4 	.word	0xbe8838d4
 800ab9c:	bda8fae9 	.word	0xbda8fae9
 800aba0:	bdb4b1c4 	.word	0xbdb4b1c4
 800aba4:	3e21ee9e 	.word	0x3e21ee9e
 800aba8:	809c52ad 	.word	0x809c52ad
 800abac:	3e927e4f 	.word	0x3e927e4f
 800abb0:	19cb1590 	.word	0x19cb1590
 800abb4:	3efa01a0 	.word	0x3efa01a0
 800abb8:	16c15177 	.word	0x16c15177
 800abbc:	3f56c16c 	.word	0x3f56c16c
 800abc0:	5555554c 	.word	0x5555554c
 800abc4:	3fa55555 	.word	0x3fa55555
 800abc8:	00000000 	.word	0x00000000
 800abcc:	3ff00000 	.word	0x3ff00000
 800abd0:	3fe00000 	.word	0x3fe00000
 800abd4:	3fd33332 	.word	0x3fd33332
 800abd8:	3ff00000 	.word	0x3ff00000
 800abdc:	3fe90000 	.word	0x3fe90000
 800abe0:	3fd20000 	.word	0x3fd20000
 800abe4:	00000000 	.word	0x00000000

0800abe8 <__kernel_sin>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	ed2d 8b04 	vpush	{d8-d9}
 800abf0:	eeb0 8a41 	vmov.f32	s16, s2
 800abf4:	eef0 8a61 	vmov.f32	s17, s3
 800abf8:	ec55 4b10 	vmov	r4, r5, d0
 800abfc:	b083      	sub	sp, #12
 800abfe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ac02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ac06:	9001      	str	r0, [sp, #4]
 800ac08:	da06      	bge.n	800ac18 <__kernel_sin+0x30>
 800ac0a:	ee10 0a10 	vmov	r0, s0
 800ac0e:	4629      	mov	r1, r5
 800ac10:	f7f5 ff8c 	bl	8000b2c <__aeabi_d2iz>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d051      	beq.n	800acbc <__kernel_sin+0xd4>
 800ac18:	4622      	mov	r2, r4
 800ac1a:	462b      	mov	r3, r5
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	4629      	mov	r1, r5
 800ac20:	f7f5 fcea 	bl	80005f8 <__aeabi_dmul>
 800ac24:	4682      	mov	sl, r0
 800ac26:	468b      	mov	fp, r1
 800ac28:	4602      	mov	r2, r0
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4629      	mov	r1, r5
 800ac30:	f7f5 fce2 	bl	80005f8 <__aeabi_dmul>
 800ac34:	a341      	add	r3, pc, #260	; (adr r3, 800ad3c <__kernel_sin+0x154>)
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	4680      	mov	r8, r0
 800ac3c:	4689      	mov	r9, r1
 800ac3e:	4650      	mov	r0, sl
 800ac40:	4659      	mov	r1, fp
 800ac42:	f7f5 fcd9 	bl	80005f8 <__aeabi_dmul>
 800ac46:	a33f      	add	r3, pc, #252	; (adr r3, 800ad44 <__kernel_sin+0x15c>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	f7f5 fb1c 	bl	8000288 <__aeabi_dsub>
 800ac50:	4652      	mov	r2, sl
 800ac52:	465b      	mov	r3, fp
 800ac54:	f7f5 fcd0 	bl	80005f8 <__aeabi_dmul>
 800ac58:	a33c      	add	r3, pc, #240	; (adr r3, 800ad4c <__kernel_sin+0x164>)
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	f7f5 fb15 	bl	800028c <__adddf3>
 800ac62:	4652      	mov	r2, sl
 800ac64:	465b      	mov	r3, fp
 800ac66:	f7f5 fcc7 	bl	80005f8 <__aeabi_dmul>
 800ac6a:	a33a      	add	r3, pc, #232	; (adr r3, 800ad54 <__kernel_sin+0x16c>)
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	f7f5 fb0a 	bl	8000288 <__aeabi_dsub>
 800ac74:	4652      	mov	r2, sl
 800ac76:	465b      	mov	r3, fp
 800ac78:	f7f5 fcbe 	bl	80005f8 <__aeabi_dmul>
 800ac7c:	a337      	add	r3, pc, #220	; (adr r3, 800ad5c <__kernel_sin+0x174>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	f7f5 fb03 	bl	800028c <__adddf3>
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	4606      	mov	r6, r0
 800ac8a:	460f      	mov	r7, r1
 800ac8c:	b9eb      	cbnz	r3, 800acca <__kernel_sin+0xe2>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	460b      	mov	r3, r1
 800ac92:	4650      	mov	r0, sl
 800ac94:	4659      	mov	r1, fp
 800ac96:	f7f5 fcaf 	bl	80005f8 <__aeabi_dmul>
 800ac9a:	a325      	add	r3, pc, #148	; (adr r3, 800ad30 <__kernel_sin+0x148>)
 800ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca0:	f7f5 faf2 	bl	8000288 <__aeabi_dsub>
 800aca4:	4642      	mov	r2, r8
 800aca6:	464b      	mov	r3, r9
 800aca8:	f7f5 fca6 	bl	80005f8 <__aeabi_dmul>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	4620      	mov	r0, r4
 800acb2:	4629      	mov	r1, r5
 800acb4:	f7f5 faea 	bl	800028c <__adddf3>
 800acb8:	4604      	mov	r4, r0
 800acba:	460d      	mov	r5, r1
 800acbc:	ec45 4b10 	vmov	d0, r4, r5
 800acc0:	b003      	add	sp, #12
 800acc2:	ecbd 8b04 	vpop	{d8-d9}
 800acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acca:	4b1b      	ldr	r3, [pc, #108]	; (800ad38 <__kernel_sin+0x150>)
 800accc:	ec51 0b18 	vmov	r0, r1, d8
 800acd0:	2200      	movs	r2, #0
 800acd2:	f7f5 fc91 	bl	80005f8 <__aeabi_dmul>
 800acd6:	4632      	mov	r2, r6
 800acd8:	ec41 0b19 	vmov	d9, r0, r1
 800acdc:	463b      	mov	r3, r7
 800acde:	4640      	mov	r0, r8
 800ace0:	4649      	mov	r1, r9
 800ace2:	f7f5 fc89 	bl	80005f8 <__aeabi_dmul>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	ec51 0b19 	vmov	r0, r1, d9
 800acee:	f7f5 facb 	bl	8000288 <__aeabi_dsub>
 800acf2:	4652      	mov	r2, sl
 800acf4:	465b      	mov	r3, fp
 800acf6:	f7f5 fc7f 	bl	80005f8 <__aeabi_dmul>
 800acfa:	ec53 2b18 	vmov	r2, r3, d8
 800acfe:	f7f5 fac3 	bl	8000288 <__aeabi_dsub>
 800ad02:	a30b      	add	r3, pc, #44	; (adr r3, 800ad30 <__kernel_sin+0x148>)
 800ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad08:	4606      	mov	r6, r0
 800ad0a:	460f      	mov	r7, r1
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	4649      	mov	r1, r9
 800ad10:	f7f5 fc72 	bl	80005f8 <__aeabi_dmul>
 800ad14:	4602      	mov	r2, r0
 800ad16:	460b      	mov	r3, r1
 800ad18:	4630      	mov	r0, r6
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	f7f5 fab6 	bl	800028c <__adddf3>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4620      	mov	r0, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	f7f5 faae 	bl	8000288 <__aeabi_dsub>
 800ad2c:	e7c4      	b.n	800acb8 <__kernel_sin+0xd0>
 800ad2e:	bf00      	nop
 800ad30:	55555549 	.word	0x55555549
 800ad34:	3fc55555 	.word	0x3fc55555
 800ad38:	3fe00000 	.word	0x3fe00000
 800ad3c:	5acfd57c 	.word	0x5acfd57c
 800ad40:	3de5d93a 	.word	0x3de5d93a
 800ad44:	8a2b9ceb 	.word	0x8a2b9ceb
 800ad48:	3e5ae5e6 	.word	0x3e5ae5e6
 800ad4c:	57b1fe7d 	.word	0x57b1fe7d
 800ad50:	3ec71de3 	.word	0x3ec71de3
 800ad54:	19c161d5 	.word	0x19c161d5
 800ad58:	3f2a01a0 	.word	0x3f2a01a0
 800ad5c:	1110f8a6 	.word	0x1110f8a6
 800ad60:	3f811111 	.word	0x3f811111
 800ad64:	00000000 	.word	0x00000000

0800ad68 <__ieee754_rem_pio2>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	ed2d 8b02 	vpush	{d8}
 800ad70:	ec55 4b10 	vmov	r4, r5, d0
 800ad74:	4bca      	ldr	r3, [pc, #808]	; (800b0a0 <__ieee754_rem_pio2+0x338>)
 800ad76:	b08b      	sub	sp, #44	; 0x2c
 800ad78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ad7c:	4598      	cmp	r8, r3
 800ad7e:	4682      	mov	sl, r0
 800ad80:	9502      	str	r5, [sp, #8]
 800ad82:	dc08      	bgt.n	800ad96 <__ieee754_rem_pio2+0x2e>
 800ad84:	2200      	movs	r2, #0
 800ad86:	2300      	movs	r3, #0
 800ad88:	ed80 0b00 	vstr	d0, [r0]
 800ad8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ad90:	f04f 0b00 	mov.w	fp, #0
 800ad94:	e028      	b.n	800ade8 <__ieee754_rem_pio2+0x80>
 800ad96:	4bc3      	ldr	r3, [pc, #780]	; (800b0a4 <__ieee754_rem_pio2+0x33c>)
 800ad98:	4598      	cmp	r8, r3
 800ad9a:	dc78      	bgt.n	800ae8e <__ieee754_rem_pio2+0x126>
 800ad9c:	9b02      	ldr	r3, [sp, #8]
 800ad9e:	4ec2      	ldr	r6, [pc, #776]	; (800b0a8 <__ieee754_rem_pio2+0x340>)
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	ee10 0a10 	vmov	r0, s0
 800ada6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b068 <__ieee754_rem_pio2+0x300>)
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	4629      	mov	r1, r5
 800adae:	dd39      	ble.n	800ae24 <__ieee754_rem_pio2+0xbc>
 800adb0:	f7f5 fa6a 	bl	8000288 <__aeabi_dsub>
 800adb4:	45b0      	cmp	r8, r6
 800adb6:	4604      	mov	r4, r0
 800adb8:	460d      	mov	r5, r1
 800adba:	d01b      	beq.n	800adf4 <__ieee754_rem_pio2+0x8c>
 800adbc:	a3ac      	add	r3, pc, #688	; (adr r3, 800b070 <__ieee754_rem_pio2+0x308>)
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	f7f5 fa61 	bl	8000288 <__aeabi_dsub>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	e9ca 2300 	strd	r2, r3, [sl]
 800adce:	4620      	mov	r0, r4
 800add0:	4629      	mov	r1, r5
 800add2:	f7f5 fa59 	bl	8000288 <__aeabi_dsub>
 800add6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b070 <__ieee754_rem_pio2+0x308>)
 800add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800addc:	f7f5 fa54 	bl	8000288 <__aeabi_dsub>
 800ade0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ade4:	f04f 0b01 	mov.w	fp, #1
 800ade8:	4658      	mov	r0, fp
 800adea:	b00b      	add	sp, #44	; 0x2c
 800adec:	ecbd 8b02 	vpop	{d8}
 800adf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b078 <__ieee754_rem_pio2+0x310>)
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	f7f5 fa45 	bl	8000288 <__aeabi_dsub>
 800adfe:	a3a0      	add	r3, pc, #640	; (adr r3, 800b080 <__ieee754_rem_pio2+0x318>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	4604      	mov	r4, r0
 800ae06:	460d      	mov	r5, r1
 800ae08:	f7f5 fa3e 	bl	8000288 <__aeabi_dsub>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	e9ca 2300 	strd	r2, r3, [sl]
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 fa36 	bl	8000288 <__aeabi_dsub>
 800ae1c:	a398      	add	r3, pc, #608	; (adr r3, 800b080 <__ieee754_rem_pio2+0x318>)
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	e7db      	b.n	800addc <__ieee754_rem_pio2+0x74>
 800ae24:	f7f5 fa32 	bl	800028c <__adddf3>
 800ae28:	45b0      	cmp	r8, r6
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	460d      	mov	r5, r1
 800ae2e:	d016      	beq.n	800ae5e <__ieee754_rem_pio2+0xf6>
 800ae30:	a38f      	add	r3, pc, #572	; (adr r3, 800b070 <__ieee754_rem_pio2+0x308>)
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	f7f5 fa29 	bl	800028c <__adddf3>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	e9ca 2300 	strd	r2, r3, [sl]
 800ae42:	4620      	mov	r0, r4
 800ae44:	4629      	mov	r1, r5
 800ae46:	f7f5 fa1f 	bl	8000288 <__aeabi_dsub>
 800ae4a:	a389      	add	r3, pc, #548	; (adr r3, 800b070 <__ieee754_rem_pio2+0x308>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f7f5 fa1c 	bl	800028c <__adddf3>
 800ae54:	f04f 3bff 	mov.w	fp, #4294967295
 800ae58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae5c:	e7c4      	b.n	800ade8 <__ieee754_rem_pio2+0x80>
 800ae5e:	a386      	add	r3, pc, #536	; (adr r3, 800b078 <__ieee754_rem_pio2+0x310>)
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	f7f5 fa12 	bl	800028c <__adddf3>
 800ae68:	a385      	add	r3, pc, #532	; (adr r3, 800b080 <__ieee754_rem_pio2+0x318>)
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	4604      	mov	r4, r0
 800ae70:	460d      	mov	r5, r1
 800ae72:	f7f5 fa0b 	bl	800028c <__adddf3>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	e9ca 2300 	strd	r2, r3, [sl]
 800ae7e:	4620      	mov	r0, r4
 800ae80:	4629      	mov	r1, r5
 800ae82:	f7f5 fa01 	bl	8000288 <__aeabi_dsub>
 800ae86:	a37e      	add	r3, pc, #504	; (adr r3, 800b080 <__ieee754_rem_pio2+0x318>)
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	e7e0      	b.n	800ae50 <__ieee754_rem_pio2+0xe8>
 800ae8e:	4b87      	ldr	r3, [pc, #540]	; (800b0ac <__ieee754_rem_pio2+0x344>)
 800ae90:	4598      	cmp	r8, r3
 800ae92:	f300 80d8 	bgt.w	800b046 <__ieee754_rem_pio2+0x2de>
 800ae96:	f000 f96d 	bl	800b174 <fabs>
 800ae9a:	ec55 4b10 	vmov	r4, r5, d0
 800ae9e:	ee10 0a10 	vmov	r0, s0
 800aea2:	a379      	add	r3, pc, #484	; (adr r3, 800b088 <__ieee754_rem_pio2+0x320>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	4629      	mov	r1, r5
 800aeaa:	f7f5 fba5 	bl	80005f8 <__aeabi_dmul>
 800aeae:	4b80      	ldr	r3, [pc, #512]	; (800b0b0 <__ieee754_rem_pio2+0x348>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f7f5 f9eb 	bl	800028c <__adddf3>
 800aeb6:	f7f5 fe39 	bl	8000b2c <__aeabi_d2iz>
 800aeba:	4683      	mov	fp, r0
 800aebc:	f7f5 fb32 	bl	8000524 <__aeabi_i2d>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	ec43 2b18 	vmov	d8, r2, r3
 800aec8:	a367      	add	r3, pc, #412	; (adr r3, 800b068 <__ieee754_rem_pio2+0x300>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f7f5 fb93 	bl	80005f8 <__aeabi_dmul>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4620      	mov	r0, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f5 f9d5 	bl	8000288 <__aeabi_dsub>
 800aede:	a364      	add	r3, pc, #400	; (adr r3, 800b070 <__ieee754_rem_pio2+0x308>)
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	4606      	mov	r6, r0
 800aee6:	460f      	mov	r7, r1
 800aee8:	ec51 0b18 	vmov	r0, r1, d8
 800aeec:	f7f5 fb84 	bl	80005f8 <__aeabi_dmul>
 800aef0:	f1bb 0f1f 	cmp.w	fp, #31
 800aef4:	4604      	mov	r4, r0
 800aef6:	460d      	mov	r5, r1
 800aef8:	dc0d      	bgt.n	800af16 <__ieee754_rem_pio2+0x1ae>
 800aefa:	4b6e      	ldr	r3, [pc, #440]	; (800b0b4 <__ieee754_rem_pio2+0x34c>)
 800aefc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800af00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af04:	4543      	cmp	r3, r8
 800af06:	d006      	beq.n	800af16 <__ieee754_rem_pio2+0x1ae>
 800af08:	4622      	mov	r2, r4
 800af0a:	462b      	mov	r3, r5
 800af0c:	4630      	mov	r0, r6
 800af0e:	4639      	mov	r1, r7
 800af10:	f7f5 f9ba 	bl	8000288 <__aeabi_dsub>
 800af14:	e00e      	b.n	800af34 <__ieee754_rem_pio2+0x1cc>
 800af16:	462b      	mov	r3, r5
 800af18:	4622      	mov	r2, r4
 800af1a:	4630      	mov	r0, r6
 800af1c:	4639      	mov	r1, r7
 800af1e:	f7f5 f9b3 	bl	8000288 <__aeabi_dsub>
 800af22:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af26:	9303      	str	r3, [sp, #12]
 800af28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800af2c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800af30:	2b10      	cmp	r3, #16
 800af32:	dc02      	bgt.n	800af3a <__ieee754_rem_pio2+0x1d2>
 800af34:	e9ca 0100 	strd	r0, r1, [sl]
 800af38:	e039      	b.n	800afae <__ieee754_rem_pio2+0x246>
 800af3a:	a34f      	add	r3, pc, #316	; (adr r3, 800b078 <__ieee754_rem_pio2+0x310>)
 800af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af40:	ec51 0b18 	vmov	r0, r1, d8
 800af44:	f7f5 fb58 	bl	80005f8 <__aeabi_dmul>
 800af48:	4604      	mov	r4, r0
 800af4a:	460d      	mov	r5, r1
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4630      	mov	r0, r6
 800af52:	4639      	mov	r1, r7
 800af54:	f7f5 f998 	bl	8000288 <__aeabi_dsub>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	4680      	mov	r8, r0
 800af5e:	4689      	mov	r9, r1
 800af60:	4630      	mov	r0, r6
 800af62:	4639      	mov	r1, r7
 800af64:	f7f5 f990 	bl	8000288 <__aeabi_dsub>
 800af68:	4622      	mov	r2, r4
 800af6a:	462b      	mov	r3, r5
 800af6c:	f7f5 f98c 	bl	8000288 <__aeabi_dsub>
 800af70:	a343      	add	r3, pc, #268	; (adr r3, 800b080 <__ieee754_rem_pio2+0x318>)
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	4604      	mov	r4, r0
 800af78:	460d      	mov	r5, r1
 800af7a:	ec51 0b18 	vmov	r0, r1, d8
 800af7e:	f7f5 fb3b 	bl	80005f8 <__aeabi_dmul>
 800af82:	4622      	mov	r2, r4
 800af84:	462b      	mov	r3, r5
 800af86:	f7f5 f97f 	bl	8000288 <__aeabi_dsub>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	4604      	mov	r4, r0
 800af90:	460d      	mov	r5, r1
 800af92:	4640      	mov	r0, r8
 800af94:	4649      	mov	r1, r9
 800af96:	f7f5 f977 	bl	8000288 <__aeabi_dsub>
 800af9a:	9a03      	ldr	r2, [sp, #12]
 800af9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	2b31      	cmp	r3, #49	; 0x31
 800afa4:	dc24      	bgt.n	800aff0 <__ieee754_rem_pio2+0x288>
 800afa6:	e9ca 0100 	strd	r0, r1, [sl]
 800afaa:	4646      	mov	r6, r8
 800afac:	464f      	mov	r7, r9
 800afae:	e9da 8900 	ldrd	r8, r9, [sl]
 800afb2:	4630      	mov	r0, r6
 800afb4:	4642      	mov	r2, r8
 800afb6:	464b      	mov	r3, r9
 800afb8:	4639      	mov	r1, r7
 800afba:	f7f5 f965 	bl	8000288 <__aeabi_dsub>
 800afbe:	462b      	mov	r3, r5
 800afc0:	4622      	mov	r2, r4
 800afc2:	f7f5 f961 	bl	8000288 <__aeabi_dsub>
 800afc6:	9b02      	ldr	r3, [sp, #8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800afce:	f6bf af0b 	bge.w	800ade8 <__ieee754_rem_pio2+0x80>
 800afd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800afd6:	f8ca 3004 	str.w	r3, [sl, #4]
 800afda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afde:	f8ca 8000 	str.w	r8, [sl]
 800afe2:	f8ca 0008 	str.w	r0, [sl, #8]
 800afe6:	f8ca 300c 	str.w	r3, [sl, #12]
 800afea:	f1cb 0b00 	rsb	fp, fp, #0
 800afee:	e6fb      	b.n	800ade8 <__ieee754_rem_pio2+0x80>
 800aff0:	a327      	add	r3, pc, #156	; (adr r3, 800b090 <__ieee754_rem_pio2+0x328>)
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	ec51 0b18 	vmov	r0, r1, d8
 800affa:	f7f5 fafd 	bl	80005f8 <__aeabi_dmul>
 800affe:	4604      	mov	r4, r0
 800b000:	460d      	mov	r5, r1
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4640      	mov	r0, r8
 800b008:	4649      	mov	r1, r9
 800b00a:	f7f5 f93d 	bl	8000288 <__aeabi_dsub>
 800b00e:	4602      	mov	r2, r0
 800b010:	460b      	mov	r3, r1
 800b012:	4606      	mov	r6, r0
 800b014:	460f      	mov	r7, r1
 800b016:	4640      	mov	r0, r8
 800b018:	4649      	mov	r1, r9
 800b01a:	f7f5 f935 	bl	8000288 <__aeabi_dsub>
 800b01e:	4622      	mov	r2, r4
 800b020:	462b      	mov	r3, r5
 800b022:	f7f5 f931 	bl	8000288 <__aeabi_dsub>
 800b026:	a31c      	add	r3, pc, #112	; (adr r3, 800b098 <__ieee754_rem_pio2+0x330>)
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	4604      	mov	r4, r0
 800b02e:	460d      	mov	r5, r1
 800b030:	ec51 0b18 	vmov	r0, r1, d8
 800b034:	f7f5 fae0 	bl	80005f8 <__aeabi_dmul>
 800b038:	4622      	mov	r2, r4
 800b03a:	462b      	mov	r3, r5
 800b03c:	f7f5 f924 	bl	8000288 <__aeabi_dsub>
 800b040:	4604      	mov	r4, r0
 800b042:	460d      	mov	r5, r1
 800b044:	e760      	b.n	800af08 <__ieee754_rem_pio2+0x1a0>
 800b046:	4b1c      	ldr	r3, [pc, #112]	; (800b0b8 <__ieee754_rem_pio2+0x350>)
 800b048:	4598      	cmp	r8, r3
 800b04a:	dd37      	ble.n	800b0bc <__ieee754_rem_pio2+0x354>
 800b04c:	ee10 2a10 	vmov	r2, s0
 800b050:	462b      	mov	r3, r5
 800b052:	4620      	mov	r0, r4
 800b054:	4629      	mov	r1, r5
 800b056:	f7f5 f917 	bl	8000288 <__aeabi_dsub>
 800b05a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b05e:	e9ca 0100 	strd	r0, r1, [sl]
 800b062:	e695      	b.n	800ad90 <__ieee754_rem_pio2+0x28>
 800b064:	f3af 8000 	nop.w
 800b068:	54400000 	.word	0x54400000
 800b06c:	3ff921fb 	.word	0x3ff921fb
 800b070:	1a626331 	.word	0x1a626331
 800b074:	3dd0b461 	.word	0x3dd0b461
 800b078:	1a600000 	.word	0x1a600000
 800b07c:	3dd0b461 	.word	0x3dd0b461
 800b080:	2e037073 	.word	0x2e037073
 800b084:	3ba3198a 	.word	0x3ba3198a
 800b088:	6dc9c883 	.word	0x6dc9c883
 800b08c:	3fe45f30 	.word	0x3fe45f30
 800b090:	2e000000 	.word	0x2e000000
 800b094:	3ba3198a 	.word	0x3ba3198a
 800b098:	252049c1 	.word	0x252049c1
 800b09c:	397b839a 	.word	0x397b839a
 800b0a0:	3fe921fb 	.word	0x3fe921fb
 800b0a4:	4002d97b 	.word	0x4002d97b
 800b0a8:	3ff921fb 	.word	0x3ff921fb
 800b0ac:	413921fb 	.word	0x413921fb
 800b0b0:	3fe00000 	.word	0x3fe00000
 800b0b4:	0800baf8 	.word	0x0800baf8
 800b0b8:	7fefffff 	.word	0x7fefffff
 800b0bc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800b0c0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800b0c4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	460d      	mov	r5, r1
 800b0cc:	f7f5 fd2e 	bl	8000b2c <__aeabi_d2iz>
 800b0d0:	f7f5 fa28 	bl	8000524 <__aeabi_i2d>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4620      	mov	r0, r4
 800b0da:	4629      	mov	r1, r5
 800b0dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0e0:	f7f5 f8d2 	bl	8000288 <__aeabi_dsub>
 800b0e4:	4b21      	ldr	r3, [pc, #132]	; (800b16c <__ieee754_rem_pio2+0x404>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f7f5 fa86 	bl	80005f8 <__aeabi_dmul>
 800b0ec:	460d      	mov	r5, r1
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	f7f5 fd1c 	bl	8000b2c <__aeabi_d2iz>
 800b0f4:	f7f5 fa16 	bl	8000524 <__aeabi_i2d>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	4629      	mov	r1, r5
 800b100:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b104:	f7f5 f8c0 	bl	8000288 <__aeabi_dsub>
 800b108:	4b18      	ldr	r3, [pc, #96]	; (800b16c <__ieee754_rem_pio2+0x404>)
 800b10a:	2200      	movs	r2, #0
 800b10c:	f7f5 fa74 	bl	80005f8 <__aeabi_dmul>
 800b110:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b114:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b118:	2703      	movs	r7, #3
 800b11a:	2400      	movs	r4, #0
 800b11c:	2500      	movs	r5, #0
 800b11e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800b122:	4622      	mov	r2, r4
 800b124:	462b      	mov	r3, r5
 800b126:	46b9      	mov	r9, r7
 800b128:	3f01      	subs	r7, #1
 800b12a:	f7f5 fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b12e:	2800      	cmp	r0, #0
 800b130:	d1f5      	bne.n	800b11e <__ieee754_rem_pio2+0x3b6>
 800b132:	4b0f      	ldr	r3, [pc, #60]	; (800b170 <__ieee754_rem_pio2+0x408>)
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	2302      	movs	r3, #2
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	4632      	mov	r2, r6
 800b13c:	464b      	mov	r3, r9
 800b13e:	4651      	mov	r1, sl
 800b140:	a804      	add	r0, sp, #16
 800b142:	f000 f821 	bl	800b188 <__kernel_rem_pio2>
 800b146:	9b02      	ldr	r3, [sp, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	4683      	mov	fp, r0
 800b14c:	f6bf ae4c 	bge.w	800ade8 <__ieee754_rem_pio2+0x80>
 800b150:	e9da 2100 	ldrd	r2, r1, [sl]
 800b154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b158:	e9ca 2300 	strd	r2, r3, [sl]
 800b15c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b164:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b168:	e73f      	b.n	800afea <__ieee754_rem_pio2+0x282>
 800b16a:	bf00      	nop
 800b16c:	41700000 	.word	0x41700000
 800b170:	0800bb78 	.word	0x0800bb78

0800b174 <fabs>:
 800b174:	ec51 0b10 	vmov	r0, r1, d0
 800b178:	ee10 2a10 	vmov	r2, s0
 800b17c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b180:	ec43 2b10 	vmov	d0, r2, r3
 800b184:	4770      	bx	lr
	...

0800b188 <__kernel_rem_pio2>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	ed2d 8b02 	vpush	{d8}
 800b190:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b194:	f112 0f14 	cmn.w	r2, #20
 800b198:	9306      	str	r3, [sp, #24]
 800b19a:	9104      	str	r1, [sp, #16]
 800b19c:	4bc2      	ldr	r3, [pc, #776]	; (800b4a8 <__kernel_rem_pio2+0x320>)
 800b19e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b1a0:	9009      	str	r0, [sp, #36]	; 0x24
 800b1a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	9b06      	ldr	r3, [sp, #24]
 800b1aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800b1ae:	bfa8      	it	ge
 800b1b0:	1ed4      	subge	r4, r2, #3
 800b1b2:	9305      	str	r3, [sp, #20]
 800b1b4:	bfb2      	itee	lt
 800b1b6:	2400      	movlt	r4, #0
 800b1b8:	2318      	movge	r3, #24
 800b1ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800b1be:	f06f 0317 	mvn.w	r3, #23
 800b1c2:	fb04 3303 	mla	r3, r4, r3, r3
 800b1c6:	eb03 0a02 	add.w	sl, r3, r2
 800b1ca:	9b00      	ldr	r3, [sp, #0]
 800b1cc:	9a05      	ldr	r2, [sp, #20]
 800b1ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800b498 <__kernel_rem_pio2+0x310>
 800b1d2:	eb03 0802 	add.w	r8, r3, r2
 800b1d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b1d8:	1aa7      	subs	r7, r4, r2
 800b1da:	ae20      	add	r6, sp, #128	; 0x80
 800b1dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b1e0:	2500      	movs	r5, #0
 800b1e2:	4545      	cmp	r5, r8
 800b1e4:	dd13      	ble.n	800b20e <__kernel_rem_pio2+0x86>
 800b1e6:	9b06      	ldr	r3, [sp, #24]
 800b1e8:	aa20      	add	r2, sp, #128	; 0x80
 800b1ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b1ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b1f2:	f04f 0800 	mov.w	r8, #0
 800b1f6:	9b00      	ldr	r3, [sp, #0]
 800b1f8:	4598      	cmp	r8, r3
 800b1fa:	dc31      	bgt.n	800b260 <__kernel_rem_pio2+0xd8>
 800b1fc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800b498 <__kernel_rem_pio2+0x310>
 800b200:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b204:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b208:	462f      	mov	r7, r5
 800b20a:	2600      	movs	r6, #0
 800b20c:	e01b      	b.n	800b246 <__kernel_rem_pio2+0xbe>
 800b20e:	42ef      	cmn	r7, r5
 800b210:	d407      	bmi.n	800b222 <__kernel_rem_pio2+0x9a>
 800b212:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b216:	f7f5 f985 	bl	8000524 <__aeabi_i2d>
 800b21a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b21e:	3501      	adds	r5, #1
 800b220:	e7df      	b.n	800b1e2 <__kernel_rem_pio2+0x5a>
 800b222:	ec51 0b18 	vmov	r0, r1, d8
 800b226:	e7f8      	b.n	800b21a <__kernel_rem_pio2+0x92>
 800b228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b22c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b230:	f7f5 f9e2 	bl	80005f8 <__aeabi_dmul>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b23c:	f7f5 f826 	bl	800028c <__adddf3>
 800b240:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b244:	3601      	adds	r6, #1
 800b246:	9b05      	ldr	r3, [sp, #20]
 800b248:	429e      	cmp	r6, r3
 800b24a:	f1a7 0708 	sub.w	r7, r7, #8
 800b24e:	ddeb      	ble.n	800b228 <__kernel_rem_pio2+0xa0>
 800b250:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b254:	f108 0801 	add.w	r8, r8, #1
 800b258:	ecab 7b02 	vstmia	fp!, {d7}
 800b25c:	3508      	adds	r5, #8
 800b25e:	e7ca      	b.n	800b1f6 <__kernel_rem_pio2+0x6e>
 800b260:	9b00      	ldr	r3, [sp, #0]
 800b262:	aa0c      	add	r2, sp, #48	; 0x30
 800b264:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b268:	930b      	str	r3, [sp, #44]	; 0x2c
 800b26a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b26c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b270:	9c00      	ldr	r4, [sp, #0]
 800b272:	930a      	str	r3, [sp, #40]	; 0x28
 800b274:	00e3      	lsls	r3, r4, #3
 800b276:	9308      	str	r3, [sp, #32]
 800b278:	ab98      	add	r3, sp, #608	; 0x260
 800b27a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b27e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b282:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800b286:	ab70      	add	r3, sp, #448	; 0x1c0
 800b288:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b28c:	46c3      	mov	fp, r8
 800b28e:	46a1      	mov	r9, r4
 800b290:	f1b9 0f00 	cmp.w	r9, #0
 800b294:	f1a5 0508 	sub.w	r5, r5, #8
 800b298:	dc77      	bgt.n	800b38a <__kernel_rem_pio2+0x202>
 800b29a:	ec47 6b10 	vmov	d0, r6, r7
 800b29e:	4650      	mov	r0, sl
 800b2a0:	f000 fac2 	bl	800b828 <scalbn>
 800b2a4:	ec57 6b10 	vmov	r6, r7, d0
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b2ae:	ee10 0a10 	vmov	r0, s0
 800b2b2:	4639      	mov	r1, r7
 800b2b4:	f7f5 f9a0 	bl	80005f8 <__aeabi_dmul>
 800b2b8:	ec41 0b10 	vmov	d0, r0, r1
 800b2bc:	f000 fb34 	bl	800b928 <floor>
 800b2c0:	4b7a      	ldr	r3, [pc, #488]	; (800b4ac <__kernel_rem_pio2+0x324>)
 800b2c2:	ec51 0b10 	vmov	r0, r1, d0
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f7f5 f996 	bl	80005f8 <__aeabi_dmul>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	4639      	mov	r1, r7
 800b2d4:	f7f4 ffd8 	bl	8000288 <__aeabi_dsub>
 800b2d8:	460f      	mov	r7, r1
 800b2da:	4606      	mov	r6, r0
 800b2dc:	f7f5 fc26 	bl	8000b2c <__aeabi_d2iz>
 800b2e0:	9002      	str	r0, [sp, #8]
 800b2e2:	f7f5 f91f 	bl	8000524 <__aeabi_i2d>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	f7f4 ffcb 	bl	8000288 <__aeabi_dsub>
 800b2f2:	f1ba 0f00 	cmp.w	sl, #0
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	460f      	mov	r7, r1
 800b2fa:	dd6d      	ble.n	800b3d8 <__kernel_rem_pio2+0x250>
 800b2fc:	1e61      	subs	r1, r4, #1
 800b2fe:	ab0c      	add	r3, sp, #48	; 0x30
 800b300:	9d02      	ldr	r5, [sp, #8]
 800b302:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b306:	f1ca 0018 	rsb	r0, sl, #24
 800b30a:	fa43 f200 	asr.w	r2, r3, r0
 800b30e:	4415      	add	r5, r2
 800b310:	4082      	lsls	r2, r0
 800b312:	1a9b      	subs	r3, r3, r2
 800b314:	aa0c      	add	r2, sp, #48	; 0x30
 800b316:	9502      	str	r5, [sp, #8]
 800b318:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b31c:	f1ca 0217 	rsb	r2, sl, #23
 800b320:	fa43 fb02 	asr.w	fp, r3, r2
 800b324:	f1bb 0f00 	cmp.w	fp, #0
 800b328:	dd65      	ble.n	800b3f6 <__kernel_rem_pio2+0x26e>
 800b32a:	9b02      	ldr	r3, [sp, #8]
 800b32c:	2200      	movs	r2, #0
 800b32e:	3301      	adds	r3, #1
 800b330:	9302      	str	r3, [sp, #8]
 800b332:	4615      	mov	r5, r2
 800b334:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b338:	4294      	cmp	r4, r2
 800b33a:	f300 809f 	bgt.w	800b47c <__kernel_rem_pio2+0x2f4>
 800b33e:	f1ba 0f00 	cmp.w	sl, #0
 800b342:	dd07      	ble.n	800b354 <__kernel_rem_pio2+0x1cc>
 800b344:	f1ba 0f01 	cmp.w	sl, #1
 800b348:	f000 80c1 	beq.w	800b4ce <__kernel_rem_pio2+0x346>
 800b34c:	f1ba 0f02 	cmp.w	sl, #2
 800b350:	f000 80c7 	beq.w	800b4e2 <__kernel_rem_pio2+0x35a>
 800b354:	f1bb 0f02 	cmp.w	fp, #2
 800b358:	d14d      	bne.n	800b3f6 <__kernel_rem_pio2+0x26e>
 800b35a:	4632      	mov	r2, r6
 800b35c:	463b      	mov	r3, r7
 800b35e:	4954      	ldr	r1, [pc, #336]	; (800b4b0 <__kernel_rem_pio2+0x328>)
 800b360:	2000      	movs	r0, #0
 800b362:	f7f4 ff91 	bl	8000288 <__aeabi_dsub>
 800b366:	4606      	mov	r6, r0
 800b368:	460f      	mov	r7, r1
 800b36a:	2d00      	cmp	r5, #0
 800b36c:	d043      	beq.n	800b3f6 <__kernel_rem_pio2+0x26e>
 800b36e:	4650      	mov	r0, sl
 800b370:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800b4a0 <__kernel_rem_pio2+0x318>
 800b374:	f000 fa58 	bl	800b828 <scalbn>
 800b378:	4630      	mov	r0, r6
 800b37a:	4639      	mov	r1, r7
 800b37c:	ec53 2b10 	vmov	r2, r3, d0
 800b380:	f7f4 ff82 	bl	8000288 <__aeabi_dsub>
 800b384:	4606      	mov	r6, r0
 800b386:	460f      	mov	r7, r1
 800b388:	e035      	b.n	800b3f6 <__kernel_rem_pio2+0x26e>
 800b38a:	4b4a      	ldr	r3, [pc, #296]	; (800b4b4 <__kernel_rem_pio2+0x32c>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	4630      	mov	r0, r6
 800b390:	4639      	mov	r1, r7
 800b392:	f7f5 f931 	bl	80005f8 <__aeabi_dmul>
 800b396:	f7f5 fbc9 	bl	8000b2c <__aeabi_d2iz>
 800b39a:	f7f5 f8c3 	bl	8000524 <__aeabi_i2d>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	ec43 2b18 	vmov	d8, r2, r3
 800b3a6:	4b44      	ldr	r3, [pc, #272]	; (800b4b8 <__kernel_rem_pio2+0x330>)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f7f5 f925 	bl	80005f8 <__aeabi_dmul>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	f7f4 ff67 	bl	8000288 <__aeabi_dsub>
 800b3ba:	f7f5 fbb7 	bl	8000b2c <__aeabi_d2iz>
 800b3be:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3c2:	f84b 0b04 	str.w	r0, [fp], #4
 800b3c6:	ec51 0b18 	vmov	r0, r1, d8
 800b3ca:	f7f4 ff5f 	bl	800028c <__adddf3>
 800b3ce:	f109 39ff 	add.w	r9, r9, #4294967295
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	460f      	mov	r7, r1
 800b3d6:	e75b      	b.n	800b290 <__kernel_rem_pio2+0x108>
 800b3d8:	d106      	bne.n	800b3e8 <__kernel_rem_pio2+0x260>
 800b3da:	1e63      	subs	r3, r4, #1
 800b3dc:	aa0c      	add	r2, sp, #48	; 0x30
 800b3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3e2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800b3e6:	e79d      	b.n	800b324 <__kernel_rem_pio2+0x19c>
 800b3e8:	4b34      	ldr	r3, [pc, #208]	; (800b4bc <__kernel_rem_pio2+0x334>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f7f5 fb8a 	bl	8000b04 <__aeabi_dcmpge>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	d140      	bne.n	800b476 <__kernel_rem_pio2+0x2ee>
 800b3f4:	4683      	mov	fp, r0
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	f7f5 fb63 	bl	8000ac8 <__aeabi_dcmpeq>
 800b402:	2800      	cmp	r0, #0
 800b404:	f000 80c1 	beq.w	800b58a <__kernel_rem_pio2+0x402>
 800b408:	1e65      	subs	r5, r4, #1
 800b40a:	462b      	mov	r3, r5
 800b40c:	2200      	movs	r2, #0
 800b40e:	9900      	ldr	r1, [sp, #0]
 800b410:	428b      	cmp	r3, r1
 800b412:	da6d      	bge.n	800b4f0 <__kernel_rem_pio2+0x368>
 800b414:	2a00      	cmp	r2, #0
 800b416:	f000 808a 	beq.w	800b52e <__kernel_rem_pio2+0x3a6>
 800b41a:	ab0c      	add	r3, sp, #48	; 0x30
 800b41c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b420:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 80ae 	beq.w	800b586 <__kernel_rem_pio2+0x3fe>
 800b42a:	4650      	mov	r0, sl
 800b42c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800b4a0 <__kernel_rem_pio2+0x318>
 800b430:	f000 f9fa 	bl	800b828 <scalbn>
 800b434:	1c6b      	adds	r3, r5, #1
 800b436:	00da      	lsls	r2, r3, #3
 800b438:	9205      	str	r2, [sp, #20]
 800b43a:	ec57 6b10 	vmov	r6, r7, d0
 800b43e:	aa70      	add	r2, sp, #448	; 0x1c0
 800b440:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800b4b4 <__kernel_rem_pio2+0x32c>
 800b444:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800b448:	462c      	mov	r4, r5
 800b44a:	f04f 0800 	mov.w	r8, #0
 800b44e:	2c00      	cmp	r4, #0
 800b450:	f280 80d4 	bge.w	800b5fc <__kernel_rem_pio2+0x474>
 800b454:	462c      	mov	r4, r5
 800b456:	2c00      	cmp	r4, #0
 800b458:	f2c0 8102 	blt.w	800b660 <__kernel_rem_pio2+0x4d8>
 800b45c:	4b18      	ldr	r3, [pc, #96]	; (800b4c0 <__kernel_rem_pio2+0x338>)
 800b45e:	461e      	mov	r6, r3
 800b460:	ab70      	add	r3, sp, #448	; 0x1c0
 800b462:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800b466:	1b2b      	subs	r3, r5, r4
 800b468:	f04f 0900 	mov.w	r9, #0
 800b46c:	f04f 0a00 	mov.w	sl, #0
 800b470:	2700      	movs	r7, #0
 800b472:	9306      	str	r3, [sp, #24]
 800b474:	e0e6      	b.n	800b644 <__kernel_rem_pio2+0x4bc>
 800b476:	f04f 0b02 	mov.w	fp, #2
 800b47a:	e756      	b.n	800b32a <__kernel_rem_pio2+0x1a2>
 800b47c:	f8d8 3000 	ldr.w	r3, [r8]
 800b480:	bb05      	cbnz	r5, 800b4c4 <__kernel_rem_pio2+0x33c>
 800b482:	b123      	cbz	r3, 800b48e <__kernel_rem_pio2+0x306>
 800b484:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b488:	f8c8 3000 	str.w	r3, [r8]
 800b48c:	2301      	movs	r3, #1
 800b48e:	3201      	adds	r2, #1
 800b490:	f108 0804 	add.w	r8, r8, #4
 800b494:	461d      	mov	r5, r3
 800b496:	e74f      	b.n	800b338 <__kernel_rem_pio2+0x1b0>
	...
 800b4a4:	3ff00000 	.word	0x3ff00000
 800b4a8:	0800bcc0 	.word	0x0800bcc0
 800b4ac:	40200000 	.word	0x40200000
 800b4b0:	3ff00000 	.word	0x3ff00000
 800b4b4:	3e700000 	.word	0x3e700000
 800b4b8:	41700000 	.word	0x41700000
 800b4bc:	3fe00000 	.word	0x3fe00000
 800b4c0:	0800bc80 	.word	0x0800bc80
 800b4c4:	1acb      	subs	r3, r1, r3
 800b4c6:	f8c8 3000 	str.w	r3, [r8]
 800b4ca:	462b      	mov	r3, r5
 800b4cc:	e7df      	b.n	800b48e <__kernel_rem_pio2+0x306>
 800b4ce:	1e62      	subs	r2, r4, #1
 800b4d0:	ab0c      	add	r3, sp, #48	; 0x30
 800b4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b4da:	a90c      	add	r1, sp, #48	; 0x30
 800b4dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b4e0:	e738      	b.n	800b354 <__kernel_rem_pio2+0x1cc>
 800b4e2:	1e62      	subs	r2, r4, #1
 800b4e4:	ab0c      	add	r3, sp, #48	; 0x30
 800b4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b4ee:	e7f4      	b.n	800b4da <__kernel_rem_pio2+0x352>
 800b4f0:	a90c      	add	r1, sp, #48	; 0x30
 800b4f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	430a      	orrs	r2, r1
 800b4fa:	e788      	b.n	800b40e <__kernel_rem_pio2+0x286>
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b502:	2900      	cmp	r1, #0
 800b504:	d0fa      	beq.n	800b4fc <__kernel_rem_pio2+0x374>
 800b506:	9a08      	ldr	r2, [sp, #32]
 800b508:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800b50c:	446a      	add	r2, sp
 800b50e:	3a98      	subs	r2, #152	; 0x98
 800b510:	9208      	str	r2, [sp, #32]
 800b512:	9a06      	ldr	r2, [sp, #24]
 800b514:	a920      	add	r1, sp, #128	; 0x80
 800b516:	18a2      	adds	r2, r4, r2
 800b518:	18e3      	adds	r3, r4, r3
 800b51a:	f104 0801 	add.w	r8, r4, #1
 800b51e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800b522:	9302      	str	r3, [sp, #8]
 800b524:	9b02      	ldr	r3, [sp, #8]
 800b526:	4543      	cmp	r3, r8
 800b528:	da04      	bge.n	800b534 <__kernel_rem_pio2+0x3ac>
 800b52a:	461c      	mov	r4, r3
 800b52c:	e6a2      	b.n	800b274 <__kernel_rem_pio2+0xec>
 800b52e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b530:	2301      	movs	r3, #1
 800b532:	e7e4      	b.n	800b4fe <__kernel_rem_pio2+0x376>
 800b534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b536:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b53a:	f7f4 fff3 	bl	8000524 <__aeabi_i2d>
 800b53e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b544:	46ab      	mov	fp, r5
 800b546:	461c      	mov	r4, r3
 800b548:	f04f 0900 	mov.w	r9, #0
 800b54c:	2600      	movs	r6, #0
 800b54e:	2700      	movs	r7, #0
 800b550:	9b05      	ldr	r3, [sp, #20]
 800b552:	4599      	cmp	r9, r3
 800b554:	dd06      	ble.n	800b564 <__kernel_rem_pio2+0x3dc>
 800b556:	9b08      	ldr	r3, [sp, #32]
 800b558:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b55c:	f108 0801 	add.w	r8, r8, #1
 800b560:	9308      	str	r3, [sp, #32]
 800b562:	e7df      	b.n	800b524 <__kernel_rem_pio2+0x39c>
 800b564:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b568:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b56c:	f7f5 f844 	bl	80005f8 <__aeabi_dmul>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	4630      	mov	r0, r6
 800b576:	4639      	mov	r1, r7
 800b578:	f7f4 fe88 	bl	800028c <__adddf3>
 800b57c:	f109 0901 	add.w	r9, r9, #1
 800b580:	4606      	mov	r6, r0
 800b582:	460f      	mov	r7, r1
 800b584:	e7e4      	b.n	800b550 <__kernel_rem_pio2+0x3c8>
 800b586:	3d01      	subs	r5, #1
 800b588:	e747      	b.n	800b41a <__kernel_rem_pio2+0x292>
 800b58a:	ec47 6b10 	vmov	d0, r6, r7
 800b58e:	f1ca 0000 	rsb	r0, sl, #0
 800b592:	f000 f949 	bl	800b828 <scalbn>
 800b596:	ec57 6b10 	vmov	r6, r7, d0
 800b59a:	4ba0      	ldr	r3, [pc, #640]	; (800b81c <__kernel_rem_pio2+0x694>)
 800b59c:	ee10 0a10 	vmov	r0, s0
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	f7f5 faae 	bl	8000b04 <__aeabi_dcmpge>
 800b5a8:	b1f8      	cbz	r0, 800b5ea <__kernel_rem_pio2+0x462>
 800b5aa:	4b9d      	ldr	r3, [pc, #628]	; (800b820 <__kernel_rem_pio2+0x698>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	f7f5 f821 	bl	80005f8 <__aeabi_dmul>
 800b5b6:	f7f5 fab9 	bl	8000b2c <__aeabi_d2iz>
 800b5ba:	4680      	mov	r8, r0
 800b5bc:	f7f4 ffb2 	bl	8000524 <__aeabi_i2d>
 800b5c0:	4b96      	ldr	r3, [pc, #600]	; (800b81c <__kernel_rem_pio2+0x694>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f7f5 f818 	bl	80005f8 <__aeabi_dmul>
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f7f4 fe5a 	bl	8000288 <__aeabi_dsub>
 800b5d4:	f7f5 faaa 	bl	8000b2c <__aeabi_d2iz>
 800b5d8:	1c65      	adds	r5, r4, #1
 800b5da:	ab0c      	add	r3, sp, #48	; 0x30
 800b5dc:	f10a 0a18 	add.w	sl, sl, #24
 800b5e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b5e4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b5e8:	e71f      	b.n	800b42a <__kernel_rem_pio2+0x2a2>
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	4639      	mov	r1, r7
 800b5ee:	f7f5 fa9d 	bl	8000b2c <__aeabi_d2iz>
 800b5f2:	ab0c      	add	r3, sp, #48	; 0x30
 800b5f4:	4625      	mov	r5, r4
 800b5f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b5fa:	e716      	b.n	800b42a <__kernel_rem_pio2+0x2a2>
 800b5fc:	ab0c      	add	r3, sp, #48	; 0x30
 800b5fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b602:	f7f4 ff8f 	bl	8000524 <__aeabi_i2d>
 800b606:	4632      	mov	r2, r6
 800b608:	463b      	mov	r3, r7
 800b60a:	f7f4 fff5 	bl	80005f8 <__aeabi_dmul>
 800b60e:	4642      	mov	r2, r8
 800b610:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b614:	464b      	mov	r3, r9
 800b616:	4630      	mov	r0, r6
 800b618:	4639      	mov	r1, r7
 800b61a:	f7f4 ffed 	bl	80005f8 <__aeabi_dmul>
 800b61e:	3c01      	subs	r4, #1
 800b620:	4606      	mov	r6, r0
 800b622:	460f      	mov	r7, r1
 800b624:	e713      	b.n	800b44e <__kernel_rem_pio2+0x2c6>
 800b626:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800b62a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800b62e:	f7f4 ffe3 	bl	80005f8 <__aeabi_dmul>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4648      	mov	r0, r9
 800b638:	4651      	mov	r1, sl
 800b63a:	f7f4 fe27 	bl	800028c <__adddf3>
 800b63e:	3701      	adds	r7, #1
 800b640:	4681      	mov	r9, r0
 800b642:	468a      	mov	sl, r1
 800b644:	9b00      	ldr	r3, [sp, #0]
 800b646:	429f      	cmp	r7, r3
 800b648:	dc02      	bgt.n	800b650 <__kernel_rem_pio2+0x4c8>
 800b64a:	9b06      	ldr	r3, [sp, #24]
 800b64c:	429f      	cmp	r7, r3
 800b64e:	ddea      	ble.n	800b626 <__kernel_rem_pio2+0x49e>
 800b650:	9a06      	ldr	r2, [sp, #24]
 800b652:	ab48      	add	r3, sp, #288	; 0x120
 800b654:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800b658:	e9c6 9a00 	strd	r9, sl, [r6]
 800b65c:	3c01      	subs	r4, #1
 800b65e:	e6fa      	b.n	800b456 <__kernel_rem_pio2+0x2ce>
 800b660:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b662:	2b02      	cmp	r3, #2
 800b664:	dc0b      	bgt.n	800b67e <__kernel_rem_pio2+0x4f6>
 800b666:	2b00      	cmp	r3, #0
 800b668:	dc39      	bgt.n	800b6de <__kernel_rem_pio2+0x556>
 800b66a:	d05d      	beq.n	800b728 <__kernel_rem_pio2+0x5a0>
 800b66c:	9b02      	ldr	r3, [sp, #8]
 800b66e:	f003 0007 	and.w	r0, r3, #7
 800b672:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b676:	ecbd 8b02 	vpop	{d8}
 800b67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b680:	2b03      	cmp	r3, #3
 800b682:	d1f3      	bne.n	800b66c <__kernel_rem_pio2+0x4e4>
 800b684:	9b05      	ldr	r3, [sp, #20]
 800b686:	9500      	str	r5, [sp, #0]
 800b688:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b68c:	eb0d 0403 	add.w	r4, sp, r3
 800b690:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800b694:	46a2      	mov	sl, r4
 800b696:	9b00      	ldr	r3, [sp, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f1aa 0a08 	sub.w	sl, sl, #8
 800b69e:	dc69      	bgt.n	800b774 <__kernel_rem_pio2+0x5ec>
 800b6a0:	46aa      	mov	sl, r5
 800b6a2:	f1ba 0f01 	cmp.w	sl, #1
 800b6a6:	f1a4 0408 	sub.w	r4, r4, #8
 800b6aa:	f300 8083 	bgt.w	800b7b4 <__kernel_rem_pio2+0x62c>
 800b6ae:	9c05      	ldr	r4, [sp, #20]
 800b6b0:	ab48      	add	r3, sp, #288	; 0x120
 800b6b2:	441c      	add	r4, r3
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	2d01      	cmp	r5, #1
 800b6ba:	f300 809a 	bgt.w	800b7f2 <__kernel_rem_pio2+0x66a>
 800b6be:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800b6c2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b6c6:	f1bb 0f00 	cmp.w	fp, #0
 800b6ca:	f040 8098 	bne.w	800b7fe <__kernel_rem_pio2+0x676>
 800b6ce:	9b04      	ldr	r3, [sp, #16]
 800b6d0:	e9c3 7800 	strd	r7, r8, [r3]
 800b6d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b6d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b6dc:	e7c6      	b.n	800b66c <__kernel_rem_pio2+0x4e4>
 800b6de:	9e05      	ldr	r6, [sp, #20]
 800b6e0:	ab48      	add	r3, sp, #288	; 0x120
 800b6e2:	441e      	add	r6, r3
 800b6e4:	462c      	mov	r4, r5
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	2c00      	cmp	r4, #0
 800b6ec:	da33      	bge.n	800b756 <__kernel_rem_pio2+0x5ce>
 800b6ee:	f1bb 0f00 	cmp.w	fp, #0
 800b6f2:	d036      	beq.n	800b762 <__kernel_rem_pio2+0x5da>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6fa:	9c04      	ldr	r4, [sp, #16]
 800b6fc:	e9c4 2300 	strd	r2, r3, [r4]
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b708:	f7f4 fdbe 	bl	8000288 <__aeabi_dsub>
 800b70c:	ae4a      	add	r6, sp, #296	; 0x128
 800b70e:	2401      	movs	r4, #1
 800b710:	42a5      	cmp	r5, r4
 800b712:	da29      	bge.n	800b768 <__kernel_rem_pio2+0x5e0>
 800b714:	f1bb 0f00 	cmp.w	fp, #0
 800b718:	d002      	beq.n	800b720 <__kernel_rem_pio2+0x598>
 800b71a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b71e:	4619      	mov	r1, r3
 800b720:	9b04      	ldr	r3, [sp, #16]
 800b722:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b726:	e7a1      	b.n	800b66c <__kernel_rem_pio2+0x4e4>
 800b728:	9c05      	ldr	r4, [sp, #20]
 800b72a:	ab48      	add	r3, sp, #288	; 0x120
 800b72c:	441c      	add	r4, r3
 800b72e:	2000      	movs	r0, #0
 800b730:	2100      	movs	r1, #0
 800b732:	2d00      	cmp	r5, #0
 800b734:	da09      	bge.n	800b74a <__kernel_rem_pio2+0x5c2>
 800b736:	f1bb 0f00 	cmp.w	fp, #0
 800b73a:	d002      	beq.n	800b742 <__kernel_rem_pio2+0x5ba>
 800b73c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b740:	4619      	mov	r1, r3
 800b742:	9b04      	ldr	r3, [sp, #16]
 800b744:	e9c3 0100 	strd	r0, r1, [r3]
 800b748:	e790      	b.n	800b66c <__kernel_rem_pio2+0x4e4>
 800b74a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b74e:	f7f4 fd9d 	bl	800028c <__adddf3>
 800b752:	3d01      	subs	r5, #1
 800b754:	e7ed      	b.n	800b732 <__kernel_rem_pio2+0x5aa>
 800b756:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b75a:	f7f4 fd97 	bl	800028c <__adddf3>
 800b75e:	3c01      	subs	r4, #1
 800b760:	e7c3      	b.n	800b6ea <__kernel_rem_pio2+0x562>
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	e7c8      	b.n	800b6fa <__kernel_rem_pio2+0x572>
 800b768:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b76c:	f7f4 fd8e 	bl	800028c <__adddf3>
 800b770:	3401      	adds	r4, #1
 800b772:	e7cd      	b.n	800b710 <__kernel_rem_pio2+0x588>
 800b774:	e9da 8900 	ldrd	r8, r9, [sl]
 800b778:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b77c:	9b00      	ldr	r3, [sp, #0]
 800b77e:	3b01      	subs	r3, #1
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	4632      	mov	r2, r6
 800b784:	463b      	mov	r3, r7
 800b786:	4640      	mov	r0, r8
 800b788:	4649      	mov	r1, r9
 800b78a:	f7f4 fd7f 	bl	800028c <__adddf3>
 800b78e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	4640      	mov	r0, r8
 800b798:	4649      	mov	r1, r9
 800b79a:	f7f4 fd75 	bl	8000288 <__aeabi_dsub>
 800b79e:	4632      	mov	r2, r6
 800b7a0:	463b      	mov	r3, r7
 800b7a2:	f7f4 fd73 	bl	800028c <__adddf3>
 800b7a6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b7aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7ae:	ed8a 7b00 	vstr	d7, [sl]
 800b7b2:	e770      	b.n	800b696 <__kernel_rem_pio2+0x50e>
 800b7b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b7b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b7bc:	4640      	mov	r0, r8
 800b7be:	4632      	mov	r2, r6
 800b7c0:	463b      	mov	r3, r7
 800b7c2:	4649      	mov	r1, r9
 800b7c4:	f7f4 fd62 	bl	800028c <__adddf3>
 800b7c8:	e9cd 0100 	strd	r0, r1, [sp]
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	4649      	mov	r1, r9
 800b7d4:	f7f4 fd58 	bl	8000288 <__aeabi_dsub>
 800b7d8:	4632      	mov	r2, r6
 800b7da:	463b      	mov	r3, r7
 800b7dc:	f7f4 fd56 	bl	800028c <__adddf3>
 800b7e0:	ed9d 7b00 	vldr	d7, [sp]
 800b7e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b7e8:	ed84 7b00 	vstr	d7, [r4]
 800b7ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7f0:	e757      	b.n	800b6a2 <__kernel_rem_pio2+0x51a>
 800b7f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b7f6:	f7f4 fd49 	bl	800028c <__adddf3>
 800b7fa:	3d01      	subs	r5, #1
 800b7fc:	e75c      	b.n	800b6b8 <__kernel_rem_pio2+0x530>
 800b7fe:	9b04      	ldr	r3, [sp, #16]
 800b800:	9a04      	ldr	r2, [sp, #16]
 800b802:	601f      	str	r7, [r3, #0]
 800b804:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b808:	605c      	str	r4, [r3, #4]
 800b80a:	609d      	str	r5, [r3, #8]
 800b80c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b810:	60d3      	str	r3, [r2, #12]
 800b812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b816:	6110      	str	r0, [r2, #16]
 800b818:	6153      	str	r3, [r2, #20]
 800b81a:	e727      	b.n	800b66c <__kernel_rem_pio2+0x4e4>
 800b81c:	41700000 	.word	0x41700000
 800b820:	3e700000 	.word	0x3e700000
 800b824:	00000000 	.word	0x00000000

0800b828 <scalbn>:
 800b828:	b570      	push	{r4, r5, r6, lr}
 800b82a:	ec55 4b10 	vmov	r4, r5, d0
 800b82e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b832:	4606      	mov	r6, r0
 800b834:	462b      	mov	r3, r5
 800b836:	b999      	cbnz	r1, 800b860 <scalbn+0x38>
 800b838:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b83c:	4323      	orrs	r3, r4
 800b83e:	d03f      	beq.n	800b8c0 <scalbn+0x98>
 800b840:	4b35      	ldr	r3, [pc, #212]	; (800b918 <scalbn+0xf0>)
 800b842:	4629      	mov	r1, r5
 800b844:	ee10 0a10 	vmov	r0, s0
 800b848:	2200      	movs	r2, #0
 800b84a:	f7f4 fed5 	bl	80005f8 <__aeabi_dmul>
 800b84e:	4b33      	ldr	r3, [pc, #204]	; (800b91c <scalbn+0xf4>)
 800b850:	429e      	cmp	r6, r3
 800b852:	4604      	mov	r4, r0
 800b854:	460d      	mov	r5, r1
 800b856:	da10      	bge.n	800b87a <scalbn+0x52>
 800b858:	a327      	add	r3, pc, #156	; (adr r3, 800b8f8 <scalbn+0xd0>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	e01f      	b.n	800b8a0 <scalbn+0x78>
 800b860:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b864:	4291      	cmp	r1, r2
 800b866:	d10c      	bne.n	800b882 <scalbn+0x5a>
 800b868:	ee10 2a10 	vmov	r2, s0
 800b86c:	4620      	mov	r0, r4
 800b86e:	4629      	mov	r1, r5
 800b870:	f7f4 fd0c 	bl	800028c <__adddf3>
 800b874:	4604      	mov	r4, r0
 800b876:	460d      	mov	r5, r1
 800b878:	e022      	b.n	800b8c0 <scalbn+0x98>
 800b87a:	460b      	mov	r3, r1
 800b87c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b880:	3936      	subs	r1, #54	; 0x36
 800b882:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b886:	4296      	cmp	r6, r2
 800b888:	dd0d      	ble.n	800b8a6 <scalbn+0x7e>
 800b88a:	2d00      	cmp	r5, #0
 800b88c:	a11c      	add	r1, pc, #112	; (adr r1, 800b900 <scalbn+0xd8>)
 800b88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b892:	da02      	bge.n	800b89a <scalbn+0x72>
 800b894:	a11c      	add	r1, pc, #112	; (adr r1, 800b908 <scalbn+0xe0>)
 800b896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b89a:	a319      	add	r3, pc, #100	; (adr r3, 800b900 <scalbn+0xd8>)
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	f7f4 feaa 	bl	80005f8 <__aeabi_dmul>
 800b8a4:	e7e6      	b.n	800b874 <scalbn+0x4c>
 800b8a6:	1872      	adds	r2, r6, r1
 800b8a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b8ac:	428a      	cmp	r2, r1
 800b8ae:	dcec      	bgt.n	800b88a <scalbn+0x62>
 800b8b0:	2a00      	cmp	r2, #0
 800b8b2:	dd08      	ble.n	800b8c6 <scalbn+0x9e>
 800b8b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b8c0:	ec45 4b10 	vmov	d0, r4, r5
 800b8c4:	bd70      	pop	{r4, r5, r6, pc}
 800b8c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b8ca:	da08      	bge.n	800b8de <scalbn+0xb6>
 800b8cc:	2d00      	cmp	r5, #0
 800b8ce:	a10a      	add	r1, pc, #40	; (adr r1, 800b8f8 <scalbn+0xd0>)
 800b8d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8d4:	dac0      	bge.n	800b858 <scalbn+0x30>
 800b8d6:	a10e      	add	r1, pc, #56	; (adr r1, 800b910 <scalbn+0xe8>)
 800b8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8dc:	e7bc      	b.n	800b858 <scalbn+0x30>
 800b8de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8e2:	3236      	adds	r2, #54	; 0x36
 800b8e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	4b0c      	ldr	r3, [pc, #48]	; (800b920 <scalbn+0xf8>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	e7d5      	b.n	800b8a0 <scalbn+0x78>
 800b8f4:	f3af 8000 	nop.w
 800b8f8:	c2f8f359 	.word	0xc2f8f359
 800b8fc:	01a56e1f 	.word	0x01a56e1f
 800b900:	8800759c 	.word	0x8800759c
 800b904:	7e37e43c 	.word	0x7e37e43c
 800b908:	8800759c 	.word	0x8800759c
 800b90c:	fe37e43c 	.word	0xfe37e43c
 800b910:	c2f8f359 	.word	0xc2f8f359
 800b914:	81a56e1f 	.word	0x81a56e1f
 800b918:	43500000 	.word	0x43500000
 800b91c:	ffff3cb0 	.word	0xffff3cb0
 800b920:	3c900000 	.word	0x3c900000
 800b924:	00000000 	.word	0x00000000

0800b928 <floor>:
 800b928:	ec51 0b10 	vmov	r0, r1, d0
 800b92c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b934:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800b938:	2e13      	cmp	r6, #19
 800b93a:	ee10 5a10 	vmov	r5, s0
 800b93e:	ee10 8a10 	vmov	r8, s0
 800b942:	460c      	mov	r4, r1
 800b944:	dc31      	bgt.n	800b9aa <floor+0x82>
 800b946:	2e00      	cmp	r6, #0
 800b948:	da14      	bge.n	800b974 <floor+0x4c>
 800b94a:	a333      	add	r3, pc, #204	; (adr r3, 800ba18 <floor+0xf0>)
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	f7f4 fc9c 	bl	800028c <__adddf3>
 800b954:	2200      	movs	r2, #0
 800b956:	2300      	movs	r3, #0
 800b958:	f7f5 f8de 	bl	8000b18 <__aeabi_dcmpgt>
 800b95c:	b138      	cbz	r0, 800b96e <floor+0x46>
 800b95e:	2c00      	cmp	r4, #0
 800b960:	da53      	bge.n	800ba0a <floor+0xe2>
 800b962:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b966:	4325      	orrs	r5, r4
 800b968:	d052      	beq.n	800ba10 <floor+0xe8>
 800b96a:	4c2d      	ldr	r4, [pc, #180]	; (800ba20 <floor+0xf8>)
 800b96c:	2500      	movs	r5, #0
 800b96e:	4621      	mov	r1, r4
 800b970:	4628      	mov	r0, r5
 800b972:	e024      	b.n	800b9be <floor+0x96>
 800b974:	4f2b      	ldr	r7, [pc, #172]	; (800ba24 <floor+0xfc>)
 800b976:	4137      	asrs	r7, r6
 800b978:	ea01 0307 	and.w	r3, r1, r7
 800b97c:	4303      	orrs	r3, r0
 800b97e:	d01e      	beq.n	800b9be <floor+0x96>
 800b980:	a325      	add	r3, pc, #148	; (adr r3, 800ba18 <floor+0xf0>)
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	f7f4 fc81 	bl	800028c <__adddf3>
 800b98a:	2200      	movs	r2, #0
 800b98c:	2300      	movs	r3, #0
 800b98e:	f7f5 f8c3 	bl	8000b18 <__aeabi_dcmpgt>
 800b992:	2800      	cmp	r0, #0
 800b994:	d0eb      	beq.n	800b96e <floor+0x46>
 800b996:	2c00      	cmp	r4, #0
 800b998:	bfbe      	ittt	lt
 800b99a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b99e:	4133      	asrlt	r3, r6
 800b9a0:	18e4      	addlt	r4, r4, r3
 800b9a2:	ea24 0407 	bic.w	r4, r4, r7
 800b9a6:	2500      	movs	r5, #0
 800b9a8:	e7e1      	b.n	800b96e <floor+0x46>
 800b9aa:	2e33      	cmp	r6, #51	; 0x33
 800b9ac:	dd0b      	ble.n	800b9c6 <floor+0x9e>
 800b9ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b9b2:	d104      	bne.n	800b9be <floor+0x96>
 800b9b4:	ee10 2a10 	vmov	r2, s0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	f7f4 fc67 	bl	800028c <__adddf3>
 800b9be:	ec41 0b10 	vmov	d0, r0, r1
 800b9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800b9ca:	f04f 37ff 	mov.w	r7, #4294967295
 800b9ce:	40df      	lsrs	r7, r3
 800b9d0:	4238      	tst	r0, r7
 800b9d2:	d0f4      	beq.n	800b9be <floor+0x96>
 800b9d4:	a310      	add	r3, pc, #64	; (adr r3, 800ba18 <floor+0xf0>)
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	f7f4 fc57 	bl	800028c <__adddf3>
 800b9de:	2200      	movs	r2, #0
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	f7f5 f899 	bl	8000b18 <__aeabi_dcmpgt>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d0c1      	beq.n	800b96e <floor+0x46>
 800b9ea:	2c00      	cmp	r4, #0
 800b9ec:	da0a      	bge.n	800ba04 <floor+0xdc>
 800b9ee:	2e14      	cmp	r6, #20
 800b9f0:	d101      	bne.n	800b9f6 <floor+0xce>
 800b9f2:	3401      	adds	r4, #1
 800b9f4:	e006      	b.n	800ba04 <floor+0xdc>
 800b9f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	40b3      	lsls	r3, r6
 800b9fe:	441d      	add	r5, r3
 800ba00:	45a8      	cmp	r8, r5
 800ba02:	d8f6      	bhi.n	800b9f2 <floor+0xca>
 800ba04:	ea25 0507 	bic.w	r5, r5, r7
 800ba08:	e7b1      	b.n	800b96e <floor+0x46>
 800ba0a:	2500      	movs	r5, #0
 800ba0c:	462c      	mov	r4, r5
 800ba0e:	e7ae      	b.n	800b96e <floor+0x46>
 800ba10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ba14:	e7ab      	b.n	800b96e <floor+0x46>
 800ba16:	bf00      	nop
 800ba18:	8800759c 	.word	0x8800759c
 800ba1c:	7e37e43c 	.word	0x7e37e43c
 800ba20:	bff00000 	.word	0xbff00000
 800ba24:	000fffff 	.word	0x000fffff

0800ba28 <_init>:
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	bf00      	nop
 800ba2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2e:	bc08      	pop	{r3}
 800ba30:	469e      	mov	lr, r3
 800ba32:	4770      	bx	lr

0800ba34 <_fini>:
 800ba34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba36:	bf00      	nop
 800ba38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3a:	bc08      	pop	{r3}
 800ba3c:	469e      	mov	lr, r3
 800ba3e:	4770      	bx	lr
