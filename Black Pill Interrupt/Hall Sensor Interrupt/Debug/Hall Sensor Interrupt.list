
Hall Sensor Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006130  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080062c8  080062c8  000162c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b8  080064b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080064b8  080064b8  000164b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064c0  080064c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080064c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d0  20000010  080064d8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200012e0  080064d8  000212e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fe4  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000223c  00000000  00000000  00032067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  000342a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de9  00000000  00000000  00035420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017df3  00000000  00000000  00036209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000142f1  00000000  00000000  0004dffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d866  00000000  00000000  000622ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ffc  00000000  00000000  000ffb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00104b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080062b0 	.word	0x080062b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080062b0 	.word	0x080062b0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b970 	b.w	8000e0c <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9e08      	ldr	r6, [sp, #32]
 8000b4a:	460d      	mov	r5, r1
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	460f      	mov	r7, r1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d14a      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b54:	428a      	cmp	r2, r1
 8000b56:	4694      	mov	ip, r2
 8000b58:	d965      	bls.n	8000c26 <__udivmoddi4+0xe2>
 8000b5a:	fab2 f382 	clz	r3, r2
 8000b5e:	b143      	cbz	r3, 8000b72 <__udivmoddi4+0x2e>
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	f1c3 0220 	rsb	r2, r3, #32
 8000b68:	409f      	lsls	r7, r3
 8000b6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b6e:	4317      	orrs	r7, r2
 8000b70:	409c      	lsls	r4, r3
 8000b72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b76:	fa1f f58c 	uxth.w	r5, ip
 8000b7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b7e:	0c22      	lsrs	r2, r4, #16
 8000b80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b88:	fb01 f005 	mul.w	r0, r1, r5
 8000b8c:	4290      	cmp	r0, r2
 8000b8e:	d90a      	bls.n	8000ba6 <__udivmoddi4+0x62>
 8000b90:	eb1c 0202 	adds.w	r2, ip, r2
 8000b94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b98:	f080 811c 	bcs.w	8000dd4 <__udivmoddi4+0x290>
 8000b9c:	4290      	cmp	r0, r2
 8000b9e:	f240 8119 	bls.w	8000dd4 <__udivmoddi4+0x290>
 8000ba2:	3902      	subs	r1, #2
 8000ba4:	4462      	add	r2, ip
 8000ba6:	1a12      	subs	r2, r2, r0
 8000ba8:	b2a4      	uxth	r4, r4
 8000baa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bb2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb6:	fb00 f505 	mul.w	r5, r0, r5
 8000bba:	42a5      	cmp	r5, r4
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x90>
 8000bbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc6:	f080 8107 	bcs.w	8000dd8 <__udivmoddi4+0x294>
 8000bca:	42a5      	cmp	r5, r4
 8000bcc:	f240 8104 	bls.w	8000dd8 <__udivmoddi4+0x294>
 8000bd0:	4464      	add	r4, ip
 8000bd2:	3802      	subs	r0, #2
 8000bd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bd8:	1b64      	subs	r4, r4, r5
 8000bda:	2100      	movs	r1, #0
 8000bdc:	b11e      	cbz	r6, 8000be6 <__udivmoddi4+0xa2>
 8000bde:	40dc      	lsrs	r4, r3
 8000be0:	2300      	movs	r3, #0
 8000be2:	e9c6 4300 	strd	r4, r3, [r6]
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0xbc>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	f000 80ed 	beq.w	8000dce <__udivmoddi4+0x28a>
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c00:	fab3 f183 	clz	r1, r3
 8000c04:	2900      	cmp	r1, #0
 8000c06:	d149      	bne.n	8000c9c <__udivmoddi4+0x158>
 8000c08:	42ab      	cmp	r3, r5
 8000c0a:	d302      	bcc.n	8000c12 <__udivmoddi4+0xce>
 8000c0c:	4282      	cmp	r2, r0
 8000c0e:	f200 80f8 	bhi.w	8000e02 <__udivmoddi4+0x2be>
 8000c12:	1a84      	subs	r4, r0, r2
 8000c14:	eb65 0203 	sbc.w	r2, r5, r3
 8000c18:	2001      	movs	r0, #1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	2e00      	cmp	r6, #0
 8000c1e:	d0e2      	beq.n	8000be6 <__udivmoddi4+0xa2>
 8000c20:	e9c6 4700 	strd	r4, r7, [r6]
 8000c24:	e7df      	b.n	8000be6 <__udivmoddi4+0xa2>
 8000c26:	b902      	cbnz	r2, 8000c2a <__udivmoddi4+0xe6>
 8000c28:	deff      	udf	#255	; 0xff
 8000c2a:	fab2 f382 	clz	r3, r2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f040 8090 	bne.w	8000d54 <__udivmoddi4+0x210>
 8000c34:	1a8a      	subs	r2, r1, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2101      	movs	r1, #1
 8000c40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c44:	fb07 2015 	mls	r0, r7, r5, r2
 8000c48:	0c22      	lsrs	r2, r4, #16
 8000c4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c4e:	fb0e f005 	mul.w	r0, lr, r5
 8000c52:	4290      	cmp	r0, r2
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x124>
 8000c56:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x122>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2b8>
 8000c66:	4645      	mov	r5, r8
 8000c68:	1a12      	subs	r2, r2, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c70:	fb07 2210 	mls	r2, r7, r0, r2
 8000c74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x14e>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x14c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2c2>
 8000c90:	4610      	mov	r0, r2
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c9a:	e79f      	b.n	8000bdc <__udivmoddi4+0x98>
 8000c9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ca0:	408b      	lsls	r3, r1
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cae:	fa20 f307 	lsr.w	r3, r0, r7
 8000cb2:	40fd      	lsrs	r5, r7
 8000cb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb8:	4323      	orrs	r3, r4
 8000cba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	fb09 5518 	mls	r5, r9, r8, r5
 8000cc6:	0c1c      	lsrs	r4, r3, #16
 8000cc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ccc:	fb08 f50e 	mul.w	r5, r8, lr
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd6:	fa00 f001 	lsl.w	r0, r0, r1
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b0>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2b4>
 8000ce8:	42a5      	cmp	r5, r4
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2b4>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4464      	add	r4, ip
 8000cf4:	1b64      	subs	r4, r4, r5
 8000cf6:	b29d      	uxth	r5, r3
 8000cf8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cfc:	fb09 4413 	mls	r4, r9, r3, r4
 8000d00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1da>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2ac>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2ac>
 8000d1a:	3b02      	subs	r3, #2
 8000d1c:	4464      	add	r4, ip
 8000d1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d22:	fba3 9502 	umull	r9, r5, r3, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	42ac      	cmp	r4, r5
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46ae      	mov	lr, r5
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x29c>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x298>
 8000d34:	b156      	cbz	r6, 8000d4c <__udivmoddi4+0x208>
 8000d36:	ebb0 0208 	subs.w	r2, r0, r8
 8000d3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d42:	40ca      	lsrs	r2, r1
 8000d44:	40cc      	lsrs	r4, r1
 8000d46:	4317      	orrs	r7, r2
 8000d48:	e9c6 7400 	strd	r7, r4, [r6]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	f1c3 0120 	rsb	r1, r3, #32
 8000d58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d60:	fa25 f101 	lsr.w	r1, r5, r1
 8000d64:	409d      	lsls	r5, r3
 8000d66:	432a      	orrs	r2, r5
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d74:	fb07 1510 	mls	r5, r7, r0, r1
 8000d78:	0c11      	lsrs	r1, r2, #16
 8000d7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d82:	428d      	cmp	r5, r1
 8000d84:	fa04 f403 	lsl.w	r4, r4, r3
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x258>
 8000d8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b0>
 8000d94:	428d      	cmp	r5, r1
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b0>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	1b49      	subs	r1, r1, r5
 8000d9e:	b292      	uxth	r2, r2
 8000da0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000da4:	fb07 1115 	mls	r1, r7, r5, r1
 8000da8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dac:	fb05 f10e 	mul.w	r1, r5, lr
 8000db0:	4291      	cmp	r1, r2
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x282>
 8000db4:	eb1c 0202 	adds.w	r2, ip, r2
 8000db8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2a8>
 8000dbe:	4291      	cmp	r1, r2
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2a8>
 8000dc2:	3d02      	subs	r5, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a52      	subs	r2, r2, r1
 8000dc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0xfc>
 8000dce:	4631      	mov	r1, r6
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	e708      	b.n	8000be6 <__udivmoddi4+0xa2>
 8000dd4:	4639      	mov	r1, r7
 8000dd6:	e6e6      	b.n	8000ba6 <__udivmoddi4+0x62>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	e6fb      	b.n	8000bd4 <__udivmoddi4+0x90>
 8000ddc:	4548      	cmp	r0, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f0>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000de8:	3b01      	subs	r3, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f0>
 8000dec:	4645      	mov	r5, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x282>
 8000df0:	462b      	mov	r3, r5
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1da>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x258>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b0>
 8000dfc:	3d02      	subs	r5, #2
 8000dfe:	4462      	add	r2, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x124>
 8000e02:	4608      	mov	r0, r1
 8000e04:	e70a      	b.n	8000c1c <__udivmoddi4+0xd8>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x14e>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <MAX>:
static void MX_TIM4_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */

uint32_t MAX(uint32_t a, uint32_t b) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]

	if (a > b) {
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d901      	bls.n	8000e26 <MAX+0x16>
		return a;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	e000      	b.n	8000e28 <MAX+0x18>
	} else {
		return b;
 8000e26:	683b      	ldr	r3, [r7, #0]
	}

}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	0000      	movs	r0, r0
	...

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f001 f919 	bl	8002074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f911 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f000 fc87 	bl	8001758 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e4a:	f000 f977 	bl	800113c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e4e:	f000 fa2b 	bl	80012a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e52:	f000 facf 	bl	80013f4 <MX_TIM3_Init>
  MX_I2C2_Init();
 8000e56:	f000 f9c3 	bl	80011e0 <MX_I2C2_Init>
  MX_TIM5_Init();
 8000e5a:	f000 fbc7 	bl	80015ec <MX_TIM5_Init>
  MX_TIM9_Init();
 8000e5e:	f000 fc0f 	bl	8001680 <MX_TIM9_Init>
  MX_TIM4_Init();
 8000e62:	f000 fb6d 	bl	8001540 <MX_TIM4_Init>
  MX_SPI1_Init();
 8000e66:	f000 f9e9 	bl	800123c <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000e6a:	f000 fc4b 	bl	8001704 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // Activate necessary timers.
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_1);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4871      	ldr	r0, [pc, #452]	; (8001038 <main+0x200>)
 8000e72:	f002 fd7b 	bl	800396c <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e76:	2100      	movs	r1, #0
 8000e78:	4870      	ldr	r0, [pc, #448]	; (800103c <main+0x204>)
 8000e7a:	f002 fe77 	bl	8003b6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e7e:	2104      	movs	r1, #4
 8000e80:	486e      	ldr	r0, [pc, #440]	; (800103c <main+0x204>)
 8000e82:	f002 fe73 	bl	8003b6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e86:	2108      	movs	r1, #8
 8000e88:	486c      	ldr	r0, [pc, #432]	; (800103c <main+0x204>)
 8000e8a:	f002 fe6f 	bl	8003b6c <HAL_TIM_PWM_Start>

  // Set initial ARR and PSC values.
  TIM9->ARR = MAX(ceil((Fapb2clk / AANTAL_TIJDSTAPPEN) / 65537), 2) - 1;
 8000e8e:	2102      	movs	r1, #2
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff ffbd 	bl	8000e10 <MAX>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a69      	ldr	r2, [pc, #420]	; (8001040 <main+0x208>)
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
  PSC_Constante = Fapb2clk / (TIM9->ARR + 1);
 8000e9e:	4b68      	ldr	r3, [pc, #416]	; (8001040 <main+0x208>)
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4a67      	ldr	r2, [pc, #412]	; (8001044 <main+0x20c>)
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b66      	ldr	r3, [pc, #408]	; (8001048 <main+0x210>)
 8000eae:	601a      	str	r2, [r3, #0]
  TIM9->PSC = PSC_Constante / (NewRPM / RPM_Constante) - 1;
 8000eb0:	4b65      	ldr	r3, [pc, #404]	; (8001048 <main+0x210>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b65      	ldr	r3, [pc, #404]	; (800104c <main+0x214>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4965      	ldr	r1, [pc, #404]	; (8001050 <main+0x218>)
 8000eba:	fb81 0103 	smull	r0, r1, r1, r3
 8000ebe:	4419      	add	r1, r3
 8000ec0:	1149      	asrs	r1, r1, #5
 8000ec2:	17db      	asrs	r3, r3, #31
 8000ec4:	1acb      	subs	r3, r1, r3
 8000ec6:	025b      	lsls	r3, r3, #9
 8000ec8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ecc:	1e5a      	subs	r2, r3, #1
 8000ece:	4b5c      	ldr	r3, [pc, #368]	; (8001040 <main+0x208>)
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28


  // Fill sintab array
  for (int i = 0; i < AANTAL_TIJDSTAPPEN; i++) {
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	e02a      	b.n	8000f2e <main+0xf6>
	  sintab[i] = sin(i*2*M_PI/AANTAL_TIJDSTAPPEN);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff facd 	bl	800047c <__aeabi_i2d>
 8000ee2:	a353      	add	r3, pc, #332	; (adr r3, 8001030 <main+0x1f8>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fb32 	bl	8000550 <__aeabi_dmul>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000efc:	f7ff fc52 	bl	80007a4 <__aeabi_ddiv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	ec43 2b17 	vmov	d7, r2, r3
 8000f08:	eeb0 0a47 	vmov.f32	s0, s14
 8000f0c:	eef0 0a67 	vmov.f32	s1, s15
 8000f10:	f004 f98e 	bl	8005230 <sin>
 8000f14:	eeb0 7a40 	vmov.f32	s14, s0
 8000f18:	eef0 7a60 	vmov.f32	s15, s1
 8000f1c:	4a4d      	ldr	r2, [pc, #308]	; (8001054 <main+0x21c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4413      	add	r3, r2
 8000f24:	ed83 7b00 	vstr	d7, [r3]
  for (int i = 0; i < AANTAL_TIJDSTAPPEN; i++) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f34:	dbd0      	blt.n	8000ed8 <main+0xa0>
  }

  TIM3->CCR1 = TIM3->ARR / sintab[0];
 8000f36:	4b48      	ldr	r3, [pc, #288]	; (8001058 <main+0x220>)
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fa8e 	bl	800045c <__aeabi_ui2d>
 8000f40:	4b44      	ldr	r3, [pc, #272]	; (8001054 <main+0x21c>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fc2d 	bl	80007a4 <__aeabi_ddiv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4c42      	ldr	r4, [pc, #264]	; (8001058 <main+0x220>)
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fdbe 	bl	8000ad4 <__aeabi_d2uiz>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	6363      	str	r3, [r4, #52]	; 0x34



  GPIOC->ODR = GPIOB->IDR << 8;
 8000f5c:	4b3f      	ldr	r3, [pc, #252]	; (800105c <main+0x224>)
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	4a3f      	ldr	r2, [pc, #252]	; (8001060 <main+0x228>)
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	6153      	str	r3, [r2, #20]

  switch (GPIOB->IDR >> 5 & 0b111) {
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <main+0x224>)
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	3b01      	subs	r3, #1
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d850      	bhi.n	8001018 <main+0x1e0>
 8000f76:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <main+0x144>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08000fd7 	.word	0x08000fd7
 8000f80:	08000fab 	.word	0x08000fab
 8000f84:	08000fc1 	.word	0x08000fc1
 8000f88:	08001003 	.word	0x08001003
 8000f8c:	08000fed 	.word	0x08000fed
 8000f90:	08000f95 	.word	0x08000f95
	case 0b110:
		TIM3->CCR1 = 0;
 8000f94:	4b30      	ldr	r3, [pc, #192]	; (8001058 <main+0x220>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = PWMPulse;
 8000f9a:	4b32      	ldr	r3, [pc, #200]	; (8001064 <main+0x22c>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <main+0x220>)
 8000fa0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 200;
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <main+0x220>)
 8000fa4:	22c8      	movs	r2, #200	; 0xc8
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000fa8:	e040      	b.n	800102c <main+0x1f4>

	case 0b010:
		TIM3->CCR1 = 200;
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <main+0x220>)
 8000fac:	22c8      	movs	r2, #200	; 0xc8
 8000fae:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = PWMPulse;
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <main+0x22c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <main+0x220>)
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <main+0x220>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000fbe:	e035      	b.n	800102c <main+0x1f4>

	case 0b011:
		TIM3->CCR1 = 200;
 8000fc0:	4b25      	ldr	r3, [pc, #148]	; (8001058 <main+0x220>)
 8000fc2:	22c8      	movs	r2, #200	; 0xc8
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <main+0x220>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = PWMPulse;
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <main+0x22c>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <main+0x220>)
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000fd4:	e02a      	b.n	800102c <main+0x1f4>

	case 0b001:
		TIM3->CCR1 = 0;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <main+0x220>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 200;
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <main+0x220>)
 8000fde:	22c8      	movs	r2, #200	; 0xc8
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = PWMPulse;
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <main+0x22c>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <main+0x220>)
 8000fe8:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000fea:	e01f      	b.n	800102c <main+0x1f4>

	case 0b101:
		TIM3->CCR1 = PWMPulse;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <main+0x22c>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <main+0x220>)
 8000ff2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 200;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <main+0x220>)
 8000ff6:	22c8      	movs	r2, #200	; 0xc8
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <main+0x220>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001000:	e014      	b.n	800102c <main+0x1f4>

	case 0b100:
		TIM3->CCR1 = PWMPulse;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <main+0x22c>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <main+0x220>)
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <main+0x220>)
 800100c:	2200      	movs	r2, #0
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 200;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <main+0x220>)
 8001012:	22c8      	movs	r2, #200	; 0xc8
 8001014:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001016:	e009      	b.n	800102c <main+0x1f4>

	default:
		TIM3->CCR1 = 0;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <main+0x220>)
 800101a:	2200      	movs	r2, #0
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <main+0x220>)
 8001020:	2200      	movs	r2, #0
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <main+0x220>)
 8001026:	2200      	movs	r2, #0
 8001028:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800102a:	bf00      	nop

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800102c:	e7fe      	b.n	800102c <main+0x1f4>
 800102e:	bf00      	nop
 8001030:	54442d18 	.word	0x54442d18
 8001034:	400921fb 	.word	0x400921fb
 8001038:	20000240 	.word	0x20000240
 800103c:	20000168 	.word	0x20000168
 8001040:	40014000 	.word	0x40014000
 8001044:	017d7840 	.word	0x017d7840
 8001048:	200002cc 	.word	0x200002cc
 800104c:	200002d0 	.word	0x200002d0
 8001050:	88888889 	.word	0x88888889
 8001054:	200002d8 	.word	0x200002d8
 8001058:	40000400 	.word	0x40000400
 800105c:	40020400 	.word	0x40020400
 8001060:	40020800 	.word	0x40020800
 8001064:	20000000 	.word	0x20000000

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f004 f8ac 	bl	80051d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <SystemClock_Config+0xcc>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <SystemClock_Config+0xcc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <SystemClock_Config+0xd0>)
 80010b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <SystemClock_Config+0xd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80010d8:	230c      	movs	r3, #12
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010dc:	2360      	movs	r3, #96	; 0x60
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 febd 	bl	8002e6c <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f8:	f000 fbca 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2302      	movs	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800110e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2103      	movs	r1, #3
 800111a:	4618      	mov	r0, r3
 800111c:	f002 f91e 	bl	800335c <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001126:	f000 fbb3 	bl	8001890 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <MX_ADC1_Init+0x9c>)
 8001152:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <MX_ADC1_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_ADC1_Init+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001176:	2200      	movs	r2, #0
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_ADC1_Init+0x98>)
 800117c:	4a17      	ldr	r2, [pc, #92]	; (80011dc <MX_ADC1_Init+0xa0>)
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001188:	2201      	movs	r2, #1
 800118a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_ADC1_Init+0x98>)
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001196:	2201      	movs	r2, #1
 8001198:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <MX_ADC1_Init+0x98>)
 800119c:	f000 ffdc 	bl	8002158 <HAL_ADC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 fb73 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011aa:	2305      	movs	r3, #5
 80011ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_ADC1_Init+0x98>)
 80011bc:	f001 f810 	bl	80021e0 <HAL_ADC_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011c6:	f000 fb63 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000002c 	.word	0x2000002c
 80011d8:	40012000 	.word	0x40012000
 80011dc:	0f000001 	.word	0x0f000001

080011e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C2_Init+0x50>)
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <MX_I2C2_Init+0x54>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C2_Init+0x50>)
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_I2C2_Init+0x58>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C2_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_I2C2_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_I2C2_Init+0x50>)
 80011fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001202:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_I2C2_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_I2C2_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_I2C2_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_I2C2_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_I2C2_Init+0x50>)
 800121e:	f001 fce1 	bl	8002be4 <HAL_I2C_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001228:	f000 fb32 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000074 	.word	0x20000074
 8001234:	40005800 	.word	0x40005800
 8001238:	000186a0 	.word	0x000186a0

0800123c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_SPI1_Init+0x64>)
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <MX_SPI1_Init+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_SPI1_Init+0x64>)
 8001248:	f44f 7282 	mov.w	r2, #260	; 0x104
 800124c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_SPI1_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_SPI1_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_SPI1_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_SPI1_Init+0x64>)
 8001268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_SPI1_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_SPI1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_SPI1_Init+0x64>)
 8001288:	220a      	movs	r2, #10
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_SPI1_Init+0x64>)
 800128e:	f002 fa45 	bl	800371c <HAL_SPI_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001298:	f000 fafa 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200000c8 	.word	0x200000c8
 80012a4:	40013000 	.word	0x40013000

080012a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b092      	sub	sp, #72	; 0x48
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	615a      	str	r2, [r3, #20]
 80012ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2220      	movs	r2, #32
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 ff7e 	bl	80051d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012d8:	4b44      	ldr	r3, [pc, #272]	; (80013ec <MX_TIM1_Init+0x144>)
 80012da:	4a45      	ldr	r2, [pc, #276]	; (80013f0 <MX_TIM1_Init+0x148>)
 80012dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <MX_TIM1_Init+0x144>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b41      	ldr	r3, [pc, #260]	; (80013ec <MX_TIM1_Init+0x144>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012ea:	4b40      	ldr	r3, [pc, #256]	; (80013ec <MX_TIM1_Init+0x144>)
 80012ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <MX_TIM1_Init+0x144>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f8:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <MX_TIM1_Init+0x144>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <MX_TIM1_Init+0x144>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001304:	4839      	ldr	r0, [pc, #228]	; (80013ec <MX_TIM1_Init+0x144>)
 8001306:	f002 fbe1 	bl	8003acc <HAL_TIM_PWM_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001310:	f000 fabe 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001314:	4835      	ldr	r0, [pc, #212]	; (80013ec <MX_TIM1_Init+0x144>)
 8001316:	f002 fad9 	bl	80038cc <HAL_TIM_OC_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001320:	f000 fab6 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001324:	2320      	movs	r3, #32
 8001326:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800132c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001330:	4619      	mov	r1, r3
 8001332:	482e      	ldr	r0, [pc, #184]	; (80013ec <MX_TIM1_Init+0x144>)
 8001334:	f003 fbb8 	bl	8004aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800133e:	f000 faa7 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001342:	2360      	movs	r3, #96	; 0x60
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	2200      	movs	r2, #0
 8001364:	4619      	mov	r1, r3
 8001366:	4821      	ldr	r0, [pc, #132]	; (80013ec <MX_TIM1_Init+0x144>)
 8001368:	f002 fe14 	bl	8003f94 <HAL_TIM_PWM_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001372:	f000 fa8d 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	2204      	movs	r2, #4
 800137c:	4619      	mov	r1, r3
 800137e:	481b      	ldr	r0, [pc, #108]	; (80013ec <MX_TIM1_Init+0x144>)
 8001380:	f002 fe08 	bl	8003f94 <HAL_TIM_PWM_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 800138a:	f000 fa81 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	2208      	movs	r2, #8
 8001398:	4619      	mov	r1, r3
 800139a:	4814      	ldr	r0, [pc, #80]	; (80013ec <MX_TIM1_Init+0x144>)
 800139c:	f002 fd9e 	bl	8003edc <HAL_TIM_OC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80013a6:	f000 fa73 	bl	8001890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM1_Init+0x144>)
 80013ce:	f003 fbd9 	bl	8004b84 <HAL_TIMEx_ConfigBreakDeadTime>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80013d8:	f000 fa5a 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM1_Init+0x144>)
 80013de:	f000 fc63 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 80013e2:	bf00      	nop
 80013e4:	3748      	adds	r7, #72	; 0x48
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000120 	.word	0x20000120
 80013f0:	40010000 	.word	0x40010000

080013f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <MX_TIM3_Init+0x144>)
 8001428:	4a44      	ldr	r2, [pc, #272]	; (800153c <MX_TIM3_Init+0x148>)
 800142a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800142c:	4b42      	ldr	r3, [pc, #264]	; (8001538 <MX_TIM3_Init+0x144>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <MX_TIM3_Init+0x144>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001438:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <MX_TIM3_Init+0x144>)
 800143a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800143e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <MX_TIM3_Init+0x144>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001446:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <MX_TIM3_Init+0x144>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800144c:	483a      	ldr	r0, [pc, #232]	; (8001538 <MX_TIM3_Init+0x144>)
 800144e:	f002 f9ee 	bl	800382e <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001458:	f000 fa1a 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800145c:	4836      	ldr	r0, [pc, #216]	; (8001538 <MX_TIM3_Init+0x144>)
 800145e:	f002 fb35 	bl	8003acc <HAL_TIM_PWM_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001468:	f000 fa12 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800146c:	4832      	ldr	r0, [pc, #200]	; (8001538 <MX_TIM3_Init+0x144>)
 800146e:	f002 fa2d 	bl	80038cc <HAL_TIM_OC_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001478:	f000 fa0a 	bl	8001890 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800147c:	2306      	movs	r3, #6
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	482b      	ldr	r0, [pc, #172]	; (8001538 <MX_TIM3_Init+0x144>)
 800148c:	f002 fe44 	bl	8004118 <HAL_TIM_SlaveConfigSynchro>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8001496:	f000 f9fb 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800149a:	2320      	movs	r3, #32
 800149c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4823      	ldr	r0, [pc, #140]	; (8001538 <MX_TIM3_Init+0x144>)
 80014aa:	f003 fafd 	bl	8004aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 80014b4:	f000 f9ec 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b8:	2360      	movs	r3, #96	; 0x60
 80014ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	4619      	mov	r1, r3
 80014ce:	481a      	ldr	r0, [pc, #104]	; (8001538 <MX_TIM3_Init+0x144>)
 80014d0:	f002 fd60 	bl	8003f94 <HAL_TIM_PWM_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80014da:	f000 f9d9 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	2204      	movs	r2, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	4814      	ldr	r0, [pc, #80]	; (8001538 <MX_TIM3_Init+0x144>)
 80014e6:	f002 fd55 	bl	8003f94 <HAL_TIM_PWM_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 80014f0:	f000 f9ce 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	2208      	movs	r2, #8
 80014f8:	4619      	mov	r1, r3
 80014fa:	480f      	ldr	r0, [pc, #60]	; (8001538 <MX_TIM3_Init+0x144>)
 80014fc:	f002 fd4a 	bl	8003f94 <HAL_TIM_PWM_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001506:	f000 f9c3 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001512:	463b      	mov	r3, r7
 8001514:	220c      	movs	r2, #12
 8001516:	4619      	mov	r1, r3
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_TIM3_Init+0x144>)
 800151a:	f002 fcdf 	bl	8003edc <HAL_TIM_OC_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x134>
  {
    Error_Handler();
 8001524:	f000 f9b4 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <MX_TIM3_Init+0x144>)
 800152a:	f000 fbbd 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 800152e:	bf00      	nop
 8001530:	3738      	adds	r7, #56	; 0x38
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000168 	.word	0x20000168
 800153c:	40000400 	.word	0x40000400

08001540 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <MX_TIM4_Init+0xa4>)
 8001564:	4a20      	ldr	r2, [pc, #128]	; (80015e8 <MX_TIM4_Init+0xa8>)
 8001566:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <MX_TIM4_Init+0xa4>)
 800156a:	2200      	movs	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_TIM4_Init+0xa4>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_TIM4_Init+0xa4>)
 8001576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800157a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_TIM4_Init+0xa4>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_TIM4_Init+0xa4>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001588:	4816      	ldr	r0, [pc, #88]	; (80015e4 <MX_TIM4_Init+0xa4>)
 800158a:	f002 f99f 	bl	80038cc <HAL_TIM_OC_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001594:	f000 f97c 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	4619      	mov	r1, r3
 80015a6:	480f      	ldr	r0, [pc, #60]	; (80015e4 <MX_TIM4_Init+0xa4>)
 80015a8:	f003 fa7e 	bl	8004aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80015b2:	f000 f96d 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_TIM4_Init+0xa4>)
 80015ce:	f002 fc85 	bl	8003edc <HAL_TIM_OC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80015d8:	f000 f95a 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	; 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200001b0 	.word	0x200001b0
 80015e8:	40000800 	.word	0x40000800

080015ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_TIM5_Init+0x8c>)
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <MX_TIM5_Init+0x90>)
 800160c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_TIM5_Init+0x8c>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_TIM5_Init+0x8c>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_TIM5_Init+0x8c>)
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_TIM5_Init+0x8c>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_TIM5_Init+0x8c>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim5, &sConfig) != HAL_OK)
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	4619      	mov	r1, r3
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <MX_TIM5_Init+0x8c>)
 8001646:	f003 f985 	bl	8004954 <HAL_TIMEx_HallSensor_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001650:	f000 f91e 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001654:	2350      	movs	r3, #80	; 0x50
 8001656:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_TIM5_Init+0x8c>)
 8001662:	f003 fa21 	bl	8004aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800166c:	f000 f910 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200001f8 	.word	0x200001f8
 800167c:	40000c00 	.word	0x40000c00

08001680 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <MX_TIM9_Init+0x7c>)
 800169a:	4a19      	ldr	r2, [pc, #100]	; (8001700 <MX_TIM9_Init+0x80>)
 800169c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_TIM9_Init+0x7c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_TIM9_Init+0x7c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_TIM9_Init+0x7c>)
 80016ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_TIM9_Init+0x7c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <MX_TIM9_Init+0x7c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 80016be:	480f      	ldr	r0, [pc, #60]	; (80016fc <MX_TIM9_Init+0x7c>)
 80016c0:	f002 f904 	bl	80038cc <HAL_TIM_OC_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80016ca:	f000 f8e1 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2200      	movs	r2, #0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_TIM9_Init+0x7c>)
 80016e6:	f002 fbf9 	bl	8003edc <HAL_TIM_OC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80016f0:	f000 f8ce 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000240 	.word	0x20000240
 8001700:	40014000 	.word	0x40014000

08001704 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_USART6_UART_Init+0x4c>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <MX_USART6_UART_Init+0x50>)
 800170c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <MX_USART6_UART_Init+0x4c>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_USART6_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_USART6_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_USART6_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_USART6_UART_Init+0x4c>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_USART6_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_USART6_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_USART6_UART_Init+0x4c>)
 800173c:	f003 fa88 	bl	8004c50 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001746:	f000 f8a3 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000288 	.word	0x20000288
 8001754:	40011400 	.word	0x40011400

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b43      	ldr	r3, [pc, #268]	; (8001880 <MX_GPIO_Init+0x128>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a42      	ldr	r2, [pc, #264]	; (8001880 <MX_GPIO_Init+0x128>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b40      	ldr	r3, [pc, #256]	; (8001880 <MX_GPIO_Init+0x128>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <MX_GPIO_Init+0x128>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a3b      	ldr	r2, [pc, #236]	; (8001880 <MX_GPIO_Init+0x128>)
 8001794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b39      	ldr	r3, [pc, #228]	; (8001880 <MX_GPIO_Init+0x128>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b35      	ldr	r3, [pc, #212]	; (8001880 <MX_GPIO_Init+0x128>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a34      	ldr	r2, [pc, #208]	; (8001880 <MX_GPIO_Init+0x128>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <MX_GPIO_Init+0x128>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <MX_GPIO_Init+0x128>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a2d      	ldr	r2, [pc, #180]	; (8001880 <MX_GPIO_Init+0x128>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <MX_GPIO_Init+0x128>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80017e4:	4827      	ldr	r0, [pc, #156]	; (8001884 <MX_GPIO_Init+0x12c>)
 80017e6:	f001 f9bf 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80017f0:	4825      	ldr	r0, [pc, #148]	; (8001888 <MX_GPIO_Init+0x130>)
 80017f2:	f001 f9b9 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	481d      	ldr	r0, [pc, #116]	; (8001884 <MX_GPIO_Init+0x12c>)
 8001810:	f001 f826 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8;
 8001814:	f249 1304 	movw	r3, #37124	; 0x9104
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800181a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4818      	ldr	r0, [pc, #96]	; (800188c <MX_GPIO_Init+0x134>)
 800182c:	f001 f818 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001830:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	480f      	ldr	r0, [pc, #60]	; (8001888 <MX_GPIO_Init+0x130>)
 800184a:	f001 f809 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800184e:	23c0      	movs	r3, #192	; 0xc0
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001852:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <MX_GPIO_Init+0x134>)
 8001864:	f000 fffc 	bl	8002860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	2017      	movs	r0, #23
 800186e:	f000 ffc0 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001872:	2017      	movs	r0, #23
 8001874:	f000 ffd9 	bl	800282a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	40020800 	.word	0x40020800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	e7fe      	b.n	8001898 <Error_Handler+0x8>
	...

0800189c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <HAL_MspInit+0x4c>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_MspInit+0x4c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <HAL_MspInit+0x4c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_MspInit+0x4c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_ADC_MspInit+0x7c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d127      	bne.n	800195e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_ADC_MspInit+0x80>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a15      	ldr	r2, [pc, #84]	; (800196c <HAL_ADC_MspInit+0x80>)
 8001918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_ADC_MspInit+0x80>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_ADC_MspInit+0x80>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_ADC_MspInit+0x80>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_ADC_MspInit+0x80>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001946:	2338      	movs	r3, #56	; 0x38
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194a:	2303      	movs	r3, #3
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_ADC_MspInit+0x84>)
 800195a:	f000 ff81 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40012000 	.word	0x40012000
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000

08001974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <HAL_I2C_MspInit+0xa8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d13d      	bne.n	8001a12 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_I2C_MspInit+0xac>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a20      	ldr	r2, [pc, #128]	; (8001a20 <HAL_I2C_MspInit+0xac>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_I2C_MspInit+0xac>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b8:	2312      	movs	r3, #18
 80019ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019c4:	2304      	movs	r3, #4
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4815      	ldr	r0, [pc, #84]	; (8001a24 <HAL_I2C_MspInit+0xb0>)
 80019d0:	f000 ff46 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019da:	2312      	movs	r3, #18
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80019e6:	2309      	movs	r3, #9
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <HAL_I2C_MspInit+0xb0>)
 80019f2:	f000 ff35 	bl	8002860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_I2C_MspInit+0xac>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_I2C_MspInit+0xac>)
 8001a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_I2C_MspInit+0xac>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40005800 	.word	0x40005800
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020400 	.word	0x40020400

08001a28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <HAL_SPI_MspInit+0xc0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d149      	bne.n	8001ade <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_SPI_MspInit+0xc4>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a26      	ldr	r2, [pc, #152]	; (8001aec <HAL_SPI_MspInit+0xc4>)
 8001a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_SPI_MspInit+0xc4>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_SPI_MspInit+0xc4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <HAL_SPI_MspInit+0xc4>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_SPI_MspInit+0xc4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_SPI_MspInit+0xc4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <HAL_SPI_MspInit+0xc4>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_SPI_MspInit+0xc4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aae:	2305      	movs	r3, #5
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <HAL_SPI_MspInit+0xc8>)
 8001aba:	f000 fed1 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001abe:	2318      	movs	r3, #24
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ace:	2305      	movs	r3, #5
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4806      	ldr	r0, [pc, #24]	; (8001af4 <HAL_SPI_MspInit+0xcc>)
 8001ada:	f000 fec1 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40013000 	.word	0x40013000
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020400 	.word	0x40020400

08001af8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <HAL_TIM_PWM_MspInit+0x58>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d11d      	bne.n	8001b46 <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2018      	movs	r0, #24
 8001b2c:	f000 fe61 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b30:	2018      	movs	r0, #24
 8001b32:	f000 fe7a 	bl	800282a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	201a      	movs	r0, #26
 8001b3c:	f000 fe59 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b40:	201a      	movs	r0, #26
 8001b42:	f000 fe72 	bl	800282a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_TIM_Base_MspInit+0x3c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10d      	bne.n	8001b86 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_TIM_Base_MspInit+0x40>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_TIM_Base_MspInit+0x40>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_TIM_Base_MspInit+0x40>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40000400 	.word	0x40000400
 8001b98:	40023800 	.word	0x40023800

08001b9c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <HAL_TIM_OC_MspInit+0x70>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d10e      	bne.n	8001bcc <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_TIM_OC_MspInit+0x74>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <HAL_TIM_OC_MspInit+0x74>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_TIM_OC_MspInit+0x74>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001bca:	e01a      	b.n	8001c02 <HAL_TIM_OC_MspInit+0x66>
  else if(htim_oc->Instance==TIM9)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <HAL_TIM_OC_MspInit+0x78>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d115      	bne.n	8001c02 <HAL_TIM_OC_MspInit+0x66>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_TIM_OC_MspInit+0x74>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <HAL_TIM_OC_MspInit+0x74>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_TIM_OC_MspInit+0x74>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2018      	movs	r0, #24
 8001bf8:	f000 fdfb 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001bfc:	2018      	movs	r0, #24
 8001bfe:	f000 fe14 	bl	800282a <HAL_NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40000800 	.word	0x40000800
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40014000 	.word	0x40014000

08001c18 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM5)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12b      	bne.n	8001c92 <HAL_TIMEx_HallSensor_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_TIMEx_HallSensor_MspInit+0x88>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_TIMEx_HallSensor_MspInit+0x88>)
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_TIMEx_HallSensor_MspInit+0x88>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_TIMEx_HallSensor_MspInit+0x88>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_TIMEx_HallSensor_MspInit+0x88>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_TIMEx_HallSensor_MspInit+0x88>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c72:	2307      	movs	r3, #7
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c82:	2302      	movs	r3, #2
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 8001c8e:	f000 fde7 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40000c00 	.word	0x40000c00
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a43      	ldr	r2, [pc, #268]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d13e      	bne.n	8001d48 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a41      	ldr	r2, [pc, #260]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14;
 8001d02:	f246 0302 	movw	r3, #24578	; 0x6002
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	482f      	ldr	r0, [pc, #188]	; (8001ddc <HAL_TIM_MspPostInit+0x134>)
 8001d20:	f000 fd9e 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d24:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4827      	ldr	r0, [pc, #156]	; (8001de0 <HAL_TIM_MspPostInit+0x138>)
 8001d42:	f000 fd8d 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d46:	e040      	b.n	8001dca <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <HAL_TIM_MspPostInit+0x13c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d13b      	bne.n	8001dca <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d8a:	2340      	movs	r3, #64	; 0x40
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4619      	mov	r1, r3
 8001da4:	480e      	ldr	r0, [pc, #56]	; (8001de0 <HAL_TIM_MspPostInit+0x138>)
 8001da6:	f000 fd5b 	bl	8002860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001daa:	2321      	movs	r3, #33	; 0x21
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <HAL_TIM_MspPostInit+0x134>)
 8001dc6:	f000 fd4b 	bl	8002860 <HAL_GPIO_Init>
}
 8001dca:	bf00      	nop
 8001dcc:	3730      	adds	r7, #48	; 0x30
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	40020000 	.word	0x40020000
 8001de4:	40000400 	.word	0x40000400

08001de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_UART_MspInit+0x84>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d12c      	bne.n	8001e64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e14:	f043 0320 	orr.w	r3, r3, #32
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e54:	2308      	movs	r3, #8
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_UART_MspInit+0x8c>)
 8001e60:	f000 fcfe 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40011400 	.word	0x40011400
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020000 	.word	0x40020000

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <NMI_Handler+0x4>

08001e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec4:	f000 f928 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWMPulse * CheckActive(TIM2->CCR2);
	TIM2->CCR2 = PWMPulse * CheckActive(TIM2->CCR3);
	TIM2->CCR3 = temp; */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ed0:	2040      	movs	r0, #64	; 0x40
 8001ed2:	f000 fe63 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001ed6:	2080      	movs	r0, #128	; 0x80
 8001ed8:	f000 fe60 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001edc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ee0:	f000 fe5c 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  uint32_t ARR = TIM3->ARR;
 8001eee:	4b39      	ldr	r3, [pc, #228]	; (8001fd4 <TIM1_BRK_TIM9_IRQHandler+0xec>)
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	607b      	str	r3, [r7, #4]
  TIM3->CCR1 = ARR / sintab[ (j + OffsetU) % AANTAL_TIJDSTAPPEN];
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7fe fab1 	bl	800045c <__aeabi_ui2d>
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <TIM1_BRK_TIM9_IRQHandler+0xf0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	33aa      	adds	r3, #170	; 0xaa
 8001f00:	425a      	negs	r2, r3
 8001f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f0a:	bf58      	it	pl
 8001f0c:	4253      	negpl	r3, r2
 8001f0e:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <TIM1_BRK_TIM9_IRQHandler+0xf4>)
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	f7fe fc44 	bl	80007a4 <__aeabi_ddiv>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4c2c      	ldr	r4, [pc, #176]	; (8001fd4 <TIM1_BRK_TIM9_IRQHandler+0xec>)
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7fe fdd5 	bl	8000ad4 <__aeabi_d2uiz>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6363      	str	r3, [r4, #52]	; 0x34
  TIM3->CCR2 = ARR / sintab[ (j + OffsetV) % AANTAL_TIJDSTAPPEN];
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fa94 	bl	800045c <__aeabi_ui2d>
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <TIM1_BRK_TIM9_IRQHandler+0xf0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8001f3c:	425a      	negs	r2, r3
 8001f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f46:	bf58      	it	pl
 8001f48:	4253      	negpl	r3, r2
 8001f4a:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <TIM1_BRK_TIM9_IRQHandler+0xf4>)
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	f7fe fc26 	bl	80007a4 <__aeabi_ddiv>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4c1d      	ldr	r4, [pc, #116]	; (8001fd4 <TIM1_BRK_TIM9_IRQHandler+0xec>)
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7fe fdb7 	bl	8000ad4 <__aeabi_d2uiz>
 8001f66:	4603      	mov	r3, r0
 8001f68:	63a3      	str	r3, [r4, #56]	; 0x38
  TIM3->CCR3 = ARR / sintab[ (j + OffsetW) % AANTAL_TIJDSTAPPEN];
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fa76 	bl	800045c <__aeabi_ui2d>
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <TIM1_BRK_TIM9_IRQHandler+0xf0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001f78:	425a      	negs	r2, r3
 8001f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f82:	bf58      	it	pl
 8001f84:	4253      	negpl	r3, r2
 8001f86:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <TIM1_BRK_TIM9_IRQHandler+0xf4>)
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fc08 	bl	80007a4 <__aeabi_ddiv>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4c0e      	ldr	r4, [pc, #56]	; (8001fd4 <TIM1_BRK_TIM9_IRQHandler+0xec>)
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7fe fd99 	bl	8000ad4 <__aeabi_d2uiz>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	63e3      	str	r3, [r4, #60]	; 0x3c

  j = (j + 1) % AANTAL_TIJDSTAPPEN;
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <TIM1_BRK_TIM9_IRQHandler+0xf0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	425a      	negs	r2, r3
 8001fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fb6:	bf58      	it	pl
 8001fb8:	4253      	negpl	r3, r2
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <TIM1_BRK_TIM9_IRQHandler+0xf0>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fbe:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <TIM1_BRK_TIM9_IRQHandler+0xf8>)
 8001fc0:	f001 fe84 	bl	8003ccc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001fc4:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <TIM1_BRK_TIM9_IRQHandler+0xfc>)
 8001fc6:	f001 fe81 	bl	8003ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	200012d8 	.word	0x200012d8
 8001fdc:	200002d8 	.word	0x200002d8
 8001fe0:	20000120 	.word	0x20000120
 8001fe4:	20000240 	.word	0x20000240

08001fe8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001fee:	f001 fe6d 	bl	8003ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000120 	.word	0x20000120

08001ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002058 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002026:	490e      	ldr	r1, [pc, #56]	; (8002060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002028:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800202c:	e002      	b.n	8002034 <LoopCopyDataInit>

0800202e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002032:	3304      	adds	r3, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002038:	d3f9      	bcc.n	800202e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800203c:	4c0b      	ldr	r4, [pc, #44]	; (800206c <LoopFillZerobss+0x26>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002040:	e001      	b.n	8002046 <LoopFillZerobss>

08002042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002044:	3204      	adds	r2, #4

08002046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002048:	d3fb      	bcc.n	8002042 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800204a:	f7ff ffd7 	bl	8001ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204e:	f003 f8c9 	bl	80051e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002052:	f7fe fef1 	bl	8000e38 <main>
  bx  lr    
 8002056:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002060:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002064:	080064c8 	.word	0x080064c8
  ldr r2, =_sbss
 8002068:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800206c:	200012e0 	.word	0x200012e0

08002070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC_IRQHandler>
	...

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_Init+0x40>)
 800207e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_Init+0x40>)
 800208a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_Init+0x40>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f000 fb9d 	bl	80027dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a2:	200f      	movs	r0, #15
 80020a4:	f000 f808 	bl	80020b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a8:	f7ff fbf8 	bl	800189c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00

080020b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x54>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x58>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fbb5 	bl	8002846 <HAL_SYSTICK_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00e      	b.n	8002104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d80a      	bhi.n	8002102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ec:	2200      	movs	r2, #0
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f000 fb7d 	bl	80027f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_InitTick+0x5c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e000      	b.n	8002104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000004 	.word	0x20000004
 8002110:	2000000c 	.word	0x2000000c
 8002114:	20000008 	.word	0x20000008

08002118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x20>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x24>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_IncTick+0x24>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	2000000c 	.word	0x2000000c
 800213c:	200012dc 	.word	0x200012dc

08002140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_GetTick+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	200012dc 	.word	0x200012dc

08002158 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e033      	b.n	80021d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fbb8 	bl	80018ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	d118      	bne.n	80021c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800219e:	f023 0302 	bic.w	r3, r3, #2
 80021a2:	f043 0202 	orr.w	r2, r3, #2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f94a 	bl	8002444 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	f043 0201 	orr.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
 80021c6:	e001      	b.n	80021cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x1c>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e113      	b.n	8002424 <HAL_ADC_ConfigChannel+0x244>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b09      	cmp	r3, #9
 800220a:	d925      	bls.n	8002258 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68d9      	ldr	r1, [r3, #12]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	3b1e      	subs	r3, #30
 8002222:	2207      	movs	r2, #7
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43da      	mvns	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	400a      	ands	r2, r1
 8002230:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68d9      	ldr	r1, [r3, #12]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	b29b      	uxth	r3, r3
 8002242:	4618      	mov	r0, r3
 8002244:	4603      	mov	r3, r0
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4403      	add	r3, r0
 800224a:	3b1e      	subs	r3, #30
 800224c:	409a      	lsls	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	e022      	b.n	800229e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6919      	ldr	r1, [r3, #16]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	2207      	movs	r2, #7
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	400a      	ands	r2, r1
 800227a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6919      	ldr	r1, [r3, #16]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	4618      	mov	r0, r3
 800228e:	4603      	mov	r3, r0
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4403      	add	r3, r0
 8002294:	409a      	lsls	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d824      	bhi.n	80022f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	3b05      	subs	r3, #5
 80022b8:	221f      	movs	r2, #31
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	400a      	ands	r2, r1
 80022c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	3b05      	subs	r3, #5
 80022e2:	fa00 f203 	lsl.w	r2, r0, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	635a      	str	r2, [r3, #52]	; 0x34
 80022ee:	e04c      	b.n	800238a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b0c      	cmp	r3, #12
 80022f6:	d824      	bhi.n	8002342 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	3b23      	subs	r3, #35	; 0x23
 800230a:	221f      	movs	r2, #31
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43da      	mvns	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	400a      	ands	r2, r1
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	4618      	mov	r0, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	3b23      	subs	r3, #35	; 0x23
 8002334:	fa00 f203 	lsl.w	r2, r0, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
 8002340:	e023      	b.n	800238a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	3b41      	subs	r3, #65	; 0x41
 8002354:	221f      	movs	r2, #31
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	400a      	ands	r2, r1
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	4618      	mov	r0, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	3b41      	subs	r3, #65	; 0x41
 800237e:	fa00 f203 	lsl.w	r2, r0, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_ADC_ConfigChannel+0x250>)
 800238c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a28      	ldr	r2, [pc, #160]	; (8002434 <HAL_ADC_ConfigChannel+0x254>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d10f      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1d8>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b12      	cmp	r3, #18
 800239e:	d10b      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <HAL_ADC_ConfigChannel+0x254>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d12b      	bne.n	800241a <HAL_ADC_ConfigChannel+0x23a>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <HAL_ADC_ConfigChannel+0x258>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d003      	beq.n	80023d4 <HAL_ADC_ConfigChannel+0x1f4>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b11      	cmp	r3, #17
 80023d2:	d122      	bne.n	800241a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a11      	ldr	r2, [pc, #68]	; (8002438 <HAL_ADC_ConfigChannel+0x258>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d111      	bne.n	800241a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_ADC_ConfigChannel+0x25c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_ADC_ConfigChannel+0x260>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	0c9a      	lsrs	r2, r3, #18
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800240c:	e002      	b.n	8002414 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	3b01      	subs	r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f9      	bne.n	800240e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40012300 	.word	0x40012300
 8002434:	40012000 	.word	0x40012000
 8002438:	10000012 	.word	0x10000012
 800243c:	20000004 	.word	0x20000004
 8002440:	431bde83 	.word	0x431bde83

08002444 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800244c:	4b79      	ldr	r3, [pc, #484]	; (8002634 <ADC_Init+0x1f0>)
 800244e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	431a      	orrs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	021a      	lsls	r2, r3, #8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800249c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	4a58      	ldr	r2, [pc, #352]	; (8002638 <ADC_Init+0x1f4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d022      	beq.n	8002522 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800250c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6899      	ldr	r1, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	e00f      	b.n	8002542 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002540:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0202 	bic.w	r2, r2, #2
 8002550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6899      	ldr	r1, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7e1b      	ldrb	r3, [r3, #24]
 800255c:	005a      	lsls	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01b      	beq.n	80025a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800258e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	3b01      	subs	r3, #1
 800259c:	035a      	lsls	r2, r3, #13
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	e007      	b.n	80025b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	051a      	lsls	r2, r3, #20
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6899      	ldr	r1, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025fa:	025a      	lsls	r2, r3, #9
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6899      	ldr	r1, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	029a      	lsls	r2, r3, #10
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	609a      	str	r2, [r3, #8]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40012300 	.word	0x40012300
 8002638:	0f000001 	.word	0x0f000001

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <__NVIC_EnableIRQ+0x38>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	; (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a8:	d301      	bcc.n	80027ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <SysTick_Config+0x40>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b6:	210f      	movs	r1, #15
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	f7ff ff8e 	bl	80026dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <SysTick_Config+0x40>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <SysTick_Config+0x40>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	e000e010 	.word	0xe000e010

080027dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff29 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002804:	f7ff ff3e 	bl	8002684 <__NVIC_GetPriorityGrouping>
 8002808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f7ff ff8e 	bl	8002730 <NVIC_EncodePriority>
 8002814:	4602      	mov	r2, r0
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff5d 	bl	80026dc <__NVIC_SetPriority>
}
 8002822:	bf00      	nop
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff31 	bl	80026a0 <__NVIC_EnableIRQ>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ffa2 	bl	8002798 <SysTick_Config>
 8002854:	4603      	mov	r3, r0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e159      	b.n	8002b30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 8148 	bne.w	8002b2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d005      	beq.n	80028b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d130      	bne.n	8002914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 0201 	and.w	r2, r3, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b03      	cmp	r3, #3
 800291e:	d017      	beq.n	8002950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d123      	bne.n	80029a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a2 	beq.w	8002b2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b57      	ldr	r3, [pc, #348]	; (8002b48 <HAL_GPIO_Init+0x2e8>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a56      	ldr	r2, [pc, #344]	; (8002b48 <HAL_GPIO_Init+0x2e8>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <HAL_GPIO_Init+0x2e8>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a02:	4a52      	ldr	r2, [pc, #328]	; (8002b4c <HAL_GPIO_Init+0x2ec>)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a49      	ldr	r2, [pc, #292]	; (8002b50 <HAL_GPIO_Init+0x2f0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d019      	beq.n	8002a62 <HAL_GPIO_Init+0x202>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a48      	ldr	r2, [pc, #288]	; (8002b54 <HAL_GPIO_Init+0x2f4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x1fe>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a47      	ldr	r2, [pc, #284]	; (8002b58 <HAL_GPIO_Init+0x2f8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00d      	beq.n	8002a5a <HAL_GPIO_Init+0x1fa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a46      	ldr	r2, [pc, #280]	; (8002b5c <HAL_GPIO_Init+0x2fc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0x1f6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a45      	ldr	r2, [pc, #276]	; (8002b60 <HAL_GPIO_Init+0x300>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_GPIO_Init+0x1f2>
 8002a4e:	2304      	movs	r3, #4
 8002a50:	e008      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a56:	2303      	movs	r3, #3
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a62:	2300      	movs	r3, #0
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a74:	4935      	ldr	r1, [pc, #212]	; (8002b4c <HAL_GPIO_Init+0x2ec>)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a82:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa6:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad0:	4a24      	ldr	r2, [pc, #144]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b24:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	f67f aea2 	bls.w	800287c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3724      	adds	r7, #36	; 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40013800 	.word	0x40013800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020c00 	.word	0x40020c00
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40013c00 	.word	0x40013c00

08002b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
 8002b74:	4613      	mov	r3, r2
 8002b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b78:	787b      	ldrb	r3, [r7, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b84:	e003      	b.n	8002b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	041a      	lsls	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	619a      	str	r2, [r3, #24]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d006      	beq.n	8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f806 	bl	8002bcc <HAL_GPIO_EXTI_Callback>
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40013c00 	.word	0x40013c00

08002bcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e12b      	b.n	8002e4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe feb2 	bl	8001974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2224      	movs	r2, #36	; 0x24
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c48:	f000 fd40 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 8002c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a81      	ldr	r2, [pc, #516]	; (8002e58 <HAL_I2C_Init+0x274>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d807      	bhi.n	8002c68 <HAL_I2C_Init+0x84>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a80      	ldr	r2, [pc, #512]	; (8002e5c <HAL_I2C_Init+0x278>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	bf94      	ite	ls
 8002c60:	2301      	movls	r3, #1
 8002c62:	2300      	movhi	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e006      	b.n	8002c76 <HAL_I2C_Init+0x92>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a7d      	ldr	r2, [pc, #500]	; (8002e60 <HAL_I2C_Init+0x27c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bf94      	ite	ls
 8002c70:	2301      	movls	r3, #1
 8002c72:	2300      	movhi	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0e7      	b.n	8002e4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a78      	ldr	r2, [pc, #480]	; (8002e64 <HAL_I2C_Init+0x280>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0c9b      	lsrs	r3, r3, #18
 8002c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a6a      	ldr	r2, [pc, #424]	; (8002e58 <HAL_I2C_Init+0x274>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d802      	bhi.n	8002cb8 <HAL_I2C_Init+0xd4>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	e009      	b.n	8002ccc <HAL_I2C_Init+0xe8>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	4a69      	ldr	r2, [pc, #420]	; (8002e68 <HAL_I2C_Init+0x284>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	3301      	adds	r3, #1
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	495c      	ldr	r1, [pc, #368]	; (8002e58 <HAL_I2C_Init+0x274>)
 8002ce8:	428b      	cmp	r3, r1
 8002cea:	d819      	bhi.n	8002d20 <HAL_I2C_Init+0x13c>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1e59      	subs	r1, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfa:	1c59      	adds	r1, r3, #1
 8002cfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d00:	400b      	ands	r3, r1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_I2C_Init+0x138>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1e59      	subs	r1, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1a:	e051      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	e04f      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d111      	bne.n	8002d4c <HAL_I2C_Init+0x168>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	440b      	add	r3, r1
 8002d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e012      	b.n	8002d72 <HAL_I2C_Init+0x18e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e58      	subs	r0, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	0099      	lsls	r1, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Init+0x196>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e022      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10e      	bne.n	8002da0 <HAL_I2C_Init+0x1bc>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1e58      	subs	r0, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	440b      	add	r3, r1
 8002d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d9e:	e00f      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	6809      	ldr	r1, [r1, #0]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6911      	ldr	r1, [r2, #16]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68d2      	ldr	r2, [r2, #12]
 8002dfa:	4311      	orrs	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	000186a0 	.word	0x000186a0
 8002e5c:	001e847f 	.word	0x001e847f
 8002e60:	003d08ff 	.word	0x003d08ff
 8002e64:	431bde83 	.word	0x431bde83
 8002e68:	10624dd3 	.word	0x10624dd3

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e267      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d075      	beq.n	8002f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8a:	4b88      	ldr	r3, [pc, #544]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d00c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e96:	4b85      	ldr	r3, [pc, #532]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d112      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea2:	4b82      	ldr	r3, [pc, #520]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	4b7e      	ldr	r3, [pc, #504]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d05b      	beq.n	8002f74 <HAL_RCC_OscConfig+0x108>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d157      	bne.n	8002f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e242      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x74>
 8002ed2:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a75      	ldr	r2, [pc, #468]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e01d      	b.n	8002f1c <HAL_RCC_OscConfig+0xb0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x98>
 8002eea:	4b70      	ldr	r3, [pc, #448]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a6f      	ldr	r2, [pc, #444]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a6c      	ldr	r2, [pc, #432]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xb0>
 8002f04:	4b69      	ldr	r3, [pc, #420]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a68      	ldr	r2, [pc, #416]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b66      	ldr	r3, [pc, #408]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7ff f90c 	bl	8002140 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7ff f908 	bl	8002140 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e207      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b5b      	ldr	r3, [pc, #364]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xc0>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7ff f8f8 	bl	8002140 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7ff f8f4 	bl	8002140 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1f3      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	4b51      	ldr	r3, [pc, #324]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0xe8>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d063      	beq.n	800304a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f82:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d11c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9a:	4b44      	ldr	r3, [pc, #272]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	4b41      	ldr	r3, [pc, #260]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x152>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e1c7      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4937      	ldr	r1, [pc, #220]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	e03a      	b.n	800304a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d020      	beq.n	800301e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_RCC_OscConfig+0x244>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7ff f8ad 	bl	8002140 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fea:	f7ff f8a9 	bl	8002140 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e1a8      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4925      	ldr	r1, [pc, #148]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]
 800301c:	e015      	b.n	800304a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301e:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_RCC_OscConfig+0x244>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7ff f88c 	bl	8002140 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302c:	f7ff f888 	bl	8002140 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e187      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d036      	beq.n	80030c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_RCC_OscConfig+0x248>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7ff f86c 	bl	8002140 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306c:	f7ff f868 	bl	8002140 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e167      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8003080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x200>
 800308a:	e01b      	b.n	80030c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCC_OscConfig+0x248>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7ff f855 	bl	8002140 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003098:	e00e      	b.n	80030b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309a:	f7ff f851 	bl	8002140 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d907      	bls.n	80030b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e150      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
 80030ac:	40023800 	.word	0x40023800
 80030b0:	42470000 	.word	0x42470000
 80030b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b8:	4b88      	ldr	r3, [pc, #544]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ea      	bne.n	800309a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8097 	beq.w	8003200 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d6:	4b81      	ldr	r3, [pc, #516]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10f      	bne.n	8003102 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b7d      	ldr	r3, [pc, #500]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4a7c      	ldr	r2, [pc, #496]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f0:	6413      	str	r3, [r2, #64]	; 0x40
 80030f2:	4b7a      	ldr	r3, [pc, #488]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fe:	2301      	movs	r3, #1
 8003100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	4b77      	ldr	r3, [pc, #476]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d118      	bne.n	8003140 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310e:	4b74      	ldr	r3, [pc, #464]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a73      	ldr	r2, [pc, #460]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311a:	f7ff f811 	bl	8002140 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003122:	f7ff f80d 	bl	8002140 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e10c      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x2ea>
 8003148:	4b64      	ldr	r3, [pc, #400]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a63      	ldr	r2, [pc, #396]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
 8003154:	e01c      	b.n	8003190 <HAL_RCC_OscConfig+0x324>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b05      	cmp	r3, #5
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x30c>
 800315e:	4b5f      	ldr	r3, [pc, #380]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a5e      	ldr	r2, [pc, #376]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
 800316a:	4b5c      	ldr	r3, [pc, #368]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	4a5b      	ldr	r2, [pc, #364]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6713      	str	r3, [r2, #112]	; 0x70
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0x324>
 8003178:	4b58      	ldr	r3, [pc, #352]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a57      	ldr	r2, [pc, #348]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	4b55      	ldr	r3, [pc, #340]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a54      	ldr	r2, [pc, #336]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800318a:	f023 0304 	bic.w	r3, r3, #4
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d015      	beq.n	80031c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fe ffd2 	bl	8002140 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a0:	f7fe ffce 	bl	8002140 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e0cb      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	4b49      	ldr	r3, [pc, #292]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0ee      	beq.n	80031a0 <HAL_RCC_OscConfig+0x334>
 80031c2:	e014      	b.n	80031ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c4:	f7fe ffbc 	bl	8002140 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fe ffb8 	bl	8002140 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0b5      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e2:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1ee      	bne.n	80031cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f4:	4b39      	ldr	r3, [pc, #228]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	4a38      	ldr	r2, [pc, #224]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80a1 	beq.w	800334c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b08      	cmp	r3, #8
 8003214:	d05c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d141      	bne.n	80032a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_RCC_OscConfig+0x478>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fe ff8c 	bl	8002140 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322c:	f7fe ff88 	bl	8002140 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e087      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	4b27      	ldr	r3, [pc, #156]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	3b01      	subs	r3, #1
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	491b      	ldr	r1, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x478>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe ff61 	bl	8002140 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe ff5d 	bl	8002140 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e05c      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x416>
 80032a0:	e054      	b.n	800334c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_RCC_OscConfig+0x478>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe ff4a 	bl	8002140 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe ff46 	bl	8002140 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e045      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x444>
 80032ce:	e03d      	b.n	800334c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e038      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40007000 	.word	0x40007000
 80032e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_RCC_OscConfig+0x4ec>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d028      	beq.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d121      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d11a      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800331e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003320:	4293      	cmp	r3, r2
 8003322:	d111      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800

0800335c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0cc      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003370:	4b68      	ldr	r3, [pc, #416]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d90c      	bls.n	8003398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b65      	ldr	r3, [pc, #404]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b63      	ldr	r3, [pc, #396]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b8      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b0:	4b59      	ldr	r3, [pc, #356]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a58      	ldr	r2, [pc, #352]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a52      	ldr	r2, [pc, #328]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b50      	ldr	r3, [pc, #320]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	494d      	ldr	r1, [pc, #308]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d044      	beq.n	800347c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d119      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e07f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d003      	beq.n	800341a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003416:	2b03      	cmp	r3, #3
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e06f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e067      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343a:	4b37      	ldr	r3, [pc, #220]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f023 0203 	bic.w	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4934      	ldr	r1, [pc, #208]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800344c:	f7fe fe78 	bl	8002140 <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	e00a      	b.n	800346a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003454:	f7fe fe74 	bl	8002140 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e04f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 020c 	and.w	r2, r3, #12
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	429a      	cmp	r2, r3
 800347a:	d1eb      	bne.n	8003454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d20c      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e032      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4916      	ldr	r1, [pc, #88]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	490e      	ldr	r1, [pc, #56]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034e2:	f000 f821 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	490a      	ldr	r1, [pc, #40]	; (800351c <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	5ccb      	ldrb	r3, [r1, r3]
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	4a09      	ldr	r2, [pc, #36]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fdd8 	bl	80020b8 <HAL_InitTick>

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023c00 	.word	0x40023c00
 8003518:	40023800 	.word	0x40023800
 800351c:	080062c8 	.word	0x080062c8
 8003520:	20000004 	.word	0x20000004
 8003524:	20000008 	.word	0x20000008

08003528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800352c:	b090      	sub	sp, #64	; 0x40
 800352e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
 8003534:	2300      	movs	r3, #0
 8003536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003538:	2300      	movs	r3, #0
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003540:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b08      	cmp	r3, #8
 800354a:	d00d      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x40>
 800354c:	2b08      	cmp	r3, #8
 800354e:	f200 80a1 	bhi.w	8003694 <HAL_RCC_GetSysClockFreq+0x16c>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x34>
 8003556:	2b04      	cmp	r3, #4
 8003558:	d003      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0x3a>
 800355a:	e09b      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_GetSysClockFreq+0x184>)
 800355e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003560:	e09b      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003562:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003564:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003566:	e098      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003568:	4b4f      	ldr	r3, [pc, #316]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003570:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003572:	4b4d      	ldr	r3, [pc, #308]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d028      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357e:	4b4a      	ldr	r3, [pc, #296]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	099b      	lsrs	r3, r3, #6
 8003584:	2200      	movs	r2, #0
 8003586:	623b      	str	r3, [r7, #32]
 8003588:	627a      	str	r2, [r7, #36]	; 0x24
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003590:	2100      	movs	r1, #0
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003594:	fb03 f201 	mul.w	r2, r3, r1
 8003598:	2300      	movs	r3, #0
 800359a:	fb00 f303 	mul.w	r3, r0, r3
 800359e:	4413      	add	r3, r2
 80035a0:	4a43      	ldr	r2, [pc, #268]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80035a2:	fba0 1202 	umull	r1, r2, r0, r2
 80035a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035a8:	460a      	mov	r2, r1
 80035aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80035ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ae:	4413      	add	r3, r2
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b4:	2200      	movs	r2, #0
 80035b6:	61bb      	str	r3, [r7, #24]
 80035b8:	61fa      	str	r2, [r7, #28]
 80035ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035c2:	f7fd faa7 	bl	8000b14 <__aeabi_uldivmod>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4613      	mov	r3, r2
 80035cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ce:	e053      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	2200      	movs	r2, #0
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	617a      	str	r2, [r7, #20]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035e2:	f04f 0b00 	mov.w	fp, #0
 80035e6:	4652      	mov	r2, sl
 80035e8:	465b      	mov	r3, fp
 80035ea:	f04f 0000 	mov.w	r0, #0
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	0159      	lsls	r1, r3, #5
 80035f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f8:	0150      	lsls	r0, r2, #5
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	ebb2 080a 	subs.w	r8, r2, sl
 8003602:	eb63 090b 	sbc.w	r9, r3, fp
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003612:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003616:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800361a:	ebb2 0408 	subs.w	r4, r2, r8
 800361e:	eb63 0509 	sbc.w	r5, r3, r9
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	00eb      	lsls	r3, r5, #3
 800362c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003630:	00e2      	lsls	r2, r4, #3
 8003632:	4614      	mov	r4, r2
 8003634:	461d      	mov	r5, r3
 8003636:	eb14 030a 	adds.w	r3, r4, sl
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	eb45 030b 	adc.w	r3, r5, fp
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800364e:	4629      	mov	r1, r5
 8003650:	028b      	lsls	r3, r1, #10
 8003652:	4621      	mov	r1, r4
 8003654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003658:	4621      	mov	r1, r4
 800365a:	028a      	lsls	r2, r1, #10
 800365c:	4610      	mov	r0, r2
 800365e:	4619      	mov	r1, r3
 8003660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003662:	2200      	movs	r2, #0
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	60fa      	str	r2, [r7, #12]
 8003668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800366c:	f7fd fa52 	bl	8000b14 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4613      	mov	r3, r2
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	3301      	adds	r3, #1
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003692:	e002      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetSysClockFreq+0x184>)
 8003696:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800369c:	4618      	mov	r0, r3
 800369e:	3740      	adds	r7, #64	; 0x40
 80036a0:	46bd      	mov	sp, r7
 80036a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800
 80036ac:	00f42400 	.word	0x00f42400
 80036b0:	017d7840 	.word	0x017d7840

080036b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000004 	.word	0x20000004

080036cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036d0:	f7ff fff0 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	0a9b      	lsrs	r3, r3, #10
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4903      	ldr	r1, [pc, #12]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	080062d8 	.word	0x080062d8

080036f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036f8:	f7ff ffdc 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0b5b      	lsrs	r3, r3, #13
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4903      	ldr	r1, [pc, #12]	; (8003718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800
 8003718:	080062d8 	.word	0x080062d8

0800371c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e07b      	b.n	8003826 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800373e:	d009      	beq.n	8003754 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	61da      	str	r2, [r3, #28]
 8003746:	e005      	b.n	8003754 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fe f95a 	bl	8001a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	ea42 0103 	orr.w	r1, r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	f003 0104 	and.w	r1, r3, #4
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f003 0210 	and.w	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003814:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e041      	b.n	80038c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7fe f97f 	bl	8001b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f000 fcc7 	bl	8004200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e041      	b.n	8003962 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fe f952 	bl	8001b9c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f000 fc78 	bl	8004200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_TIM_OC_Start+0x24>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e022      	b.n	80039d6 <HAL_TIM_OC_Start+0x6a>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d109      	bne.n	80039aa <HAL_TIM_OC_Start+0x3e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e015      	b.n	80039d6 <HAL_TIM_OC_Start+0x6a>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d109      	bne.n	80039c4 <HAL_TIM_OC_Start+0x58>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e008      	b.n	80039d6 <HAL_TIM_OC_Start+0x6a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e068      	b.n	8003ab0 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_OC_Start+0x82>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ec:	e013      	b.n	8003a16 <HAL_TIM_OC_Start+0xaa>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d104      	bne.n	80039fe <HAL_TIM_OC_Start+0x92>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039fc:	e00b      	b.n	8003a16 <HAL_TIM_OC_Start+0xaa>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_OC_Start+0xa2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a0c:	e003      	b.n	8003a16 <HAL_TIM_OC_Start+0xaa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	6839      	ldr	r1, [r7, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 ff73 	bl	800490a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <HAL_TIM_OC_Start+0x14c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d107      	bne.n	8003a3e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_TIM_OC_Start+0x14c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_TIM_OC_Start+0x10e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d013      	beq.n	8003a7a <HAL_TIM_OC_Start+0x10e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_TIM_OC_Start+0x150>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_TIM_OC_Start+0x10e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <HAL_TIM_OC_Start+0x154>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_TIM_OC_Start+0x10e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <HAL_TIM_OC_Start+0x158>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_TIM_OC_Start+0x10e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <HAL_TIM_OC_Start+0x15c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d111      	bne.n	8003a9e <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b06      	cmp	r3, #6
 8003a8a:	d010      	beq.n	8003aae <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9c:	e007      	b.n	8003aae <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40000c00 	.word	0x40000c00
 8003ac8:	40014000 	.word	0x40014000

08003acc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e041      	b.n	8003b62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fe f800 	bl	8001af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f000 fb78 	bl	8004200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <HAL_TIM_PWM_Start+0x24>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	e022      	b.n	8003bd6 <HAL_TIM_PWM_Start+0x6a>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d109      	bne.n	8003baa <HAL_TIM_PWM_Start+0x3e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	bf14      	ite	ne
 8003ba2:	2301      	movne	r3, #1
 8003ba4:	2300      	moveq	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	e015      	b.n	8003bd6 <HAL_TIM_PWM_Start+0x6a>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d109      	bne.n	8003bc4 <HAL_TIM_PWM_Start+0x58>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	bf14      	ite	ne
 8003bbc:	2301      	movne	r3, #1
 8003bbe:	2300      	moveq	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e008      	b.n	8003bd6 <HAL_TIM_PWM_Start+0x6a>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e068      	b.n	8003cb0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_PWM_Start+0x82>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bec:	e013      	b.n	8003c16 <HAL_TIM_PWM_Start+0xaa>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d104      	bne.n	8003bfe <HAL_TIM_PWM_Start+0x92>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bfc:	e00b      	b.n	8003c16 <HAL_TIM_PWM_Start+0xaa>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_PWM_Start+0xa2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c0c:	e003      	b.n	8003c16 <HAL_TIM_PWM_Start+0xaa>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	6839      	ldr	r1, [r7, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fe73 	bl	800490a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a23      	ldr	r2, [pc, #140]	; (8003cb8 <HAL_TIM_PWM_Start+0x14c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d107      	bne.n	8003c3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_TIM_PWM_Start+0x14c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x10e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d013      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x10e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <HAL_TIM_PWM_Start+0x150>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x10e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <HAL_TIM_PWM_Start+0x154>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x10e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <HAL_TIM_PWM_Start+0x158>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x10e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <HAL_TIM_PWM_Start+0x15c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d111      	bne.n	8003c9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b06      	cmp	r3, #6
 8003c8a:	d010      	beq.n	8003cae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9c:	e007      	b.n	8003cae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40000c00 	.word	0x40000c00
 8003cc8:	40014000 	.word	0x40014000

08003ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d122      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d11b      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0202 	mvn.w	r2, #2
 8003cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fa58 	bl	80041c4 <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa4a 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fa5b 	bl	80041d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d122      	bne.n	8003d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d11b      	bne.n	8003d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0204 	mvn.w	r2, #4
 8003d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa2e 	bl	80041c4 <HAL_TIM_IC_CaptureCallback>
 8003d68:	e005      	b.n	8003d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa20 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fa31 	bl	80041d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d122      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d11b      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0208 	mvn.w	r2, #8
 8003da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2204      	movs	r2, #4
 8003da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa04 	bl	80041c4 <HAL_TIM_IC_CaptureCallback>
 8003dbc:	e005      	b.n	8003dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9f6 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fa07 	bl	80041d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b10      	cmp	r3, #16
 8003ddc:	d122      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d11b      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0210 	mvn.w	r2, #16
 8003df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2208      	movs	r2, #8
 8003dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f9da 	bl	80041c4 <HAL_TIM_IC_CaptureCallback>
 8003e10:	e005      	b.n	8003e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f9cc 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f9dd 	bl	80041d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d10e      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d107      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0201 	mvn.w	r2, #1
 8003e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f9a6 	bl	800419c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5a:	2b80      	cmp	r3, #128	; 0x80
 8003e5c:	d10e      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e68:	2b80      	cmp	r3, #128	; 0x80
 8003e6a:	d107      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fee0 	bl	8004c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d10e      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d107      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f9a2 	bl	80041ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d107      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0220 	mvn.w	r2, #32
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 feaa 	bl	8004c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_OC_ConfigChannel+0x1e>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e048      	b.n	8003f8c <HAL_TIM_OC_ConfigChannel+0xb0>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	d839      	bhi.n	8003f7c <HAL_TIM_OC_ConfigChannel+0xa0>
 8003f08:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f45 	.word	0x08003f45
 8003f14:	08003f7d 	.word	0x08003f7d
 8003f18:	08003f7d 	.word	0x08003f7d
 8003f1c:	08003f7d 	.word	0x08003f7d
 8003f20:	08003f53 	.word	0x08003f53
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f7d 	.word	0x08003f7d
 8003f2c:	08003f7d 	.word	0x08003f7d
 8003f30:	08003f61 	.word	0x08003f61
 8003f34:	08003f7d 	.word	0x08003f7d
 8003f38:	08003f7d 	.word	0x08003f7d
 8003f3c:	08003f7d 	.word	0x08003f7d
 8003f40:	08003f6f 	.word	0x08003f6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f9d8 	bl	8004300 <TIM_OC1_SetConfig>
      break;
 8003f50:	e017      	b.n	8003f82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fa37 	bl	80043cc <TIM_OC2_SetConfig>
      break;
 8003f5e:	e010      	b.n	8003f82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fa9c 	bl	80044a4 <TIM_OC3_SetConfig>
      break;
 8003f6c:	e009      	b.n	8003f82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 faff 	bl	8004578 <TIM_OC4_SetConfig>
      break;
 8003f7a:	e002      	b.n	8003f82 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e0ae      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b0c      	cmp	r3, #12
 8003fbe:	f200 809f 	bhi.w	8004100 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fc2:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc8:	08003ffd 	.word	0x08003ffd
 8003fcc:	08004101 	.word	0x08004101
 8003fd0:	08004101 	.word	0x08004101
 8003fd4:	08004101 	.word	0x08004101
 8003fd8:	0800403d 	.word	0x0800403d
 8003fdc:	08004101 	.word	0x08004101
 8003fe0:	08004101 	.word	0x08004101
 8003fe4:	08004101 	.word	0x08004101
 8003fe8:	0800407f 	.word	0x0800407f
 8003fec:	08004101 	.word	0x08004101
 8003ff0:	08004101 	.word	0x08004101
 8003ff4:	08004101 	.word	0x08004101
 8003ff8:	080040bf 	.word	0x080040bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f97c 	bl	8004300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0208 	orr.w	r2, r2, #8
 8004016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0204 	bic.w	r2, r2, #4
 8004026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6999      	ldr	r1, [r3, #24]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	619a      	str	r2, [r3, #24]
      break;
 800403a:	e064      	b.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f9c2 	bl	80043cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6999      	ldr	r1, [r3, #24]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	021a      	lsls	r2, r3, #8
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	619a      	str	r2, [r3, #24]
      break;
 800407c:	e043      	b.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fa0d 	bl	80044a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0208 	orr.w	r2, r2, #8
 8004098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0204 	bic.w	r2, r2, #4
 80040a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69d9      	ldr	r1, [r3, #28]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	61da      	str	r2, [r3, #28]
      break;
 80040bc:	e023      	b.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fa57 	bl	8004578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69d9      	ldr	r1, [r3, #28]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	021a      	lsls	r2, r3, #8
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	61da      	str	r2, [r3, #28]
      break;
 80040fe:	e002      	b.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	75fb      	strb	r3, [r7, #23]
      break;
 8004104:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIM_SlaveConfigSynchro+0x18>
 800412c:	2302      	movs	r3, #2
 800412e:	e031      	b.n	8004194 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004140:	6839      	ldr	r1, [r7, #0]
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa68 	bl	8004618 <TIM_SlaveTimer_SetConfig>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e018      	b.n	8004194 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004170:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004180:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a34      	ldr	r2, [pc, #208]	; (80042e4 <TIM_Base_SetConfig+0xe4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00f      	beq.n	8004238 <TIM_Base_SetConfig+0x38>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421e:	d00b      	beq.n	8004238 <TIM_Base_SetConfig+0x38>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a31      	ldr	r2, [pc, #196]	; (80042e8 <TIM_Base_SetConfig+0xe8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <TIM_Base_SetConfig+0x38>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a30      	ldr	r2, [pc, #192]	; (80042ec <TIM_Base_SetConfig+0xec>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_Base_SetConfig+0x38>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a2f      	ldr	r2, [pc, #188]	; (80042f0 <TIM_Base_SetConfig+0xf0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d108      	bne.n	800424a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a25      	ldr	r2, [pc, #148]	; (80042e4 <TIM_Base_SetConfig+0xe4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01b      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d017      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a22      	ldr	r2, [pc, #136]	; (80042e8 <TIM_Base_SetConfig+0xe8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a21      	ldr	r2, [pc, #132]	; (80042ec <TIM_Base_SetConfig+0xec>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00f      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <TIM_Base_SetConfig+0xf0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00b      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1f      	ldr	r2, [pc, #124]	; (80042f4 <TIM_Base_SetConfig+0xf4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a1e      	ldr	r2, [pc, #120]	; (80042f8 <TIM_Base_SetConfig+0xf8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <TIM_Base_SetConfig+0xfc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d108      	bne.n	800429c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a08      	ldr	r2, [pc, #32]	; (80042e4 <TIM_Base_SetConfig+0xe4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d103      	bne.n	80042d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	615a      	str	r2, [r3, #20]
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800
 80042f0:	40000c00 	.word	0x40000c00
 80042f4:	40014000 	.word	0x40014000
 80042f8:	40014400 	.word	0x40014400
 80042fc:	40014800 	.word	0x40014800

08004300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 0302 	bic.w	r3, r3, #2
 8004348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <TIM_OC1_SetConfig+0xc8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d10c      	bne.n	8004376 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 0308 	bic.w	r3, r3, #8
 8004362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 0304 	bic.w	r3, r3, #4
 8004374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <TIM_OC1_SetConfig+0xc8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d111      	bne.n	80043a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40010000 	.word	0x40010000

080043cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f023 0210 	bic.w	r2, r3, #16
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	021b      	lsls	r3, r3, #8
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0320 	bic.w	r3, r3, #32
 8004416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <TIM_OC2_SetConfig+0xd4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d10d      	bne.n	8004448 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <TIM_OC2_SetConfig+0xd4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d113      	bne.n	8004478 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800445e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40010000 	.word	0x40010000

080044a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0303 	bic.w	r3, r3, #3
 80044da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <TIM_OC3_SetConfig+0xd0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d10d      	bne.n	800451e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800451c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <TIM_OC3_SetConfig+0xd0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d113      	bne.n	800454e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800452c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	621a      	str	r2, [r3, #32]
}
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	40010000 	.word	0x40010000

08004578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	031b      	lsls	r3, r3, #12
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a10      	ldr	r2, [pc, #64]	; (8004614 <TIM_OC4_SetConfig+0x9c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d109      	bne.n	80045ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	019b      	lsls	r3, r3, #6
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000

08004618 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004634:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f023 0307 	bic.w	r3, r3, #7
 8004646:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b70      	cmp	r3, #112	; 0x70
 8004660:	d01a      	beq.n	8004698 <TIM_SlaveTimer_SetConfig+0x80>
 8004662:	2b70      	cmp	r3, #112	; 0x70
 8004664:	d860      	bhi.n	8004728 <TIM_SlaveTimer_SetConfig+0x110>
 8004666:	2b60      	cmp	r3, #96	; 0x60
 8004668:	d054      	beq.n	8004714 <TIM_SlaveTimer_SetConfig+0xfc>
 800466a:	2b60      	cmp	r3, #96	; 0x60
 800466c:	d85c      	bhi.n	8004728 <TIM_SlaveTimer_SetConfig+0x110>
 800466e:	2b50      	cmp	r3, #80	; 0x50
 8004670:	d046      	beq.n	8004700 <TIM_SlaveTimer_SetConfig+0xe8>
 8004672:	2b50      	cmp	r3, #80	; 0x50
 8004674:	d858      	bhi.n	8004728 <TIM_SlaveTimer_SetConfig+0x110>
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d019      	beq.n	80046ae <TIM_SlaveTimer_SetConfig+0x96>
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	d854      	bhi.n	8004728 <TIM_SlaveTimer_SetConfig+0x110>
 800467e:	2b30      	cmp	r3, #48	; 0x30
 8004680:	d055      	beq.n	800472e <TIM_SlaveTimer_SetConfig+0x116>
 8004682:	2b30      	cmp	r3, #48	; 0x30
 8004684:	d850      	bhi.n	8004728 <TIM_SlaveTimer_SetConfig+0x110>
 8004686:	2b20      	cmp	r3, #32
 8004688:	d051      	beq.n	800472e <TIM_SlaveTimer_SetConfig+0x116>
 800468a:	2b20      	cmp	r3, #32
 800468c:	d84c      	bhi.n	8004728 <TIM_SlaveTimer_SetConfig+0x110>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d04d      	beq.n	800472e <TIM_SlaveTimer_SetConfig+0x116>
 8004692:	2b10      	cmp	r3, #16
 8004694:	d04b      	beq.n	800472e <TIM_SlaveTimer_SetConfig+0x116>
 8004696:	e047      	b.n	8004728 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68d9      	ldr	r1, [r3, #12]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f000 f90f 	bl	80048ca <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80046ac:	e040      	b.n	8004730 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b05      	cmp	r3, #5
 80046b4:	d101      	bne.n	80046ba <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e03b      	b.n	8004732 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6a1a      	ldr	r2, [r3, #32]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
      break;
 80046fe:	e017      	b.n	8004730 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6899      	ldr	r1, [r3, #8]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	461a      	mov	r2, r3
 800470e:	f000 f87d 	bl	800480c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004712:	e00d      	b.n	8004730 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6899      	ldr	r1, [r3, #8]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	461a      	mov	r2, r3
 8004722:	f000 f8a2 	bl	800486a <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004726:	e003      	b.n	8004730 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	75fb      	strb	r3, [r7, #23]
      break;
 800472c:	e000      	b.n	8004730 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800472e:	bf00      	nop
  }

  return status;
 8004730:	7dfb      	ldrb	r3, [r7, #23]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	f023 0201 	bic.w	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a24      	ldr	r2, [pc, #144]	; (80047f8 <TIM_TI1_SetConfig+0xbc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <TIM_TI1_SetConfig+0x56>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d00f      	beq.n	8004792 <TIM_TI1_SetConfig+0x56>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a21      	ldr	r2, [pc, #132]	; (80047fc <TIM_TI1_SetConfig+0xc0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00b      	beq.n	8004792 <TIM_TI1_SetConfig+0x56>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a20      	ldr	r2, [pc, #128]	; (8004800 <TIM_TI1_SetConfig+0xc4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d007      	beq.n	8004792 <TIM_TI1_SetConfig+0x56>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <TIM_TI1_SetConfig+0xc8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d003      	beq.n	8004792 <TIM_TI1_SetConfig+0x56>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <TIM_TI1_SetConfig+0xcc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <TIM_TI1_SetConfig+0x5a>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <TIM_TI1_SetConfig+0x5c>
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0303 	bic.w	r3, r3, #3
 80047a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e003      	b.n	80047b6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f023 030a 	bic.w	r3, r3, #10
 80047d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f003 030a 	and.w	r3, r3, #10
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	621a      	str	r2, [r3, #32]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40014000 	.word	0x40014000

0800480c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f023 0201 	bic.w	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 030a 	bic.w	r3, r3, #10
 8004848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800486a:	b480      	push	{r7}
 800486c:	b087      	sub	sp, #28
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f023 0210 	bic.w	r2, r3, #16
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	031b      	lsls	r3, r3, #12
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	621a      	str	r2, [r3, #32]
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b087      	sub	sp, #28
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	021a      	lsls	r2, r3, #8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	609a      	str	r2, [r3, #8]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800490a:	b480      	push	{r7}
 800490c:	b087      	sub	sp, #28
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	2201      	movs	r2, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a1a      	ldr	r2, [r3, #32]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	43db      	mvns	r3, r3
 800492c:	401a      	ands	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	fa01 f303 	lsl.w	r3, r1, r3
 8004942:	431a      	orrs	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	621a      	str	r2, [r3, #32]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e09a      	b.n	8004a9e <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7fd f94b 	bl	8001c18 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7ff fc33 	bl	8004200 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6819      	ldr	r1, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2203      	movs	r2, #3
 80049a8:	f7ff fec8 	bl	800473c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 020c 	bic.w	r2, r2, #12
 80049ba:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6999      	ldr	r1, [r3, #24]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049dc:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80049ec:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049fc:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0207 	bic.w	r2, r2, #7
 8004a0c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0204 	orr.w	r2, r2, #4
 8004a1c:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a22:	2300      	movs	r3, #0
 8004a24:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004a26:	2370      	movs	r3, #112	; 0x70
 8004a28:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f107 020c 	add.w	r2, r7, #12
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fcc0 	bl	80043cc <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a5a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004a6a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3728      	adds	r7, #40	; 0x28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e050      	b.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1c      	ldr	r2, [pc, #112]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d018      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0c:	d013      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00e      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a15      	ldr	r2, [pc, #84]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a13      	ldr	r2, [pc, #76]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10c      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40010000 	.word	0x40010000
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40014000 	.word	0x40014000

08004b84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e03d      	b.n	8004c1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e03f      	b.n	8004ce2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fd f8b6 	bl	8001de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2224      	movs	r2, #36	; 0x24
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f829 	bl	8004cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf0:	b0c0      	sub	sp, #256	; 0x100
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	68d9      	ldr	r1, [r3, #12]
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	ea40 0301 	orr.w	r3, r0, r1
 8004d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d44:	f021 010c 	bic.w	r1, r1, #12
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d52:	430b      	orrs	r3, r1
 8004d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d66:	6999      	ldr	r1, [r3, #24]
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	ea40 0301 	orr.w	r3, r0, r1
 8004d72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b8f      	ldr	r3, [pc, #572]	; (8004fb8 <UART_SetConfig+0x2cc>)
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d005      	beq.n	8004d8c <UART_SetConfig+0xa0>
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b8d      	ldr	r3, [pc, #564]	; (8004fbc <UART_SetConfig+0x2d0>)
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d104      	bne.n	8004d96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7fe fcb2 	bl	80036f4 <HAL_RCC_GetPCLK2Freq>
 8004d90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d94:	e003      	b.n	8004d9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d96:	f7fe fc99 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 8004d9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da8:	f040 810c 	bne.w	8004fc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004db6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	1891      	adds	r1, r2, r2
 8004dc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dc6:	415b      	adcs	r3, r3
 8004dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dce:	4621      	mov	r1, r4
 8004dd0:	eb12 0801 	adds.w	r8, r2, r1
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	eb43 0901 	adc.w	r9, r3, r1
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dee:	4690      	mov	r8, r2
 8004df0:	4699      	mov	r9, r3
 8004df2:	4623      	mov	r3, r4
 8004df4:	eb18 0303 	adds.w	r3, r8, r3
 8004df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	eb49 0303 	adc.w	r3, r9, r3
 8004e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	18db      	adds	r3, r3, r3
 8004e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e20:	4613      	mov	r3, r2
 8004e22:	eb42 0303 	adc.w	r3, r2, r3
 8004e26:	657b      	str	r3, [r7, #84]	; 0x54
 8004e28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e30:	f7fb fe70 	bl	8000b14 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	011c      	lsls	r4, r3, #4
 8004e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e64:	4641      	mov	r1, r8
 8004e66:	eb12 0a01 	adds.w	sl, r2, r1
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e84:	4692      	mov	sl, r2
 8004e86:	469b      	mov	fp, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e92:	464b      	mov	r3, r9
 8004e94:	eb4b 0303 	adc.w	r3, fp, r3
 8004e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ea8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004eac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	18db      	adds	r3, r3, r3
 8004eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	eb42 0303 	adc.w	r3, r2, r3
 8004ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ec2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ec6:	f7fb fe25 	bl	8000b14 <__aeabi_uldivmod>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2264      	movs	r2, #100	; 0x64
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	1acb      	subs	r3, r1, r3
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ee6:	4b36      	ldr	r3, [pc, #216]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ef4:	441c      	add	r4, r3
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f10:	415b      	adcs	r3, r3
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f18:	4641      	mov	r1, r8
 8004f1a:	1851      	adds	r1, r2, r1
 8004f1c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f1e:	4649      	mov	r1, r9
 8004f20:	414b      	adcs	r3, r1
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f30:	4659      	mov	r1, fp
 8004f32:	00cb      	lsls	r3, r1, #3
 8004f34:	4651      	mov	r1, sl
 8004f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	00ca      	lsls	r2, r1, #3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	4642      	mov	r2, r8
 8004f46:	189b      	adds	r3, r3, r2
 8004f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	460a      	mov	r2, r1
 8004f50:	eb42 0303 	adc.w	r3, r2, r3
 8004f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	18db      	adds	r3, r3, r3
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f72:	4613      	mov	r3, r2
 8004f74:	eb42 0303 	adc.w	r3, r2, r3
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f82:	f7fb fdc7 	bl	8000b14 <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	2164      	movs	r1, #100	; 0x64
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	3332      	adds	r3, #50	; 0x32
 8004f9e:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f003 0207 	and.w	r2, r3, #7
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4422      	add	r2, r4
 8004fb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fb4:	e106      	b.n	80051c4 <UART_SetConfig+0x4d8>
 8004fb6:	bf00      	nop
 8004fb8:	40011000 	.word	0x40011000
 8004fbc:	40011400 	.word	0x40011400
 8004fc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fd6:	4642      	mov	r2, r8
 8004fd8:	464b      	mov	r3, r9
 8004fda:	1891      	adds	r1, r2, r2
 8004fdc:	6239      	str	r1, [r7, #32]
 8004fde:	415b      	adcs	r3, r3
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	1854      	adds	r4, r2, r1
 8004fea:	4649      	mov	r1, r9
 8004fec:	eb43 0501 	adc.w	r5, r3, r1
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	00eb      	lsls	r3, r5, #3
 8004ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffe:	00e2      	lsls	r2, r4, #3
 8005000:	4614      	mov	r4, r2
 8005002:	461d      	mov	r5, r3
 8005004:	4643      	mov	r3, r8
 8005006:	18e3      	adds	r3, r4, r3
 8005008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800500c:	464b      	mov	r3, r9
 800500e:	eb45 0303 	adc.w	r3, r5, r3
 8005012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005032:	4629      	mov	r1, r5
 8005034:	008b      	lsls	r3, r1, #2
 8005036:	4621      	mov	r1, r4
 8005038:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800503c:	4621      	mov	r1, r4
 800503e:	008a      	lsls	r2, r1, #2
 8005040:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005044:	f7fb fd66 	bl	8000b14 <__aeabi_uldivmod>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4b60      	ldr	r3, [pc, #384]	; (80051d0 <UART_SetConfig+0x4e4>)
 800504e:	fba3 2302 	umull	r2, r3, r3, r2
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	011c      	lsls	r4, r3, #4
 8005056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800505a:	2200      	movs	r2, #0
 800505c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005060:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005064:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005068:	4642      	mov	r2, r8
 800506a:	464b      	mov	r3, r9
 800506c:	1891      	adds	r1, r2, r2
 800506e:	61b9      	str	r1, [r7, #24]
 8005070:	415b      	adcs	r3, r3
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005078:	4641      	mov	r1, r8
 800507a:	1851      	adds	r1, r2, r1
 800507c:	6139      	str	r1, [r7, #16]
 800507e:	4649      	mov	r1, r9
 8005080:	414b      	adcs	r3, r1
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005090:	4659      	mov	r1, fp
 8005092:	00cb      	lsls	r3, r1, #3
 8005094:	4651      	mov	r1, sl
 8005096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800509a:	4651      	mov	r1, sl
 800509c:	00ca      	lsls	r2, r1, #3
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	4642      	mov	r2, r8
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050ac:	464b      	mov	r3, r9
 80050ae:	460a      	mov	r2, r1
 80050b0:	eb42 0303 	adc.w	r3, r2, r3
 80050b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80050c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050d0:	4649      	mov	r1, r9
 80050d2:	008b      	lsls	r3, r1, #2
 80050d4:	4641      	mov	r1, r8
 80050d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050da:	4641      	mov	r1, r8
 80050dc:	008a      	lsls	r2, r1, #2
 80050de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050e2:	f7fb fd17 	bl	8000b14 <__aeabi_uldivmod>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	4b38      	ldr	r3, [pc, #224]	; (80051d0 <UART_SetConfig+0x4e4>)
 80050ee:	fba3 2301 	umull	r2, r3, r3, r1
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	2264      	movs	r2, #100	; 0x64
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	1acb      	subs	r3, r1, r3
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	3332      	adds	r3, #50	; 0x32
 8005100:	4a33      	ldr	r2, [pc, #204]	; (80051d0 <UART_SetConfig+0x4e4>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800510c:	441c      	add	r4, r3
 800510e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005112:	2200      	movs	r2, #0
 8005114:	673b      	str	r3, [r7, #112]	; 0x70
 8005116:	677a      	str	r2, [r7, #116]	; 0x74
 8005118:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800511c:	4642      	mov	r2, r8
 800511e:	464b      	mov	r3, r9
 8005120:	1891      	adds	r1, r2, r2
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	415b      	adcs	r3, r3
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800512c:	4641      	mov	r1, r8
 800512e:	1851      	adds	r1, r2, r1
 8005130:	6039      	str	r1, [r7, #0]
 8005132:	4649      	mov	r1, r9
 8005134:	414b      	adcs	r3, r1
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005144:	4659      	mov	r1, fp
 8005146:	00cb      	lsls	r3, r1, #3
 8005148:	4651      	mov	r1, sl
 800514a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800514e:	4651      	mov	r1, sl
 8005150:	00ca      	lsls	r2, r1, #3
 8005152:	4610      	mov	r0, r2
 8005154:	4619      	mov	r1, r3
 8005156:	4603      	mov	r3, r0
 8005158:	4642      	mov	r2, r8
 800515a:	189b      	adds	r3, r3, r2
 800515c:	66bb      	str	r3, [r7, #104]	; 0x68
 800515e:	464b      	mov	r3, r9
 8005160:	460a      	mov	r2, r1
 8005162:	eb42 0303 	adc.w	r3, r2, r3
 8005166:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	663b      	str	r3, [r7, #96]	; 0x60
 8005172:	667a      	str	r2, [r7, #100]	; 0x64
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005180:	4649      	mov	r1, r9
 8005182:	008b      	lsls	r3, r1, #2
 8005184:	4641      	mov	r1, r8
 8005186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800518a:	4641      	mov	r1, r8
 800518c:	008a      	lsls	r2, r1, #2
 800518e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005192:	f7fb fcbf 	bl	8000b14 <__aeabi_uldivmod>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <UART_SetConfig+0x4e4>)
 800519c:	fba3 1302 	umull	r1, r3, r3, r2
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	2164      	movs	r1, #100	; 0x64
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	3332      	adds	r3, #50	; 0x32
 80051ae:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <UART_SetConfig+0x4e4>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	f003 020f 	and.w	r2, r3, #15
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4422      	add	r2, r4
 80051c2:	609a      	str	r2, [r3, #8]
}
 80051c4:	bf00      	nop
 80051c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051ca:	46bd      	mov	sp, r7
 80051cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d0:	51eb851f 	.word	0x51eb851f

080051d4 <memset>:
 80051d4:	4402      	add	r2, r0
 80051d6:	4603      	mov	r3, r0
 80051d8:	4293      	cmp	r3, r2
 80051da:	d100      	bne.n	80051de <memset+0xa>
 80051dc:	4770      	bx	lr
 80051de:	f803 1b01 	strb.w	r1, [r3], #1
 80051e2:	e7f9      	b.n	80051d8 <memset+0x4>

080051e4 <__libc_init_array>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	4d0d      	ldr	r5, [pc, #52]	; (800521c <__libc_init_array+0x38>)
 80051e8:	4c0d      	ldr	r4, [pc, #52]	; (8005220 <__libc_init_array+0x3c>)
 80051ea:	1b64      	subs	r4, r4, r5
 80051ec:	10a4      	asrs	r4, r4, #2
 80051ee:	2600      	movs	r6, #0
 80051f0:	42a6      	cmp	r6, r4
 80051f2:	d109      	bne.n	8005208 <__libc_init_array+0x24>
 80051f4:	4d0b      	ldr	r5, [pc, #44]	; (8005224 <__libc_init_array+0x40>)
 80051f6:	4c0c      	ldr	r4, [pc, #48]	; (8005228 <__libc_init_array+0x44>)
 80051f8:	f001 f85a 	bl	80062b0 <_init>
 80051fc:	1b64      	subs	r4, r4, r5
 80051fe:	10a4      	asrs	r4, r4, #2
 8005200:	2600      	movs	r6, #0
 8005202:	42a6      	cmp	r6, r4
 8005204:	d105      	bne.n	8005212 <__libc_init_array+0x2e>
 8005206:	bd70      	pop	{r4, r5, r6, pc}
 8005208:	f855 3b04 	ldr.w	r3, [r5], #4
 800520c:	4798      	blx	r3
 800520e:	3601      	adds	r6, #1
 8005210:	e7ee      	b.n	80051f0 <__libc_init_array+0xc>
 8005212:	f855 3b04 	ldr.w	r3, [r5], #4
 8005216:	4798      	blx	r3
 8005218:	3601      	adds	r6, #1
 800521a:	e7f2      	b.n	8005202 <__libc_init_array+0x1e>
 800521c:	080064c0 	.word	0x080064c0
 8005220:	080064c0 	.word	0x080064c0
 8005224:	080064c0 	.word	0x080064c0
 8005228:	080064c4 	.word	0x080064c4
 800522c:	00000000 	.word	0x00000000

08005230 <sin>:
 8005230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005232:	ec53 2b10 	vmov	r2, r3, d0
 8005236:	4828      	ldr	r0, [pc, #160]	; (80052d8 <sin+0xa8>)
 8005238:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800523c:	4281      	cmp	r1, r0
 800523e:	dc07      	bgt.n	8005250 <sin+0x20>
 8005240:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80052d0 <sin+0xa0>
 8005244:	2000      	movs	r0, #0
 8005246:	b005      	add	sp, #20
 8005248:	f85d eb04 	ldr.w	lr, [sp], #4
 800524c:	f000 b910 	b.w	8005470 <__kernel_sin>
 8005250:	4822      	ldr	r0, [pc, #136]	; (80052dc <sin+0xac>)
 8005252:	4281      	cmp	r1, r0
 8005254:	dd09      	ble.n	800526a <sin+0x3a>
 8005256:	ee10 0a10 	vmov	r0, s0
 800525a:	4619      	mov	r1, r3
 800525c:	f7fa ffc0 	bl	80001e0 <__aeabi_dsub>
 8005260:	ec41 0b10 	vmov	d0, r0, r1
 8005264:	b005      	add	sp, #20
 8005266:	f85d fb04 	ldr.w	pc, [sp], #4
 800526a:	4668      	mov	r0, sp
 800526c:	f000 f9c0 	bl	80055f0 <__ieee754_rem_pio2>
 8005270:	f000 0003 	and.w	r0, r0, #3
 8005274:	2801      	cmp	r0, #1
 8005276:	d00c      	beq.n	8005292 <sin+0x62>
 8005278:	2802      	cmp	r0, #2
 800527a:	d011      	beq.n	80052a0 <sin+0x70>
 800527c:	b9f0      	cbnz	r0, 80052bc <sin+0x8c>
 800527e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005282:	ed9d 0b00 	vldr	d0, [sp]
 8005286:	2001      	movs	r0, #1
 8005288:	f000 f8f2 	bl	8005470 <__kernel_sin>
 800528c:	ec51 0b10 	vmov	r0, r1, d0
 8005290:	e7e6      	b.n	8005260 <sin+0x30>
 8005292:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005296:	ed9d 0b00 	vldr	d0, [sp]
 800529a:	f000 f821 	bl	80052e0 <__kernel_cos>
 800529e:	e7f5      	b.n	800528c <sin+0x5c>
 80052a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80052a4:	ed9d 0b00 	vldr	d0, [sp]
 80052a8:	2001      	movs	r0, #1
 80052aa:	f000 f8e1 	bl	8005470 <__kernel_sin>
 80052ae:	ec53 2b10 	vmov	r2, r3, d0
 80052b2:	ee10 0a10 	vmov	r0, s0
 80052b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80052ba:	e7d1      	b.n	8005260 <sin+0x30>
 80052bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80052c0:	ed9d 0b00 	vldr	d0, [sp]
 80052c4:	f000 f80c 	bl	80052e0 <__kernel_cos>
 80052c8:	e7f1      	b.n	80052ae <sin+0x7e>
 80052ca:	bf00      	nop
 80052cc:	f3af 8000 	nop.w
	...
 80052d8:	3fe921fb 	.word	0x3fe921fb
 80052dc:	7fefffff 	.word	0x7fefffff

080052e0 <__kernel_cos>:
 80052e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	ec57 6b10 	vmov	r6, r7, d0
 80052e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80052ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80052f0:	ed8d 1b00 	vstr	d1, [sp]
 80052f4:	da07      	bge.n	8005306 <__kernel_cos+0x26>
 80052f6:	ee10 0a10 	vmov	r0, s0
 80052fa:	4639      	mov	r1, r7
 80052fc:	f7fb fbc2 	bl	8000a84 <__aeabi_d2iz>
 8005300:	2800      	cmp	r0, #0
 8005302:	f000 8088 	beq.w	8005416 <__kernel_cos+0x136>
 8005306:	4632      	mov	r2, r6
 8005308:	463b      	mov	r3, r7
 800530a:	4630      	mov	r0, r6
 800530c:	4639      	mov	r1, r7
 800530e:	f7fb f91f 	bl	8000550 <__aeabi_dmul>
 8005312:	4b51      	ldr	r3, [pc, #324]	; (8005458 <__kernel_cos+0x178>)
 8005314:	2200      	movs	r2, #0
 8005316:	4604      	mov	r4, r0
 8005318:	460d      	mov	r5, r1
 800531a:	f7fb f919 	bl	8000550 <__aeabi_dmul>
 800531e:	a340      	add	r3, pc, #256	; (adr r3, 8005420 <__kernel_cos+0x140>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	4682      	mov	sl, r0
 8005326:	468b      	mov	fp, r1
 8005328:	4620      	mov	r0, r4
 800532a:	4629      	mov	r1, r5
 800532c:	f7fb f910 	bl	8000550 <__aeabi_dmul>
 8005330:	a33d      	add	r3, pc, #244	; (adr r3, 8005428 <__kernel_cos+0x148>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f7fa ff55 	bl	80001e4 <__adddf3>
 800533a:	4622      	mov	r2, r4
 800533c:	462b      	mov	r3, r5
 800533e:	f7fb f907 	bl	8000550 <__aeabi_dmul>
 8005342:	a33b      	add	r3, pc, #236	; (adr r3, 8005430 <__kernel_cos+0x150>)
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	f7fa ff4a 	bl	80001e0 <__aeabi_dsub>
 800534c:	4622      	mov	r2, r4
 800534e:	462b      	mov	r3, r5
 8005350:	f7fb f8fe 	bl	8000550 <__aeabi_dmul>
 8005354:	a338      	add	r3, pc, #224	; (adr r3, 8005438 <__kernel_cos+0x158>)
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	f7fa ff43 	bl	80001e4 <__adddf3>
 800535e:	4622      	mov	r2, r4
 8005360:	462b      	mov	r3, r5
 8005362:	f7fb f8f5 	bl	8000550 <__aeabi_dmul>
 8005366:	a336      	add	r3, pc, #216	; (adr r3, 8005440 <__kernel_cos+0x160>)
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	f7fa ff38 	bl	80001e0 <__aeabi_dsub>
 8005370:	4622      	mov	r2, r4
 8005372:	462b      	mov	r3, r5
 8005374:	f7fb f8ec 	bl	8000550 <__aeabi_dmul>
 8005378:	a333      	add	r3, pc, #204	; (adr r3, 8005448 <__kernel_cos+0x168>)
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f7fa ff31 	bl	80001e4 <__adddf3>
 8005382:	4622      	mov	r2, r4
 8005384:	462b      	mov	r3, r5
 8005386:	f7fb f8e3 	bl	8000550 <__aeabi_dmul>
 800538a:	4622      	mov	r2, r4
 800538c:	462b      	mov	r3, r5
 800538e:	f7fb f8df 	bl	8000550 <__aeabi_dmul>
 8005392:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005396:	4604      	mov	r4, r0
 8005398:	460d      	mov	r5, r1
 800539a:	4630      	mov	r0, r6
 800539c:	4639      	mov	r1, r7
 800539e:	f7fb f8d7 	bl	8000550 <__aeabi_dmul>
 80053a2:	460b      	mov	r3, r1
 80053a4:	4602      	mov	r2, r0
 80053a6:	4629      	mov	r1, r5
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7fa ff19 	bl	80001e0 <__aeabi_dsub>
 80053ae:	4b2b      	ldr	r3, [pc, #172]	; (800545c <__kernel_cos+0x17c>)
 80053b0:	4598      	cmp	r8, r3
 80053b2:	4606      	mov	r6, r0
 80053b4:	460f      	mov	r7, r1
 80053b6:	dc10      	bgt.n	80053da <__kernel_cos+0xfa>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4650      	mov	r0, sl
 80053be:	4659      	mov	r1, fp
 80053c0:	f7fa ff0e 	bl	80001e0 <__aeabi_dsub>
 80053c4:	460b      	mov	r3, r1
 80053c6:	4926      	ldr	r1, [pc, #152]	; (8005460 <__kernel_cos+0x180>)
 80053c8:	4602      	mov	r2, r0
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7fa ff08 	bl	80001e0 <__aeabi_dsub>
 80053d0:	ec41 0b10 	vmov	d0, r0, r1
 80053d4:	b003      	add	sp, #12
 80053d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053da:	4b22      	ldr	r3, [pc, #136]	; (8005464 <__kernel_cos+0x184>)
 80053dc:	4920      	ldr	r1, [pc, #128]	; (8005460 <__kernel_cos+0x180>)
 80053de:	4598      	cmp	r8, r3
 80053e0:	bfcc      	ite	gt
 80053e2:	4d21      	ldrgt	r5, [pc, #132]	; (8005468 <__kernel_cos+0x188>)
 80053e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80053e8:	2400      	movs	r4, #0
 80053ea:	4622      	mov	r2, r4
 80053ec:	462b      	mov	r3, r5
 80053ee:	2000      	movs	r0, #0
 80053f0:	f7fa fef6 	bl	80001e0 <__aeabi_dsub>
 80053f4:	4622      	mov	r2, r4
 80053f6:	4680      	mov	r8, r0
 80053f8:	4689      	mov	r9, r1
 80053fa:	462b      	mov	r3, r5
 80053fc:	4650      	mov	r0, sl
 80053fe:	4659      	mov	r1, fp
 8005400:	f7fa feee 	bl	80001e0 <__aeabi_dsub>
 8005404:	4632      	mov	r2, r6
 8005406:	463b      	mov	r3, r7
 8005408:	f7fa feea 	bl	80001e0 <__aeabi_dsub>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4640      	mov	r0, r8
 8005412:	4649      	mov	r1, r9
 8005414:	e7da      	b.n	80053cc <__kernel_cos+0xec>
 8005416:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005450 <__kernel_cos+0x170>
 800541a:	e7db      	b.n	80053d4 <__kernel_cos+0xf4>
 800541c:	f3af 8000 	nop.w
 8005420:	be8838d4 	.word	0xbe8838d4
 8005424:	bda8fae9 	.word	0xbda8fae9
 8005428:	bdb4b1c4 	.word	0xbdb4b1c4
 800542c:	3e21ee9e 	.word	0x3e21ee9e
 8005430:	809c52ad 	.word	0x809c52ad
 8005434:	3e927e4f 	.word	0x3e927e4f
 8005438:	19cb1590 	.word	0x19cb1590
 800543c:	3efa01a0 	.word	0x3efa01a0
 8005440:	16c15177 	.word	0x16c15177
 8005444:	3f56c16c 	.word	0x3f56c16c
 8005448:	5555554c 	.word	0x5555554c
 800544c:	3fa55555 	.word	0x3fa55555
 8005450:	00000000 	.word	0x00000000
 8005454:	3ff00000 	.word	0x3ff00000
 8005458:	3fe00000 	.word	0x3fe00000
 800545c:	3fd33332 	.word	0x3fd33332
 8005460:	3ff00000 	.word	0x3ff00000
 8005464:	3fe90000 	.word	0x3fe90000
 8005468:	3fd20000 	.word	0x3fd20000
 800546c:	00000000 	.word	0x00000000

08005470 <__kernel_sin>:
 8005470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	ed2d 8b04 	vpush	{d8-d9}
 8005478:	eeb0 8a41 	vmov.f32	s16, s2
 800547c:	eef0 8a61 	vmov.f32	s17, s3
 8005480:	ec55 4b10 	vmov	r4, r5, d0
 8005484:	b083      	sub	sp, #12
 8005486:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800548a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800548e:	9001      	str	r0, [sp, #4]
 8005490:	da06      	bge.n	80054a0 <__kernel_sin+0x30>
 8005492:	ee10 0a10 	vmov	r0, s0
 8005496:	4629      	mov	r1, r5
 8005498:	f7fb faf4 	bl	8000a84 <__aeabi_d2iz>
 800549c:	2800      	cmp	r0, #0
 800549e:	d051      	beq.n	8005544 <__kernel_sin+0xd4>
 80054a0:	4622      	mov	r2, r4
 80054a2:	462b      	mov	r3, r5
 80054a4:	4620      	mov	r0, r4
 80054a6:	4629      	mov	r1, r5
 80054a8:	f7fb f852 	bl	8000550 <__aeabi_dmul>
 80054ac:	4682      	mov	sl, r0
 80054ae:	468b      	mov	fp, r1
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4620      	mov	r0, r4
 80054b6:	4629      	mov	r1, r5
 80054b8:	f7fb f84a 	bl	8000550 <__aeabi_dmul>
 80054bc:	a341      	add	r3, pc, #260	; (adr r3, 80055c4 <__kernel_sin+0x154>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	4680      	mov	r8, r0
 80054c4:	4689      	mov	r9, r1
 80054c6:	4650      	mov	r0, sl
 80054c8:	4659      	mov	r1, fp
 80054ca:	f7fb f841 	bl	8000550 <__aeabi_dmul>
 80054ce:	a33f      	add	r3, pc, #252	; (adr r3, 80055cc <__kernel_sin+0x15c>)
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	f7fa fe84 	bl	80001e0 <__aeabi_dsub>
 80054d8:	4652      	mov	r2, sl
 80054da:	465b      	mov	r3, fp
 80054dc:	f7fb f838 	bl	8000550 <__aeabi_dmul>
 80054e0:	a33c      	add	r3, pc, #240	; (adr r3, 80055d4 <__kernel_sin+0x164>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fa fe7d 	bl	80001e4 <__adddf3>
 80054ea:	4652      	mov	r2, sl
 80054ec:	465b      	mov	r3, fp
 80054ee:	f7fb f82f 	bl	8000550 <__aeabi_dmul>
 80054f2:	a33a      	add	r3, pc, #232	; (adr r3, 80055dc <__kernel_sin+0x16c>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f7fa fe72 	bl	80001e0 <__aeabi_dsub>
 80054fc:	4652      	mov	r2, sl
 80054fe:	465b      	mov	r3, fp
 8005500:	f7fb f826 	bl	8000550 <__aeabi_dmul>
 8005504:	a337      	add	r3, pc, #220	; (adr r3, 80055e4 <__kernel_sin+0x174>)
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f7fa fe6b 	bl	80001e4 <__adddf3>
 800550e:	9b01      	ldr	r3, [sp, #4]
 8005510:	4606      	mov	r6, r0
 8005512:	460f      	mov	r7, r1
 8005514:	b9eb      	cbnz	r3, 8005552 <__kernel_sin+0xe2>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4650      	mov	r0, sl
 800551c:	4659      	mov	r1, fp
 800551e:	f7fb f817 	bl	8000550 <__aeabi_dmul>
 8005522:	a325      	add	r3, pc, #148	; (adr r3, 80055b8 <__kernel_sin+0x148>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f7fa fe5a 	bl	80001e0 <__aeabi_dsub>
 800552c:	4642      	mov	r2, r8
 800552e:	464b      	mov	r3, r9
 8005530:	f7fb f80e 	bl	8000550 <__aeabi_dmul>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4620      	mov	r0, r4
 800553a:	4629      	mov	r1, r5
 800553c:	f7fa fe52 	bl	80001e4 <__adddf3>
 8005540:	4604      	mov	r4, r0
 8005542:	460d      	mov	r5, r1
 8005544:	ec45 4b10 	vmov	d0, r4, r5
 8005548:	b003      	add	sp, #12
 800554a:	ecbd 8b04 	vpop	{d8-d9}
 800554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005552:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <__kernel_sin+0x150>)
 8005554:	ec51 0b18 	vmov	r0, r1, d8
 8005558:	2200      	movs	r2, #0
 800555a:	f7fa fff9 	bl	8000550 <__aeabi_dmul>
 800555e:	4632      	mov	r2, r6
 8005560:	ec41 0b19 	vmov	d9, r0, r1
 8005564:	463b      	mov	r3, r7
 8005566:	4640      	mov	r0, r8
 8005568:	4649      	mov	r1, r9
 800556a:	f7fa fff1 	bl	8000550 <__aeabi_dmul>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	ec51 0b19 	vmov	r0, r1, d9
 8005576:	f7fa fe33 	bl	80001e0 <__aeabi_dsub>
 800557a:	4652      	mov	r2, sl
 800557c:	465b      	mov	r3, fp
 800557e:	f7fa ffe7 	bl	8000550 <__aeabi_dmul>
 8005582:	ec53 2b18 	vmov	r2, r3, d8
 8005586:	f7fa fe2b 	bl	80001e0 <__aeabi_dsub>
 800558a:	a30b      	add	r3, pc, #44	; (adr r3, 80055b8 <__kernel_sin+0x148>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	4606      	mov	r6, r0
 8005592:	460f      	mov	r7, r1
 8005594:	4640      	mov	r0, r8
 8005596:	4649      	mov	r1, r9
 8005598:	f7fa ffda 	bl	8000550 <__aeabi_dmul>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4630      	mov	r0, r6
 80055a2:	4639      	mov	r1, r7
 80055a4:	f7fa fe1e 	bl	80001e4 <__adddf3>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4620      	mov	r0, r4
 80055ae:	4629      	mov	r1, r5
 80055b0:	f7fa fe16 	bl	80001e0 <__aeabi_dsub>
 80055b4:	e7c4      	b.n	8005540 <__kernel_sin+0xd0>
 80055b6:	bf00      	nop
 80055b8:	55555549 	.word	0x55555549
 80055bc:	3fc55555 	.word	0x3fc55555
 80055c0:	3fe00000 	.word	0x3fe00000
 80055c4:	5acfd57c 	.word	0x5acfd57c
 80055c8:	3de5d93a 	.word	0x3de5d93a
 80055cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80055d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80055d4:	57b1fe7d 	.word	0x57b1fe7d
 80055d8:	3ec71de3 	.word	0x3ec71de3
 80055dc:	19c161d5 	.word	0x19c161d5
 80055e0:	3f2a01a0 	.word	0x3f2a01a0
 80055e4:	1110f8a6 	.word	0x1110f8a6
 80055e8:	3f811111 	.word	0x3f811111
 80055ec:	00000000 	.word	0x00000000

080055f0 <__ieee754_rem_pio2>:
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	ed2d 8b02 	vpush	{d8}
 80055f8:	ec55 4b10 	vmov	r4, r5, d0
 80055fc:	4bca      	ldr	r3, [pc, #808]	; (8005928 <__ieee754_rem_pio2+0x338>)
 80055fe:	b08b      	sub	sp, #44	; 0x2c
 8005600:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005604:	4598      	cmp	r8, r3
 8005606:	4682      	mov	sl, r0
 8005608:	9502      	str	r5, [sp, #8]
 800560a:	dc08      	bgt.n	800561e <__ieee754_rem_pio2+0x2e>
 800560c:	2200      	movs	r2, #0
 800560e:	2300      	movs	r3, #0
 8005610:	ed80 0b00 	vstr	d0, [r0]
 8005614:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005618:	f04f 0b00 	mov.w	fp, #0
 800561c:	e028      	b.n	8005670 <__ieee754_rem_pio2+0x80>
 800561e:	4bc3      	ldr	r3, [pc, #780]	; (800592c <__ieee754_rem_pio2+0x33c>)
 8005620:	4598      	cmp	r8, r3
 8005622:	dc78      	bgt.n	8005716 <__ieee754_rem_pio2+0x126>
 8005624:	9b02      	ldr	r3, [sp, #8]
 8005626:	4ec2      	ldr	r6, [pc, #776]	; (8005930 <__ieee754_rem_pio2+0x340>)
 8005628:	2b00      	cmp	r3, #0
 800562a:	ee10 0a10 	vmov	r0, s0
 800562e:	a3b0      	add	r3, pc, #704	; (adr r3, 80058f0 <__ieee754_rem_pio2+0x300>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	4629      	mov	r1, r5
 8005636:	dd39      	ble.n	80056ac <__ieee754_rem_pio2+0xbc>
 8005638:	f7fa fdd2 	bl	80001e0 <__aeabi_dsub>
 800563c:	45b0      	cmp	r8, r6
 800563e:	4604      	mov	r4, r0
 8005640:	460d      	mov	r5, r1
 8005642:	d01b      	beq.n	800567c <__ieee754_rem_pio2+0x8c>
 8005644:	a3ac      	add	r3, pc, #688	; (adr r3, 80058f8 <__ieee754_rem_pio2+0x308>)
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	f7fa fdc9 	bl	80001e0 <__aeabi_dsub>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	e9ca 2300 	strd	r2, r3, [sl]
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fa fdc1 	bl	80001e0 <__aeabi_dsub>
 800565e:	a3a6      	add	r3, pc, #664	; (adr r3, 80058f8 <__ieee754_rem_pio2+0x308>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f7fa fdbc 	bl	80001e0 <__aeabi_dsub>
 8005668:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800566c:	f04f 0b01 	mov.w	fp, #1
 8005670:	4658      	mov	r0, fp
 8005672:	b00b      	add	sp, #44	; 0x2c
 8005674:	ecbd 8b02 	vpop	{d8}
 8005678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005900 <__ieee754_rem_pio2+0x310>)
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	f7fa fdad 	bl	80001e0 <__aeabi_dsub>
 8005686:	a3a0      	add	r3, pc, #640	; (adr r3, 8005908 <__ieee754_rem_pio2+0x318>)
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	4604      	mov	r4, r0
 800568e:	460d      	mov	r5, r1
 8005690:	f7fa fda6 	bl	80001e0 <__aeabi_dsub>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	e9ca 2300 	strd	r2, r3, [sl]
 800569c:	4620      	mov	r0, r4
 800569e:	4629      	mov	r1, r5
 80056a0:	f7fa fd9e 	bl	80001e0 <__aeabi_dsub>
 80056a4:	a398      	add	r3, pc, #608	; (adr r3, 8005908 <__ieee754_rem_pio2+0x318>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	e7db      	b.n	8005664 <__ieee754_rem_pio2+0x74>
 80056ac:	f7fa fd9a 	bl	80001e4 <__adddf3>
 80056b0:	45b0      	cmp	r8, r6
 80056b2:	4604      	mov	r4, r0
 80056b4:	460d      	mov	r5, r1
 80056b6:	d016      	beq.n	80056e6 <__ieee754_rem_pio2+0xf6>
 80056b8:	a38f      	add	r3, pc, #572	; (adr r3, 80058f8 <__ieee754_rem_pio2+0x308>)
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f7fa fd91 	bl	80001e4 <__adddf3>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	e9ca 2300 	strd	r2, r3, [sl]
 80056ca:	4620      	mov	r0, r4
 80056cc:	4629      	mov	r1, r5
 80056ce:	f7fa fd87 	bl	80001e0 <__aeabi_dsub>
 80056d2:	a389      	add	r3, pc, #548	; (adr r3, 80058f8 <__ieee754_rem_pio2+0x308>)
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f7fa fd84 	bl	80001e4 <__adddf3>
 80056dc:	f04f 3bff 	mov.w	fp, #4294967295
 80056e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80056e4:	e7c4      	b.n	8005670 <__ieee754_rem_pio2+0x80>
 80056e6:	a386      	add	r3, pc, #536	; (adr r3, 8005900 <__ieee754_rem_pio2+0x310>)
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f7fa fd7a 	bl	80001e4 <__adddf3>
 80056f0:	a385      	add	r3, pc, #532	; (adr r3, 8005908 <__ieee754_rem_pio2+0x318>)
 80056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f6:	4604      	mov	r4, r0
 80056f8:	460d      	mov	r5, r1
 80056fa:	f7fa fd73 	bl	80001e4 <__adddf3>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	e9ca 2300 	strd	r2, r3, [sl]
 8005706:	4620      	mov	r0, r4
 8005708:	4629      	mov	r1, r5
 800570a:	f7fa fd69 	bl	80001e0 <__aeabi_dsub>
 800570e:	a37e      	add	r3, pc, #504	; (adr r3, 8005908 <__ieee754_rem_pio2+0x318>)
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	e7e0      	b.n	80056d8 <__ieee754_rem_pio2+0xe8>
 8005716:	4b87      	ldr	r3, [pc, #540]	; (8005934 <__ieee754_rem_pio2+0x344>)
 8005718:	4598      	cmp	r8, r3
 800571a:	f300 80d8 	bgt.w	80058ce <__ieee754_rem_pio2+0x2de>
 800571e:	f000 f96d 	bl	80059fc <fabs>
 8005722:	ec55 4b10 	vmov	r4, r5, d0
 8005726:	ee10 0a10 	vmov	r0, s0
 800572a:	a379      	add	r3, pc, #484	; (adr r3, 8005910 <__ieee754_rem_pio2+0x320>)
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	4629      	mov	r1, r5
 8005732:	f7fa ff0d 	bl	8000550 <__aeabi_dmul>
 8005736:	4b80      	ldr	r3, [pc, #512]	; (8005938 <__ieee754_rem_pio2+0x348>)
 8005738:	2200      	movs	r2, #0
 800573a:	f7fa fd53 	bl	80001e4 <__adddf3>
 800573e:	f7fb f9a1 	bl	8000a84 <__aeabi_d2iz>
 8005742:	4683      	mov	fp, r0
 8005744:	f7fa fe9a 	bl	800047c <__aeabi_i2d>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	ec43 2b18 	vmov	d8, r2, r3
 8005750:	a367      	add	r3, pc, #412	; (adr r3, 80058f0 <__ieee754_rem_pio2+0x300>)
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	f7fa fefb 	bl	8000550 <__aeabi_dmul>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4620      	mov	r0, r4
 8005760:	4629      	mov	r1, r5
 8005762:	f7fa fd3d 	bl	80001e0 <__aeabi_dsub>
 8005766:	a364      	add	r3, pc, #400	; (adr r3, 80058f8 <__ieee754_rem_pio2+0x308>)
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	4606      	mov	r6, r0
 800576e:	460f      	mov	r7, r1
 8005770:	ec51 0b18 	vmov	r0, r1, d8
 8005774:	f7fa feec 	bl	8000550 <__aeabi_dmul>
 8005778:	f1bb 0f1f 	cmp.w	fp, #31
 800577c:	4604      	mov	r4, r0
 800577e:	460d      	mov	r5, r1
 8005780:	dc0d      	bgt.n	800579e <__ieee754_rem_pio2+0x1ae>
 8005782:	4b6e      	ldr	r3, [pc, #440]	; (800593c <__ieee754_rem_pio2+0x34c>)
 8005784:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578c:	4543      	cmp	r3, r8
 800578e:	d006      	beq.n	800579e <__ieee754_rem_pio2+0x1ae>
 8005790:	4622      	mov	r2, r4
 8005792:	462b      	mov	r3, r5
 8005794:	4630      	mov	r0, r6
 8005796:	4639      	mov	r1, r7
 8005798:	f7fa fd22 	bl	80001e0 <__aeabi_dsub>
 800579c:	e00e      	b.n	80057bc <__ieee754_rem_pio2+0x1cc>
 800579e:	462b      	mov	r3, r5
 80057a0:	4622      	mov	r2, r4
 80057a2:	4630      	mov	r0, r6
 80057a4:	4639      	mov	r1, r7
 80057a6:	f7fa fd1b 	bl	80001e0 <__aeabi_dsub>
 80057aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80057ae:	9303      	str	r3, [sp, #12]
 80057b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80057b4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	dc02      	bgt.n	80057c2 <__ieee754_rem_pio2+0x1d2>
 80057bc:	e9ca 0100 	strd	r0, r1, [sl]
 80057c0:	e039      	b.n	8005836 <__ieee754_rem_pio2+0x246>
 80057c2:	a34f      	add	r3, pc, #316	; (adr r3, 8005900 <__ieee754_rem_pio2+0x310>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	ec51 0b18 	vmov	r0, r1, d8
 80057cc:	f7fa fec0 	bl	8000550 <__aeabi_dmul>
 80057d0:	4604      	mov	r4, r0
 80057d2:	460d      	mov	r5, r1
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4630      	mov	r0, r6
 80057da:	4639      	mov	r1, r7
 80057dc:	f7fa fd00 	bl	80001e0 <__aeabi_dsub>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4680      	mov	r8, r0
 80057e6:	4689      	mov	r9, r1
 80057e8:	4630      	mov	r0, r6
 80057ea:	4639      	mov	r1, r7
 80057ec:	f7fa fcf8 	bl	80001e0 <__aeabi_dsub>
 80057f0:	4622      	mov	r2, r4
 80057f2:	462b      	mov	r3, r5
 80057f4:	f7fa fcf4 	bl	80001e0 <__aeabi_dsub>
 80057f8:	a343      	add	r3, pc, #268	; (adr r3, 8005908 <__ieee754_rem_pio2+0x318>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	4604      	mov	r4, r0
 8005800:	460d      	mov	r5, r1
 8005802:	ec51 0b18 	vmov	r0, r1, d8
 8005806:	f7fa fea3 	bl	8000550 <__aeabi_dmul>
 800580a:	4622      	mov	r2, r4
 800580c:	462b      	mov	r3, r5
 800580e:	f7fa fce7 	bl	80001e0 <__aeabi_dsub>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4604      	mov	r4, r0
 8005818:	460d      	mov	r5, r1
 800581a:	4640      	mov	r0, r8
 800581c:	4649      	mov	r1, r9
 800581e:	f7fa fcdf 	bl	80001e0 <__aeabi_dsub>
 8005822:	9a03      	ldr	r2, [sp, #12]
 8005824:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b31      	cmp	r3, #49	; 0x31
 800582c:	dc24      	bgt.n	8005878 <__ieee754_rem_pio2+0x288>
 800582e:	e9ca 0100 	strd	r0, r1, [sl]
 8005832:	4646      	mov	r6, r8
 8005834:	464f      	mov	r7, r9
 8005836:	e9da 8900 	ldrd	r8, r9, [sl]
 800583a:	4630      	mov	r0, r6
 800583c:	4642      	mov	r2, r8
 800583e:	464b      	mov	r3, r9
 8005840:	4639      	mov	r1, r7
 8005842:	f7fa fccd 	bl	80001e0 <__aeabi_dsub>
 8005846:	462b      	mov	r3, r5
 8005848:	4622      	mov	r2, r4
 800584a:	f7fa fcc9 	bl	80001e0 <__aeabi_dsub>
 800584e:	9b02      	ldr	r3, [sp, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005856:	f6bf af0b 	bge.w	8005670 <__ieee754_rem_pio2+0x80>
 800585a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800585e:	f8ca 3004 	str.w	r3, [sl, #4]
 8005862:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005866:	f8ca 8000 	str.w	r8, [sl]
 800586a:	f8ca 0008 	str.w	r0, [sl, #8]
 800586e:	f8ca 300c 	str.w	r3, [sl, #12]
 8005872:	f1cb 0b00 	rsb	fp, fp, #0
 8005876:	e6fb      	b.n	8005670 <__ieee754_rem_pio2+0x80>
 8005878:	a327      	add	r3, pc, #156	; (adr r3, 8005918 <__ieee754_rem_pio2+0x328>)
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	ec51 0b18 	vmov	r0, r1, d8
 8005882:	f7fa fe65 	bl	8000550 <__aeabi_dmul>
 8005886:	4604      	mov	r4, r0
 8005888:	460d      	mov	r5, r1
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4640      	mov	r0, r8
 8005890:	4649      	mov	r1, r9
 8005892:	f7fa fca5 	bl	80001e0 <__aeabi_dsub>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4606      	mov	r6, r0
 800589c:	460f      	mov	r7, r1
 800589e:	4640      	mov	r0, r8
 80058a0:	4649      	mov	r1, r9
 80058a2:	f7fa fc9d 	bl	80001e0 <__aeabi_dsub>
 80058a6:	4622      	mov	r2, r4
 80058a8:	462b      	mov	r3, r5
 80058aa:	f7fa fc99 	bl	80001e0 <__aeabi_dsub>
 80058ae:	a31c      	add	r3, pc, #112	; (adr r3, 8005920 <__ieee754_rem_pio2+0x330>)
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	4604      	mov	r4, r0
 80058b6:	460d      	mov	r5, r1
 80058b8:	ec51 0b18 	vmov	r0, r1, d8
 80058bc:	f7fa fe48 	bl	8000550 <__aeabi_dmul>
 80058c0:	4622      	mov	r2, r4
 80058c2:	462b      	mov	r3, r5
 80058c4:	f7fa fc8c 	bl	80001e0 <__aeabi_dsub>
 80058c8:	4604      	mov	r4, r0
 80058ca:	460d      	mov	r5, r1
 80058cc:	e760      	b.n	8005790 <__ieee754_rem_pio2+0x1a0>
 80058ce:	4b1c      	ldr	r3, [pc, #112]	; (8005940 <__ieee754_rem_pio2+0x350>)
 80058d0:	4598      	cmp	r8, r3
 80058d2:	dd37      	ble.n	8005944 <__ieee754_rem_pio2+0x354>
 80058d4:	ee10 2a10 	vmov	r2, s0
 80058d8:	462b      	mov	r3, r5
 80058da:	4620      	mov	r0, r4
 80058dc:	4629      	mov	r1, r5
 80058de:	f7fa fc7f 	bl	80001e0 <__aeabi_dsub>
 80058e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80058e6:	e9ca 0100 	strd	r0, r1, [sl]
 80058ea:	e695      	b.n	8005618 <__ieee754_rem_pio2+0x28>
 80058ec:	f3af 8000 	nop.w
 80058f0:	54400000 	.word	0x54400000
 80058f4:	3ff921fb 	.word	0x3ff921fb
 80058f8:	1a626331 	.word	0x1a626331
 80058fc:	3dd0b461 	.word	0x3dd0b461
 8005900:	1a600000 	.word	0x1a600000
 8005904:	3dd0b461 	.word	0x3dd0b461
 8005908:	2e037073 	.word	0x2e037073
 800590c:	3ba3198a 	.word	0x3ba3198a
 8005910:	6dc9c883 	.word	0x6dc9c883
 8005914:	3fe45f30 	.word	0x3fe45f30
 8005918:	2e000000 	.word	0x2e000000
 800591c:	3ba3198a 	.word	0x3ba3198a
 8005920:	252049c1 	.word	0x252049c1
 8005924:	397b839a 	.word	0x397b839a
 8005928:	3fe921fb 	.word	0x3fe921fb
 800592c:	4002d97b 	.word	0x4002d97b
 8005930:	3ff921fb 	.word	0x3ff921fb
 8005934:	413921fb 	.word	0x413921fb
 8005938:	3fe00000 	.word	0x3fe00000
 800593c:	080062e0 	.word	0x080062e0
 8005940:	7fefffff 	.word	0x7fefffff
 8005944:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005948:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800594c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005950:	4620      	mov	r0, r4
 8005952:	460d      	mov	r5, r1
 8005954:	f7fb f896 	bl	8000a84 <__aeabi_d2iz>
 8005958:	f7fa fd90 	bl	800047c <__aeabi_i2d>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4620      	mov	r0, r4
 8005962:	4629      	mov	r1, r5
 8005964:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005968:	f7fa fc3a 	bl	80001e0 <__aeabi_dsub>
 800596c:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <__ieee754_rem_pio2+0x404>)
 800596e:	2200      	movs	r2, #0
 8005970:	f7fa fdee 	bl	8000550 <__aeabi_dmul>
 8005974:	460d      	mov	r5, r1
 8005976:	4604      	mov	r4, r0
 8005978:	f7fb f884 	bl	8000a84 <__aeabi_d2iz>
 800597c:	f7fa fd7e 	bl	800047c <__aeabi_i2d>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4620      	mov	r0, r4
 8005986:	4629      	mov	r1, r5
 8005988:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800598c:	f7fa fc28 	bl	80001e0 <__aeabi_dsub>
 8005990:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <__ieee754_rem_pio2+0x404>)
 8005992:	2200      	movs	r2, #0
 8005994:	f7fa fddc 	bl	8000550 <__aeabi_dmul>
 8005998:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800599c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80059a0:	2703      	movs	r7, #3
 80059a2:	2400      	movs	r4, #0
 80059a4:	2500      	movs	r5, #0
 80059a6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80059aa:	4622      	mov	r2, r4
 80059ac:	462b      	mov	r3, r5
 80059ae:	46b9      	mov	r9, r7
 80059b0:	3f01      	subs	r7, #1
 80059b2:	f7fb f835 	bl	8000a20 <__aeabi_dcmpeq>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d1f5      	bne.n	80059a6 <__ieee754_rem_pio2+0x3b6>
 80059ba:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <__ieee754_rem_pio2+0x408>)
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	2302      	movs	r3, #2
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	4632      	mov	r2, r6
 80059c4:	464b      	mov	r3, r9
 80059c6:	4651      	mov	r1, sl
 80059c8:	a804      	add	r0, sp, #16
 80059ca:	f000 f821 	bl	8005a10 <__kernel_rem_pio2>
 80059ce:	9b02      	ldr	r3, [sp, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	4683      	mov	fp, r0
 80059d4:	f6bf ae4c 	bge.w	8005670 <__ieee754_rem_pio2+0x80>
 80059d8:	e9da 2100 	ldrd	r2, r1, [sl]
 80059dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059e0:	e9ca 2300 	strd	r2, r3, [sl]
 80059e4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80059e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059ec:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80059f0:	e73f      	b.n	8005872 <__ieee754_rem_pio2+0x282>
 80059f2:	bf00      	nop
 80059f4:	41700000 	.word	0x41700000
 80059f8:	08006360 	.word	0x08006360

080059fc <fabs>:
 80059fc:	ec51 0b10 	vmov	r0, r1, d0
 8005a00:	ee10 2a10 	vmov	r2, s0
 8005a04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a08:	ec43 2b10 	vmov	d0, r2, r3
 8005a0c:	4770      	bx	lr
	...

08005a10 <__kernel_rem_pio2>:
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	ed2d 8b02 	vpush	{d8}
 8005a18:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005a1c:	f112 0f14 	cmn.w	r2, #20
 8005a20:	9306      	str	r3, [sp, #24]
 8005a22:	9104      	str	r1, [sp, #16]
 8005a24:	4bc2      	ldr	r3, [pc, #776]	; (8005d30 <__kernel_rem_pio2+0x320>)
 8005a26:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005a28:	9009      	str	r0, [sp, #36]	; 0x24
 8005a2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	9b06      	ldr	r3, [sp, #24]
 8005a32:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a36:	bfa8      	it	ge
 8005a38:	1ed4      	subge	r4, r2, #3
 8005a3a:	9305      	str	r3, [sp, #20]
 8005a3c:	bfb2      	itee	lt
 8005a3e:	2400      	movlt	r4, #0
 8005a40:	2318      	movge	r3, #24
 8005a42:	fb94 f4f3 	sdivge	r4, r4, r3
 8005a46:	f06f 0317 	mvn.w	r3, #23
 8005a4a:	fb04 3303 	mla	r3, r4, r3, r3
 8005a4e:	eb03 0a02 	add.w	sl, r3, r2
 8005a52:	9b00      	ldr	r3, [sp, #0]
 8005a54:	9a05      	ldr	r2, [sp, #20]
 8005a56:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8005d20 <__kernel_rem_pio2+0x310>
 8005a5a:	eb03 0802 	add.w	r8, r3, r2
 8005a5e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005a60:	1aa7      	subs	r7, r4, r2
 8005a62:	ae20      	add	r6, sp, #128	; 0x80
 8005a64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005a68:	2500      	movs	r5, #0
 8005a6a:	4545      	cmp	r5, r8
 8005a6c:	dd13      	ble.n	8005a96 <__kernel_rem_pio2+0x86>
 8005a6e:	9b06      	ldr	r3, [sp, #24]
 8005a70:	aa20      	add	r2, sp, #128	; 0x80
 8005a72:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005a76:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005a7a:	f04f 0800 	mov.w	r8, #0
 8005a7e:	9b00      	ldr	r3, [sp, #0]
 8005a80:	4598      	cmp	r8, r3
 8005a82:	dc31      	bgt.n	8005ae8 <__kernel_rem_pio2+0xd8>
 8005a84:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005d20 <__kernel_rem_pio2+0x310>
 8005a88:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005a8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a90:	462f      	mov	r7, r5
 8005a92:	2600      	movs	r6, #0
 8005a94:	e01b      	b.n	8005ace <__kernel_rem_pio2+0xbe>
 8005a96:	42ef      	cmn	r7, r5
 8005a98:	d407      	bmi.n	8005aaa <__kernel_rem_pio2+0x9a>
 8005a9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005a9e:	f7fa fced 	bl	800047c <__aeabi_i2d>
 8005aa2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005aa6:	3501      	adds	r5, #1
 8005aa8:	e7df      	b.n	8005a6a <__kernel_rem_pio2+0x5a>
 8005aaa:	ec51 0b18 	vmov	r0, r1, d8
 8005aae:	e7f8      	b.n	8005aa2 <__kernel_rem_pio2+0x92>
 8005ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ab4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005ab8:	f7fa fd4a 	bl	8000550 <__aeabi_dmul>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ac4:	f7fa fb8e 	bl	80001e4 <__adddf3>
 8005ac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005acc:	3601      	adds	r6, #1
 8005ace:	9b05      	ldr	r3, [sp, #20]
 8005ad0:	429e      	cmp	r6, r3
 8005ad2:	f1a7 0708 	sub.w	r7, r7, #8
 8005ad6:	ddeb      	ble.n	8005ab0 <__kernel_rem_pio2+0xa0>
 8005ad8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005adc:	f108 0801 	add.w	r8, r8, #1
 8005ae0:	ecab 7b02 	vstmia	fp!, {d7}
 8005ae4:	3508      	adds	r5, #8
 8005ae6:	e7ca      	b.n	8005a7e <__kernel_rem_pio2+0x6e>
 8005ae8:	9b00      	ldr	r3, [sp, #0]
 8005aea:	aa0c      	add	r2, sp, #48	; 0x30
 8005aec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005af0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005af2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005af4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005af8:	9c00      	ldr	r4, [sp, #0]
 8005afa:	930a      	str	r3, [sp, #40]	; 0x28
 8005afc:	00e3      	lsls	r3, r4, #3
 8005afe:	9308      	str	r3, [sp, #32]
 8005b00:	ab98      	add	r3, sp, #608	; 0x260
 8005b02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b06:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005b0a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005b0e:	ab70      	add	r3, sp, #448	; 0x1c0
 8005b10:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005b14:	46c3      	mov	fp, r8
 8005b16:	46a1      	mov	r9, r4
 8005b18:	f1b9 0f00 	cmp.w	r9, #0
 8005b1c:	f1a5 0508 	sub.w	r5, r5, #8
 8005b20:	dc77      	bgt.n	8005c12 <__kernel_rem_pio2+0x202>
 8005b22:	ec47 6b10 	vmov	d0, r6, r7
 8005b26:	4650      	mov	r0, sl
 8005b28:	f000 fac2 	bl	80060b0 <scalbn>
 8005b2c:	ec57 6b10 	vmov	r6, r7, d0
 8005b30:	2200      	movs	r2, #0
 8005b32:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005b36:	ee10 0a10 	vmov	r0, s0
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	f7fa fd08 	bl	8000550 <__aeabi_dmul>
 8005b40:	ec41 0b10 	vmov	d0, r0, r1
 8005b44:	f000 fb34 	bl	80061b0 <floor>
 8005b48:	4b7a      	ldr	r3, [pc, #488]	; (8005d34 <__kernel_rem_pio2+0x324>)
 8005b4a:	ec51 0b10 	vmov	r0, r1, d0
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f7fa fcfe 	bl	8000550 <__aeabi_dmul>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4630      	mov	r0, r6
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	f7fa fb40 	bl	80001e0 <__aeabi_dsub>
 8005b60:	460f      	mov	r7, r1
 8005b62:	4606      	mov	r6, r0
 8005b64:	f7fa ff8e 	bl	8000a84 <__aeabi_d2iz>
 8005b68:	9002      	str	r0, [sp, #8]
 8005b6a:	f7fa fc87 	bl	800047c <__aeabi_i2d>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4630      	mov	r0, r6
 8005b74:	4639      	mov	r1, r7
 8005b76:	f7fa fb33 	bl	80001e0 <__aeabi_dsub>
 8005b7a:	f1ba 0f00 	cmp.w	sl, #0
 8005b7e:	4606      	mov	r6, r0
 8005b80:	460f      	mov	r7, r1
 8005b82:	dd6d      	ble.n	8005c60 <__kernel_rem_pio2+0x250>
 8005b84:	1e61      	subs	r1, r4, #1
 8005b86:	ab0c      	add	r3, sp, #48	; 0x30
 8005b88:	9d02      	ldr	r5, [sp, #8]
 8005b8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b8e:	f1ca 0018 	rsb	r0, sl, #24
 8005b92:	fa43 f200 	asr.w	r2, r3, r0
 8005b96:	4415      	add	r5, r2
 8005b98:	4082      	lsls	r2, r0
 8005b9a:	1a9b      	subs	r3, r3, r2
 8005b9c:	aa0c      	add	r2, sp, #48	; 0x30
 8005b9e:	9502      	str	r5, [sp, #8]
 8005ba0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005ba4:	f1ca 0217 	rsb	r2, sl, #23
 8005ba8:	fa43 fb02 	asr.w	fp, r3, r2
 8005bac:	f1bb 0f00 	cmp.w	fp, #0
 8005bb0:	dd65      	ble.n	8005c7e <__kernel_rem_pio2+0x26e>
 8005bb2:	9b02      	ldr	r3, [sp, #8]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	9302      	str	r3, [sp, #8]
 8005bba:	4615      	mov	r5, r2
 8005bbc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005bc0:	4294      	cmp	r4, r2
 8005bc2:	f300 809f 	bgt.w	8005d04 <__kernel_rem_pio2+0x2f4>
 8005bc6:	f1ba 0f00 	cmp.w	sl, #0
 8005bca:	dd07      	ble.n	8005bdc <__kernel_rem_pio2+0x1cc>
 8005bcc:	f1ba 0f01 	cmp.w	sl, #1
 8005bd0:	f000 80c1 	beq.w	8005d56 <__kernel_rem_pio2+0x346>
 8005bd4:	f1ba 0f02 	cmp.w	sl, #2
 8005bd8:	f000 80c7 	beq.w	8005d6a <__kernel_rem_pio2+0x35a>
 8005bdc:	f1bb 0f02 	cmp.w	fp, #2
 8005be0:	d14d      	bne.n	8005c7e <__kernel_rem_pio2+0x26e>
 8005be2:	4632      	mov	r2, r6
 8005be4:	463b      	mov	r3, r7
 8005be6:	4954      	ldr	r1, [pc, #336]	; (8005d38 <__kernel_rem_pio2+0x328>)
 8005be8:	2000      	movs	r0, #0
 8005bea:	f7fa faf9 	bl	80001e0 <__aeabi_dsub>
 8005bee:	4606      	mov	r6, r0
 8005bf0:	460f      	mov	r7, r1
 8005bf2:	2d00      	cmp	r5, #0
 8005bf4:	d043      	beq.n	8005c7e <__kernel_rem_pio2+0x26e>
 8005bf6:	4650      	mov	r0, sl
 8005bf8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8005d28 <__kernel_rem_pio2+0x318>
 8005bfc:	f000 fa58 	bl	80060b0 <scalbn>
 8005c00:	4630      	mov	r0, r6
 8005c02:	4639      	mov	r1, r7
 8005c04:	ec53 2b10 	vmov	r2, r3, d0
 8005c08:	f7fa faea 	bl	80001e0 <__aeabi_dsub>
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	460f      	mov	r7, r1
 8005c10:	e035      	b.n	8005c7e <__kernel_rem_pio2+0x26e>
 8005c12:	4b4a      	ldr	r3, [pc, #296]	; (8005d3c <__kernel_rem_pio2+0x32c>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	4630      	mov	r0, r6
 8005c18:	4639      	mov	r1, r7
 8005c1a:	f7fa fc99 	bl	8000550 <__aeabi_dmul>
 8005c1e:	f7fa ff31 	bl	8000a84 <__aeabi_d2iz>
 8005c22:	f7fa fc2b 	bl	800047c <__aeabi_i2d>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	ec43 2b18 	vmov	d8, r2, r3
 8005c2e:	4b44      	ldr	r3, [pc, #272]	; (8005d40 <__kernel_rem_pio2+0x330>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	f7fa fc8d 	bl	8000550 <__aeabi_dmul>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	4639      	mov	r1, r7
 8005c3e:	f7fa facf 	bl	80001e0 <__aeabi_dsub>
 8005c42:	f7fa ff1f 	bl	8000a84 <__aeabi_d2iz>
 8005c46:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c4a:	f84b 0b04 	str.w	r0, [fp], #4
 8005c4e:	ec51 0b18 	vmov	r0, r1, d8
 8005c52:	f7fa fac7 	bl	80001e4 <__adddf3>
 8005c56:	f109 39ff 	add.w	r9, r9, #4294967295
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	460f      	mov	r7, r1
 8005c5e:	e75b      	b.n	8005b18 <__kernel_rem_pio2+0x108>
 8005c60:	d106      	bne.n	8005c70 <__kernel_rem_pio2+0x260>
 8005c62:	1e63      	subs	r3, r4, #1
 8005c64:	aa0c      	add	r2, sp, #48	; 0x30
 8005c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8005c6e:	e79d      	b.n	8005bac <__kernel_rem_pio2+0x19c>
 8005c70:	4b34      	ldr	r3, [pc, #208]	; (8005d44 <__kernel_rem_pio2+0x334>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	f7fa fef2 	bl	8000a5c <__aeabi_dcmpge>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d140      	bne.n	8005cfe <__kernel_rem_pio2+0x2ee>
 8005c7c:	4683      	mov	fp, r0
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2300      	movs	r3, #0
 8005c82:	4630      	mov	r0, r6
 8005c84:	4639      	mov	r1, r7
 8005c86:	f7fa fecb 	bl	8000a20 <__aeabi_dcmpeq>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	f000 80c1 	beq.w	8005e12 <__kernel_rem_pio2+0x402>
 8005c90:	1e65      	subs	r5, r4, #1
 8005c92:	462b      	mov	r3, r5
 8005c94:	2200      	movs	r2, #0
 8005c96:	9900      	ldr	r1, [sp, #0]
 8005c98:	428b      	cmp	r3, r1
 8005c9a:	da6d      	bge.n	8005d78 <__kernel_rem_pio2+0x368>
 8005c9c:	2a00      	cmp	r2, #0
 8005c9e:	f000 808a 	beq.w	8005db6 <__kernel_rem_pio2+0x3a6>
 8005ca2:	ab0c      	add	r3, sp, #48	; 0x30
 8005ca4:	f1aa 0a18 	sub.w	sl, sl, #24
 8005ca8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80ae 	beq.w	8005e0e <__kernel_rem_pio2+0x3fe>
 8005cb2:	4650      	mov	r0, sl
 8005cb4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005d28 <__kernel_rem_pio2+0x318>
 8005cb8:	f000 f9fa 	bl	80060b0 <scalbn>
 8005cbc:	1c6b      	adds	r3, r5, #1
 8005cbe:	00da      	lsls	r2, r3, #3
 8005cc0:	9205      	str	r2, [sp, #20]
 8005cc2:	ec57 6b10 	vmov	r6, r7, d0
 8005cc6:	aa70      	add	r2, sp, #448	; 0x1c0
 8005cc8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8005d3c <__kernel_rem_pio2+0x32c>
 8005ccc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8005cd0:	462c      	mov	r4, r5
 8005cd2:	f04f 0800 	mov.w	r8, #0
 8005cd6:	2c00      	cmp	r4, #0
 8005cd8:	f280 80d4 	bge.w	8005e84 <__kernel_rem_pio2+0x474>
 8005cdc:	462c      	mov	r4, r5
 8005cde:	2c00      	cmp	r4, #0
 8005ce0:	f2c0 8102 	blt.w	8005ee8 <__kernel_rem_pio2+0x4d8>
 8005ce4:	4b18      	ldr	r3, [pc, #96]	; (8005d48 <__kernel_rem_pio2+0x338>)
 8005ce6:	461e      	mov	r6, r3
 8005ce8:	ab70      	add	r3, sp, #448	; 0x1c0
 8005cea:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8005cee:	1b2b      	subs	r3, r5, r4
 8005cf0:	f04f 0900 	mov.w	r9, #0
 8005cf4:	f04f 0a00 	mov.w	sl, #0
 8005cf8:	2700      	movs	r7, #0
 8005cfa:	9306      	str	r3, [sp, #24]
 8005cfc:	e0e6      	b.n	8005ecc <__kernel_rem_pio2+0x4bc>
 8005cfe:	f04f 0b02 	mov.w	fp, #2
 8005d02:	e756      	b.n	8005bb2 <__kernel_rem_pio2+0x1a2>
 8005d04:	f8d8 3000 	ldr.w	r3, [r8]
 8005d08:	bb05      	cbnz	r5, 8005d4c <__kernel_rem_pio2+0x33c>
 8005d0a:	b123      	cbz	r3, 8005d16 <__kernel_rem_pio2+0x306>
 8005d0c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005d10:	f8c8 3000 	str.w	r3, [r8]
 8005d14:	2301      	movs	r3, #1
 8005d16:	3201      	adds	r2, #1
 8005d18:	f108 0804 	add.w	r8, r8, #4
 8005d1c:	461d      	mov	r5, r3
 8005d1e:	e74f      	b.n	8005bc0 <__kernel_rem_pio2+0x1b0>
	...
 8005d2c:	3ff00000 	.word	0x3ff00000
 8005d30:	080064a8 	.word	0x080064a8
 8005d34:	40200000 	.word	0x40200000
 8005d38:	3ff00000 	.word	0x3ff00000
 8005d3c:	3e700000 	.word	0x3e700000
 8005d40:	41700000 	.word	0x41700000
 8005d44:	3fe00000 	.word	0x3fe00000
 8005d48:	08006468 	.word	0x08006468
 8005d4c:	1acb      	subs	r3, r1, r3
 8005d4e:	f8c8 3000 	str.w	r3, [r8]
 8005d52:	462b      	mov	r3, r5
 8005d54:	e7df      	b.n	8005d16 <__kernel_rem_pio2+0x306>
 8005d56:	1e62      	subs	r2, r4, #1
 8005d58:	ab0c      	add	r3, sp, #48	; 0x30
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005d62:	a90c      	add	r1, sp, #48	; 0x30
 8005d64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005d68:	e738      	b.n	8005bdc <__kernel_rem_pio2+0x1cc>
 8005d6a:	1e62      	subs	r2, r4, #1
 8005d6c:	ab0c      	add	r3, sp, #48	; 0x30
 8005d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d72:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005d76:	e7f4      	b.n	8005d62 <__kernel_rem_pio2+0x352>
 8005d78:	a90c      	add	r1, sp, #48	; 0x30
 8005d7a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	430a      	orrs	r2, r1
 8005d82:	e788      	b.n	8005c96 <__kernel_rem_pio2+0x286>
 8005d84:	3301      	adds	r3, #1
 8005d86:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005d8a:	2900      	cmp	r1, #0
 8005d8c:	d0fa      	beq.n	8005d84 <__kernel_rem_pio2+0x374>
 8005d8e:	9a08      	ldr	r2, [sp, #32]
 8005d90:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8005d94:	446a      	add	r2, sp
 8005d96:	3a98      	subs	r2, #152	; 0x98
 8005d98:	9208      	str	r2, [sp, #32]
 8005d9a:	9a06      	ldr	r2, [sp, #24]
 8005d9c:	a920      	add	r1, sp, #128	; 0x80
 8005d9e:	18a2      	adds	r2, r4, r2
 8005da0:	18e3      	adds	r3, r4, r3
 8005da2:	f104 0801 	add.w	r8, r4, #1
 8005da6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8005daa:	9302      	str	r3, [sp, #8]
 8005dac:	9b02      	ldr	r3, [sp, #8]
 8005dae:	4543      	cmp	r3, r8
 8005db0:	da04      	bge.n	8005dbc <__kernel_rem_pio2+0x3ac>
 8005db2:	461c      	mov	r4, r3
 8005db4:	e6a2      	b.n	8005afc <__kernel_rem_pio2+0xec>
 8005db6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005db8:	2301      	movs	r3, #1
 8005dba:	e7e4      	b.n	8005d86 <__kernel_rem_pio2+0x376>
 8005dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dbe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005dc2:	f7fa fb5b 	bl	800047c <__aeabi_i2d>
 8005dc6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dcc:	46ab      	mov	fp, r5
 8005dce:	461c      	mov	r4, r3
 8005dd0:	f04f 0900 	mov.w	r9, #0
 8005dd4:	2600      	movs	r6, #0
 8005dd6:	2700      	movs	r7, #0
 8005dd8:	9b05      	ldr	r3, [sp, #20]
 8005dda:	4599      	cmp	r9, r3
 8005ddc:	dd06      	ble.n	8005dec <__kernel_rem_pio2+0x3dc>
 8005dde:	9b08      	ldr	r3, [sp, #32]
 8005de0:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005de4:	f108 0801 	add.w	r8, r8, #1
 8005de8:	9308      	str	r3, [sp, #32]
 8005dea:	e7df      	b.n	8005dac <__kernel_rem_pio2+0x39c>
 8005dec:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005df0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005df4:	f7fa fbac 	bl	8000550 <__aeabi_dmul>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	4639      	mov	r1, r7
 8005e00:	f7fa f9f0 	bl	80001e4 <__adddf3>
 8005e04:	f109 0901 	add.w	r9, r9, #1
 8005e08:	4606      	mov	r6, r0
 8005e0a:	460f      	mov	r7, r1
 8005e0c:	e7e4      	b.n	8005dd8 <__kernel_rem_pio2+0x3c8>
 8005e0e:	3d01      	subs	r5, #1
 8005e10:	e747      	b.n	8005ca2 <__kernel_rem_pio2+0x292>
 8005e12:	ec47 6b10 	vmov	d0, r6, r7
 8005e16:	f1ca 0000 	rsb	r0, sl, #0
 8005e1a:	f000 f949 	bl	80060b0 <scalbn>
 8005e1e:	ec57 6b10 	vmov	r6, r7, d0
 8005e22:	4ba0      	ldr	r3, [pc, #640]	; (80060a4 <__kernel_rem_pio2+0x694>)
 8005e24:	ee10 0a10 	vmov	r0, s0
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4639      	mov	r1, r7
 8005e2c:	f7fa fe16 	bl	8000a5c <__aeabi_dcmpge>
 8005e30:	b1f8      	cbz	r0, 8005e72 <__kernel_rem_pio2+0x462>
 8005e32:	4b9d      	ldr	r3, [pc, #628]	; (80060a8 <__kernel_rem_pio2+0x698>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	4630      	mov	r0, r6
 8005e38:	4639      	mov	r1, r7
 8005e3a:	f7fa fb89 	bl	8000550 <__aeabi_dmul>
 8005e3e:	f7fa fe21 	bl	8000a84 <__aeabi_d2iz>
 8005e42:	4680      	mov	r8, r0
 8005e44:	f7fa fb1a 	bl	800047c <__aeabi_i2d>
 8005e48:	4b96      	ldr	r3, [pc, #600]	; (80060a4 <__kernel_rem_pio2+0x694>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f7fa fb80 	bl	8000550 <__aeabi_dmul>
 8005e50:	460b      	mov	r3, r1
 8005e52:	4602      	mov	r2, r0
 8005e54:	4639      	mov	r1, r7
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7fa f9c2 	bl	80001e0 <__aeabi_dsub>
 8005e5c:	f7fa fe12 	bl	8000a84 <__aeabi_d2iz>
 8005e60:	1c65      	adds	r5, r4, #1
 8005e62:	ab0c      	add	r3, sp, #48	; 0x30
 8005e64:	f10a 0a18 	add.w	sl, sl, #24
 8005e68:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005e6c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005e70:	e71f      	b.n	8005cb2 <__kernel_rem_pio2+0x2a2>
 8005e72:	4630      	mov	r0, r6
 8005e74:	4639      	mov	r1, r7
 8005e76:	f7fa fe05 	bl	8000a84 <__aeabi_d2iz>
 8005e7a:	ab0c      	add	r3, sp, #48	; 0x30
 8005e7c:	4625      	mov	r5, r4
 8005e7e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005e82:	e716      	b.n	8005cb2 <__kernel_rem_pio2+0x2a2>
 8005e84:	ab0c      	add	r3, sp, #48	; 0x30
 8005e86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005e8a:	f7fa faf7 	bl	800047c <__aeabi_i2d>
 8005e8e:	4632      	mov	r2, r6
 8005e90:	463b      	mov	r3, r7
 8005e92:	f7fa fb5d 	bl	8000550 <__aeabi_dmul>
 8005e96:	4642      	mov	r2, r8
 8005e98:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005e9c:	464b      	mov	r3, r9
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	f7fa fb55 	bl	8000550 <__aeabi_dmul>
 8005ea6:	3c01      	subs	r4, #1
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	460f      	mov	r7, r1
 8005eac:	e713      	b.n	8005cd6 <__kernel_rem_pio2+0x2c6>
 8005eae:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005eb2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8005eb6:	f7fa fb4b 	bl	8000550 <__aeabi_dmul>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4648      	mov	r0, r9
 8005ec0:	4651      	mov	r1, sl
 8005ec2:	f7fa f98f 	bl	80001e4 <__adddf3>
 8005ec6:	3701      	adds	r7, #1
 8005ec8:	4681      	mov	r9, r0
 8005eca:	468a      	mov	sl, r1
 8005ecc:	9b00      	ldr	r3, [sp, #0]
 8005ece:	429f      	cmp	r7, r3
 8005ed0:	dc02      	bgt.n	8005ed8 <__kernel_rem_pio2+0x4c8>
 8005ed2:	9b06      	ldr	r3, [sp, #24]
 8005ed4:	429f      	cmp	r7, r3
 8005ed6:	ddea      	ble.n	8005eae <__kernel_rem_pio2+0x49e>
 8005ed8:	9a06      	ldr	r2, [sp, #24]
 8005eda:	ab48      	add	r3, sp, #288	; 0x120
 8005edc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8005ee0:	e9c6 9a00 	strd	r9, sl, [r6]
 8005ee4:	3c01      	subs	r4, #1
 8005ee6:	e6fa      	b.n	8005cde <__kernel_rem_pio2+0x2ce>
 8005ee8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	dc0b      	bgt.n	8005f06 <__kernel_rem_pio2+0x4f6>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	dc39      	bgt.n	8005f66 <__kernel_rem_pio2+0x556>
 8005ef2:	d05d      	beq.n	8005fb0 <__kernel_rem_pio2+0x5a0>
 8005ef4:	9b02      	ldr	r3, [sp, #8]
 8005ef6:	f003 0007 	and.w	r0, r3, #7
 8005efa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005efe:	ecbd 8b02 	vpop	{d8}
 8005f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f06:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d1f3      	bne.n	8005ef4 <__kernel_rem_pio2+0x4e4>
 8005f0c:	9b05      	ldr	r3, [sp, #20]
 8005f0e:	9500      	str	r5, [sp, #0]
 8005f10:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005f14:	eb0d 0403 	add.w	r4, sp, r3
 8005f18:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8005f1c:	46a2      	mov	sl, r4
 8005f1e:	9b00      	ldr	r3, [sp, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f1aa 0a08 	sub.w	sl, sl, #8
 8005f26:	dc69      	bgt.n	8005ffc <__kernel_rem_pio2+0x5ec>
 8005f28:	46aa      	mov	sl, r5
 8005f2a:	f1ba 0f01 	cmp.w	sl, #1
 8005f2e:	f1a4 0408 	sub.w	r4, r4, #8
 8005f32:	f300 8083 	bgt.w	800603c <__kernel_rem_pio2+0x62c>
 8005f36:	9c05      	ldr	r4, [sp, #20]
 8005f38:	ab48      	add	r3, sp, #288	; 0x120
 8005f3a:	441c      	add	r4, r3
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	2100      	movs	r1, #0
 8005f40:	2d01      	cmp	r5, #1
 8005f42:	f300 809a 	bgt.w	800607a <__kernel_rem_pio2+0x66a>
 8005f46:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8005f4a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005f4e:	f1bb 0f00 	cmp.w	fp, #0
 8005f52:	f040 8098 	bne.w	8006086 <__kernel_rem_pio2+0x676>
 8005f56:	9b04      	ldr	r3, [sp, #16]
 8005f58:	e9c3 7800 	strd	r7, r8, [r3]
 8005f5c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005f60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005f64:	e7c6      	b.n	8005ef4 <__kernel_rem_pio2+0x4e4>
 8005f66:	9e05      	ldr	r6, [sp, #20]
 8005f68:	ab48      	add	r3, sp, #288	; 0x120
 8005f6a:	441e      	add	r6, r3
 8005f6c:	462c      	mov	r4, r5
 8005f6e:	2000      	movs	r0, #0
 8005f70:	2100      	movs	r1, #0
 8005f72:	2c00      	cmp	r4, #0
 8005f74:	da33      	bge.n	8005fde <__kernel_rem_pio2+0x5ce>
 8005f76:	f1bb 0f00 	cmp.w	fp, #0
 8005f7a:	d036      	beq.n	8005fea <__kernel_rem_pio2+0x5da>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f82:	9c04      	ldr	r4, [sp, #16]
 8005f84:	e9c4 2300 	strd	r2, r3, [r4]
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005f90:	f7fa f926 	bl	80001e0 <__aeabi_dsub>
 8005f94:	ae4a      	add	r6, sp, #296	; 0x128
 8005f96:	2401      	movs	r4, #1
 8005f98:	42a5      	cmp	r5, r4
 8005f9a:	da29      	bge.n	8005ff0 <__kernel_rem_pio2+0x5e0>
 8005f9c:	f1bb 0f00 	cmp.w	fp, #0
 8005fa0:	d002      	beq.n	8005fa8 <__kernel_rem_pio2+0x598>
 8005fa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	9b04      	ldr	r3, [sp, #16]
 8005faa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005fae:	e7a1      	b.n	8005ef4 <__kernel_rem_pio2+0x4e4>
 8005fb0:	9c05      	ldr	r4, [sp, #20]
 8005fb2:	ab48      	add	r3, sp, #288	; 0x120
 8005fb4:	441c      	add	r4, r3
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	2100      	movs	r1, #0
 8005fba:	2d00      	cmp	r5, #0
 8005fbc:	da09      	bge.n	8005fd2 <__kernel_rem_pio2+0x5c2>
 8005fbe:	f1bb 0f00 	cmp.w	fp, #0
 8005fc2:	d002      	beq.n	8005fca <__kernel_rem_pio2+0x5ba>
 8005fc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fc8:	4619      	mov	r1, r3
 8005fca:	9b04      	ldr	r3, [sp, #16]
 8005fcc:	e9c3 0100 	strd	r0, r1, [r3]
 8005fd0:	e790      	b.n	8005ef4 <__kernel_rem_pio2+0x4e4>
 8005fd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005fd6:	f7fa f905 	bl	80001e4 <__adddf3>
 8005fda:	3d01      	subs	r5, #1
 8005fdc:	e7ed      	b.n	8005fba <__kernel_rem_pio2+0x5aa>
 8005fde:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005fe2:	f7fa f8ff 	bl	80001e4 <__adddf3>
 8005fe6:	3c01      	subs	r4, #1
 8005fe8:	e7c3      	b.n	8005f72 <__kernel_rem_pio2+0x562>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	e7c8      	b.n	8005f82 <__kernel_rem_pio2+0x572>
 8005ff0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005ff4:	f7fa f8f6 	bl	80001e4 <__adddf3>
 8005ff8:	3401      	adds	r4, #1
 8005ffa:	e7cd      	b.n	8005f98 <__kernel_rem_pio2+0x588>
 8005ffc:	e9da 8900 	ldrd	r8, r9, [sl]
 8006000:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006004:	9b00      	ldr	r3, [sp, #0]
 8006006:	3b01      	subs	r3, #1
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	4632      	mov	r2, r6
 800600c:	463b      	mov	r3, r7
 800600e:	4640      	mov	r0, r8
 8006010:	4649      	mov	r1, r9
 8006012:	f7fa f8e7 	bl	80001e4 <__adddf3>
 8006016:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4640      	mov	r0, r8
 8006020:	4649      	mov	r1, r9
 8006022:	f7fa f8dd 	bl	80001e0 <__aeabi_dsub>
 8006026:	4632      	mov	r2, r6
 8006028:	463b      	mov	r3, r7
 800602a:	f7fa f8db 	bl	80001e4 <__adddf3>
 800602e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006032:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006036:	ed8a 7b00 	vstr	d7, [sl]
 800603a:	e770      	b.n	8005f1e <__kernel_rem_pio2+0x50e>
 800603c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006040:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006044:	4640      	mov	r0, r8
 8006046:	4632      	mov	r2, r6
 8006048:	463b      	mov	r3, r7
 800604a:	4649      	mov	r1, r9
 800604c:	f7fa f8ca 	bl	80001e4 <__adddf3>
 8006050:	e9cd 0100 	strd	r0, r1, [sp]
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4640      	mov	r0, r8
 800605a:	4649      	mov	r1, r9
 800605c:	f7fa f8c0 	bl	80001e0 <__aeabi_dsub>
 8006060:	4632      	mov	r2, r6
 8006062:	463b      	mov	r3, r7
 8006064:	f7fa f8be 	bl	80001e4 <__adddf3>
 8006068:	ed9d 7b00 	vldr	d7, [sp]
 800606c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006070:	ed84 7b00 	vstr	d7, [r4]
 8006074:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006078:	e757      	b.n	8005f2a <__kernel_rem_pio2+0x51a>
 800607a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800607e:	f7fa f8b1 	bl	80001e4 <__adddf3>
 8006082:	3d01      	subs	r5, #1
 8006084:	e75c      	b.n	8005f40 <__kernel_rem_pio2+0x530>
 8006086:	9b04      	ldr	r3, [sp, #16]
 8006088:	9a04      	ldr	r2, [sp, #16]
 800608a:	601f      	str	r7, [r3, #0]
 800608c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006090:	605c      	str	r4, [r3, #4]
 8006092:	609d      	str	r5, [r3, #8]
 8006094:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006098:	60d3      	str	r3, [r2, #12]
 800609a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800609e:	6110      	str	r0, [r2, #16]
 80060a0:	6153      	str	r3, [r2, #20]
 80060a2:	e727      	b.n	8005ef4 <__kernel_rem_pio2+0x4e4>
 80060a4:	41700000 	.word	0x41700000
 80060a8:	3e700000 	.word	0x3e700000
 80060ac:	00000000 	.word	0x00000000

080060b0 <scalbn>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	ec55 4b10 	vmov	r4, r5, d0
 80060b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80060ba:	4606      	mov	r6, r0
 80060bc:	462b      	mov	r3, r5
 80060be:	b999      	cbnz	r1, 80060e8 <scalbn+0x38>
 80060c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80060c4:	4323      	orrs	r3, r4
 80060c6:	d03f      	beq.n	8006148 <scalbn+0x98>
 80060c8:	4b35      	ldr	r3, [pc, #212]	; (80061a0 <scalbn+0xf0>)
 80060ca:	4629      	mov	r1, r5
 80060cc:	ee10 0a10 	vmov	r0, s0
 80060d0:	2200      	movs	r2, #0
 80060d2:	f7fa fa3d 	bl	8000550 <__aeabi_dmul>
 80060d6:	4b33      	ldr	r3, [pc, #204]	; (80061a4 <scalbn+0xf4>)
 80060d8:	429e      	cmp	r6, r3
 80060da:	4604      	mov	r4, r0
 80060dc:	460d      	mov	r5, r1
 80060de:	da10      	bge.n	8006102 <scalbn+0x52>
 80060e0:	a327      	add	r3, pc, #156	; (adr r3, 8006180 <scalbn+0xd0>)
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	e01f      	b.n	8006128 <scalbn+0x78>
 80060e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80060ec:	4291      	cmp	r1, r2
 80060ee:	d10c      	bne.n	800610a <scalbn+0x5a>
 80060f0:	ee10 2a10 	vmov	r2, s0
 80060f4:	4620      	mov	r0, r4
 80060f6:	4629      	mov	r1, r5
 80060f8:	f7fa f874 	bl	80001e4 <__adddf3>
 80060fc:	4604      	mov	r4, r0
 80060fe:	460d      	mov	r5, r1
 8006100:	e022      	b.n	8006148 <scalbn+0x98>
 8006102:	460b      	mov	r3, r1
 8006104:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006108:	3936      	subs	r1, #54	; 0x36
 800610a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800610e:	4296      	cmp	r6, r2
 8006110:	dd0d      	ble.n	800612e <scalbn+0x7e>
 8006112:	2d00      	cmp	r5, #0
 8006114:	a11c      	add	r1, pc, #112	; (adr r1, 8006188 <scalbn+0xd8>)
 8006116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800611a:	da02      	bge.n	8006122 <scalbn+0x72>
 800611c:	a11c      	add	r1, pc, #112	; (adr r1, 8006190 <scalbn+0xe0>)
 800611e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006122:	a319      	add	r3, pc, #100	; (adr r3, 8006188 <scalbn+0xd8>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f7fa fa12 	bl	8000550 <__aeabi_dmul>
 800612c:	e7e6      	b.n	80060fc <scalbn+0x4c>
 800612e:	1872      	adds	r2, r6, r1
 8006130:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006134:	428a      	cmp	r2, r1
 8006136:	dcec      	bgt.n	8006112 <scalbn+0x62>
 8006138:	2a00      	cmp	r2, #0
 800613a:	dd08      	ble.n	800614e <scalbn+0x9e>
 800613c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006140:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006144:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006148:	ec45 4b10 	vmov	d0, r4, r5
 800614c:	bd70      	pop	{r4, r5, r6, pc}
 800614e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006152:	da08      	bge.n	8006166 <scalbn+0xb6>
 8006154:	2d00      	cmp	r5, #0
 8006156:	a10a      	add	r1, pc, #40	; (adr r1, 8006180 <scalbn+0xd0>)
 8006158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800615c:	dac0      	bge.n	80060e0 <scalbn+0x30>
 800615e:	a10e      	add	r1, pc, #56	; (adr r1, 8006198 <scalbn+0xe8>)
 8006160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006164:	e7bc      	b.n	80060e0 <scalbn+0x30>
 8006166:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800616a:	3236      	adds	r2, #54	; 0x36
 800616c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006170:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006174:	4620      	mov	r0, r4
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <scalbn+0xf8>)
 8006178:	2200      	movs	r2, #0
 800617a:	e7d5      	b.n	8006128 <scalbn+0x78>
 800617c:	f3af 8000 	nop.w
 8006180:	c2f8f359 	.word	0xc2f8f359
 8006184:	01a56e1f 	.word	0x01a56e1f
 8006188:	8800759c 	.word	0x8800759c
 800618c:	7e37e43c 	.word	0x7e37e43c
 8006190:	8800759c 	.word	0x8800759c
 8006194:	fe37e43c 	.word	0xfe37e43c
 8006198:	c2f8f359 	.word	0xc2f8f359
 800619c:	81a56e1f 	.word	0x81a56e1f
 80061a0:	43500000 	.word	0x43500000
 80061a4:	ffff3cb0 	.word	0xffff3cb0
 80061a8:	3c900000 	.word	0x3c900000
 80061ac:	00000000 	.word	0x00000000

080061b0 <floor>:
 80061b0:	ec51 0b10 	vmov	r0, r1, d0
 80061b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80061b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061bc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80061c0:	2e13      	cmp	r6, #19
 80061c2:	ee10 5a10 	vmov	r5, s0
 80061c6:	ee10 8a10 	vmov	r8, s0
 80061ca:	460c      	mov	r4, r1
 80061cc:	dc31      	bgt.n	8006232 <floor+0x82>
 80061ce:	2e00      	cmp	r6, #0
 80061d0:	da14      	bge.n	80061fc <floor+0x4c>
 80061d2:	a333      	add	r3, pc, #204	; (adr r3, 80062a0 <floor+0xf0>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f7fa f804 	bl	80001e4 <__adddf3>
 80061dc:	2200      	movs	r2, #0
 80061de:	2300      	movs	r3, #0
 80061e0:	f7fa fc46 	bl	8000a70 <__aeabi_dcmpgt>
 80061e4:	b138      	cbz	r0, 80061f6 <floor+0x46>
 80061e6:	2c00      	cmp	r4, #0
 80061e8:	da53      	bge.n	8006292 <floor+0xe2>
 80061ea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80061ee:	4325      	orrs	r5, r4
 80061f0:	d052      	beq.n	8006298 <floor+0xe8>
 80061f2:	4c2d      	ldr	r4, [pc, #180]	; (80062a8 <floor+0xf8>)
 80061f4:	2500      	movs	r5, #0
 80061f6:	4621      	mov	r1, r4
 80061f8:	4628      	mov	r0, r5
 80061fa:	e024      	b.n	8006246 <floor+0x96>
 80061fc:	4f2b      	ldr	r7, [pc, #172]	; (80062ac <floor+0xfc>)
 80061fe:	4137      	asrs	r7, r6
 8006200:	ea01 0307 	and.w	r3, r1, r7
 8006204:	4303      	orrs	r3, r0
 8006206:	d01e      	beq.n	8006246 <floor+0x96>
 8006208:	a325      	add	r3, pc, #148	; (adr r3, 80062a0 <floor+0xf0>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7f9 ffe9 	bl	80001e4 <__adddf3>
 8006212:	2200      	movs	r2, #0
 8006214:	2300      	movs	r3, #0
 8006216:	f7fa fc2b 	bl	8000a70 <__aeabi_dcmpgt>
 800621a:	2800      	cmp	r0, #0
 800621c:	d0eb      	beq.n	80061f6 <floor+0x46>
 800621e:	2c00      	cmp	r4, #0
 8006220:	bfbe      	ittt	lt
 8006222:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006226:	4133      	asrlt	r3, r6
 8006228:	18e4      	addlt	r4, r4, r3
 800622a:	ea24 0407 	bic.w	r4, r4, r7
 800622e:	2500      	movs	r5, #0
 8006230:	e7e1      	b.n	80061f6 <floor+0x46>
 8006232:	2e33      	cmp	r6, #51	; 0x33
 8006234:	dd0b      	ble.n	800624e <floor+0x9e>
 8006236:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800623a:	d104      	bne.n	8006246 <floor+0x96>
 800623c:	ee10 2a10 	vmov	r2, s0
 8006240:	460b      	mov	r3, r1
 8006242:	f7f9 ffcf 	bl	80001e4 <__adddf3>
 8006246:	ec41 0b10 	vmov	d0, r0, r1
 800624a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800624e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006252:	f04f 37ff 	mov.w	r7, #4294967295
 8006256:	40df      	lsrs	r7, r3
 8006258:	4238      	tst	r0, r7
 800625a:	d0f4      	beq.n	8006246 <floor+0x96>
 800625c:	a310      	add	r3, pc, #64	; (adr r3, 80062a0 <floor+0xf0>)
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	f7f9 ffbf 	bl	80001e4 <__adddf3>
 8006266:	2200      	movs	r2, #0
 8006268:	2300      	movs	r3, #0
 800626a:	f7fa fc01 	bl	8000a70 <__aeabi_dcmpgt>
 800626e:	2800      	cmp	r0, #0
 8006270:	d0c1      	beq.n	80061f6 <floor+0x46>
 8006272:	2c00      	cmp	r4, #0
 8006274:	da0a      	bge.n	800628c <floor+0xdc>
 8006276:	2e14      	cmp	r6, #20
 8006278:	d101      	bne.n	800627e <floor+0xce>
 800627a:	3401      	adds	r4, #1
 800627c:	e006      	b.n	800628c <floor+0xdc>
 800627e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006282:	2301      	movs	r3, #1
 8006284:	40b3      	lsls	r3, r6
 8006286:	441d      	add	r5, r3
 8006288:	45a8      	cmp	r8, r5
 800628a:	d8f6      	bhi.n	800627a <floor+0xca>
 800628c:	ea25 0507 	bic.w	r5, r5, r7
 8006290:	e7b1      	b.n	80061f6 <floor+0x46>
 8006292:	2500      	movs	r5, #0
 8006294:	462c      	mov	r4, r5
 8006296:	e7ae      	b.n	80061f6 <floor+0x46>
 8006298:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800629c:	e7ab      	b.n	80061f6 <floor+0x46>
 800629e:	bf00      	nop
 80062a0:	8800759c 	.word	0x8800759c
 80062a4:	7e37e43c 	.word	0x7e37e43c
 80062a8:	bff00000 	.word	0xbff00000
 80062ac:	000fffff 	.word	0x000fffff

080062b0 <_init>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	bf00      	nop
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr

080062bc <_fini>:
 80062bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062be:	bf00      	nop
 80062c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c2:	bc08      	pop	{r3}
 80062c4:	469e      	mov	lr, r3
 80062c6:	4770      	bx	lr
